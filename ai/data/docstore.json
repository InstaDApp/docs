{"0":{"pageContent":"OverviewWelcome to the Instadapp docs!Our platform is open to developers of all sizes, from solo programmers, to hacker groups and globally scaled teams. Our team and members of our community look forward to helping you build an application on top of Instadapp with maximum security and composability.The following pages contain a comprehensive guide to Instadapp’s ecosystem, also known as the ‘Defi Smart Layer’. The protocol’s codebase is hosted on Github.IntroductionThe Instadapp platform is a full feature platform for both users and developers to leverage the full potential of DeFi. The Instadapp protocol ('DSL') acts as the middleware that aggregates multiple DeFi protocols into one upgradable smart contract layer. This structure allows Instadapp to access the full potential of Decentralized Finance.The main functionalities of the DSL are account extensions and upgradability. The unique upgradability means that the upcoming and new extensions will be upgraded, maintained and managed by INST governance. The DSL also includes a new operability layer that acts as a ‘Account Extension.’ These extensions allow the user to access new and unique functionality","metadata":{"source":"https://docs.instadapp.io/index.html"}},"1":{"pageContent":"and new extensions will be upgraded, maintained and managed by INST governance. The DSL also includes a new operability layer that acts as a ‘Account Extension.’ These extensions allow the user to access new and unique functionality for their DSL account. These extensions and the evolution of the platform form a DeFi hub through which new use cases and extensions can be created, some examples of possible use cases include: Flash Loan Module, Authority extension, L2 extension, etc.For more in-depth knowledge of DSL, head over to the blog post-  Instadapp Protocol & Governance.How Smart Accounts work: The Execution traceInteracting with the new DSL Accounts:While calling a function, users interact with their Smart Account.The smart account contract uses a fallback function to fetch the address of the Extension Module to call via Implementation - contract using (msg.sig) of the function called by the user.Once the address is fetched, our smart account uses it to obtain the implementation code and runs it.The mapping of Function sigs to extensions will be added by the INST governance. Instadapp team is focused on building and excited for community collaboration on","metadata":{"source":"https://docs.instadapp.io/index.html"}},"2":{"pageContent":"our smart account uses it to obtain the implementation code and runs it.The mapping of Function sigs to extensions will be added by the INST governance. Instadapp team is focused on building and excited for community collaboration on extending the smart account capabilities. In the meantime, developers can begin playing with Extension Module 1 today!To simulate a transaction in Module 1, the user interacts with their smart account using the cast() function. This is the core function that allows smart accounts to interact with DeFi protocols and complete composable transactions.However, the cast function does not reside in the smart account contract of the user, hence the fallback function is called to get the implementation contract using msg.sig.After getting the extension contract, a delegate call is made to the respective extension which contains the cast function to run all the spells.Inside the spell function, delegate call(s) is done to execute the function called by the user.Get StartedTo walk through the entire process of installation and interacting with the DeFi Smart Layer (DSL), get started with Installation.Explore the sidebar to find more","metadata":{"source":"https://docs.instadapp.io/index.html"}},"3":{"pageContent":"call(s) is done to execute the function called by the user.Get StartedTo walk through the entire process of installation and interacting with the DeFi Smart Layer (DSL), get started with Installation.Explore the sidebar to find more developer specific documentation covering all the aspects of the protocol.We want to hear from you!To get involved and to stay up to date with new updates and launches, please join the #dev room in the Instadapp’s community Discord server; our team, and members of the community, look forward to helping you. Your questions and feedback help us improve, so please don't hesitate to ask if you can't find what you are looking for here. Get connected:Join the Instadapp DiscordFollow Instadapp on TwitterSubscribe to the Instadapp blogUtilizing Protocols through InstadappInstadapp is a middle ware protocol your DeFi Smart Account is a non-custodial smart contract wallet and interacts directly with the underlying protocols. The Smart Wallet itself is not vulnerable to attacks such as front running, oracle or flash loan related attacks however when interacting with the underlying protocols you assume the same risk as using these protocols","metadata":{"source":"https://docs.instadapp.io/index.html"}},"4":{"pageContent":"protocols. The Smart Wallet itself is not vulnerable to attacks such as front running, oracle or flash loan related attacks however when interacting with the underlying protocols you assume the same risk as using these protocols directly as with any wallet.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Get StartedInstallation","metadata":{"source":"https://docs.instadapp.io/index.html"}},"5":{"pageContent":"UNISWAP-V3-A - OptimismDecentralized Exchange.\nUniswapV3-v1 connector on optimism triggers methods like mint, deposit, withdraw, collect, burn. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.MintMint New NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"mint\",  args: [tokenA, tokenB, fee, tickLower, tickUpper, amtA, amtB, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\ntokenA addreess\ntokenB\naddress\ntokenB addreess\nfee\nuint24\nfee percentage\ntickLower\nint24\nLower tick\ntickUpper\nint24\nUpper tick\namtA\nuint256\namount of tokenA\namtB\nuint256\namount of tokenB\nslippage\nuint256\nslippage percentage\ngetIds\nuint256[]\nID to retrieve amtA\nsetId\nuint256\nID stores the amount of LP token","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap"}},"6":{"pageContent":"Lower tick\ntickUpper\nint24\nUpper tick\namtA\nuint256\namount of tokenA\namtB\nuint256\namount of tokenB\nslippage\nuint256\nslippage percentage\ngetIds\nuint256[]\nID to retrieve amtA\nsetId\nuint256\nID stores the amount of LP token\nDepositIncrease Liquidity of NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"deposit\",  args: [tokenId, amountA, amountB, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\namountA\nuint256\ntokenA amounts.\namountB\nuint256\ntokenB amounts.\nslippage\nuint256\nslippage.\ngetIds\nuint256[]\nIDs to retrieve token amounts\nsetId\nuint256\nstores the liquidity amount\nWithdrawDecrease Liquidity of NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"withdraw\",  args: [tokenId, liquidity, amountAMin, amountBMin, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\nliquidity\nuint256\nLP Token amount.\namountAMin\nuint256\nMin amount of tokenA.\namountBMin\nuint256\nMin amount of tokenB.\ngetId\nuint256\nID to retrieve LP token amounts","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap"}},"7":{"pageContent":"Type\nDescription\ntokenId\nuint256\nNFT LP Token ID.\nliquidity\nuint256\nLP Token amount.\namountAMin\nuint256\nMin amount of tokenA.\namountBMin\nuint256\nMin amount of tokenB.\ngetId\nuint256\nID to retrieve LP token amounts\nsetIds\nuint256[]\nstores the amount of output tokens\nCollectCollect from NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"collect\",  args: [tokenId, amount0Max, amount1Max, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\namount0Max\nuint256\nMax amount of token0.\namount1Max\nuint256\nMax amount of token1.\ngetIds\nuint256[]\nIDs to retrieve amounts\nsetIds\nuint256[]\nstores the amount of output tokens\nBurnBurn NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"burn\",  args: [tokenId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap"}},"8":{"pageContent":"BurnBurn NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"burn\",  args: [tokenId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismUniswap V3 StakerOptimismUniswap V3","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap"}},"9":{"pageContent":"1INCH-V4 - OptimismOn-chain DEX Aggregator.\n1Inch-v4 connector on optimism triggers methods like sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SellSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"1INCH-V4-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/1inch-v4"}},"10":{"pageContent":"sellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Optimism0xOptimismAave V3 Import (permit)","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/1inch-v4"}},"11":{"pageContent":"Reflexer - MainnetCollateralized Borrowing.\nReflexer-v1 connector on mainnet triggers methods like open, close, deposit, withdraw, borrow, payback, withdrawLiquidated, depositAndBorrow, exit. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.OpenOpen a Reflexer Safe.spells.add({  connector: \"REFLEXER-A\",  method: \"open\",  args: [colType]});Copy to clipboard\nParameter\nType\nDescription\ncolType\nstring\nType of Collateral.(eg: 'ETH-A')\nCloseClose a Reflexer Safe.spells.add({  connector: \"REFLEXER-A\",  method: \"close\",  args: [safe]});Copy to clipboard\nParameter\nType\nDescription\nsafe\nuint256\nSafe ID to close.\nDepositDeposit collateral to a Reflexer safespells.add({  connector: \"REFLEXER-A\",  method: \"deposit\",  args: [safe, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsafe\nuint256\nSafe ID.\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/reflexer"}},"12":{"pageContent":"Parameter\nType\nDescription\nsafe\nuint256\nSafe ID.\namt\nuint256\ntoken amount to deposit.\ngetId\nuint256\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.\nWithdrawWithdraw collateral from a Reflexer Safespells.add({  connector: \"REFLEXER-A\",  method: \"withdraw\",  args: [safe, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsafe\nuint256\nSafe ID.\namt\nuint256\ntoken amount to withdraw.\ngetId\nuint256\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.\nBorrowBorrow Coin using a Reflexer safespells.add({  connector: \"REFLEXER-A\",  method: \"borrow\",  args: [safe, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsafe\nuint256\nSafe ID.\namt\nuint256\ntoken amount to borrow.\ngetId\nuint256\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/reflexer"}},"13":{"pageContent":"Description\nsafe\nuint256\nSafe ID.\namt\nuint256\ntoken amount to borrow.\ngetId\nuint256\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.\nPaybackPayback Coin debt owed by a Reflexer safespells.add({  connector: \"REFLEXER-A\",  method: \"payback\",  args: [safe, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsafe\nuint256\nSafe ID.\namt\nuint256\ntoken amount to payback.\ngetId\nuint256\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.\nWithdrawLiquidatedWithdraw leftover collateral after Liquidation.spells.add({  connector: \"REFLEXER-A\",  method: \"withdrawLiquidated\",  args: [safe, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsafe\nuint256\nSafe ID.\namt\nuint256\ntoken amount to Withdraw.\ngetId\nuint256\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/reflexer"}},"14":{"pageContent":"Description\nsafe\nuint256\nSafe ID.\namt\nuint256\ntoken amount to Withdraw.\ngetId\nuint256\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.\nDepositAndBorrowDeposit collateral and borrow Coin.spells.add({  connector: \"REFLEXER-A\",  method: \"depositAndBorrow\",  args: [safe, depositAmt, borrowAmt, getIdDeposit, getIdBorrow, setIdDeposit, setIdBorrow]});Copy to clipboard\nParameter\nType\nDescription\nsafe\nuint256\nSafe ID.\ndepositAmt\nuint256\ntoken deposit amount to Withdraw.\nborrowAmt\nuint256\ntoken borrow amount to Withdraw.\ngetIdDeposit\nuint256\nGet deposit token amount at this ID from `InstaMemory` Contract.\ngetIdBorrow\nuint256\nGet borrow token amount at this ID from `InstaMemory` Contract.\nsetIdDeposit\nuint256\nSet deposit token amount at this ID in `InstaMemory` Contract.\nsetIdBorrow\nuint256\nSet borrow token amount at this ID in `InstaMemory` Contract.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/reflexer"}},"15":{"pageContent":"setIdDeposit\nuint256\nSet deposit token amount at this ID in `InstaMemory` Contract.\nsetIdBorrow\nuint256\nSet borrow token amount at this ID in `InstaMemory` Contract.\nExitExit Coin from handler.spells.add({  connector: \"REFLEXER-A\",  method: \"exit\",  args: [safe, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsafe\nuint256\nSafe ID.\namt\nuint256\ntoken amount to exit.\ngetId\nuint256\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetPoolTogetherMainnetSUSHISWAP","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/reflexer"}},"16":{"pageContent":"Aave V3 - MainnetLending & Borrowing.\nAaveV3-v1.0 connector on mainnet triggers methods like deposit, depositWithoutCollateral, withdraw, borrow, borrowOnBehalfOf, payback, paybackWithATokens, paybackOnBehalfOf, enableCollateral, swapBorrowRateMode, setUserEMode, delegateBorrow. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Aave v3 for lending / collaterization.spells.add({  connector: \"AAVE-V3-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v3"}},"17":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositWithoutCollateralDeposit a token to Aave v3 without enabling it as collateral.spells.add({  connector: \"AAVE-V3-A\",  method: \"depositWithoutCollateral\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v3spells.add({  connector: \"AAVE-V3-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v3"}},"18":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token using Aave v3spells.add({  connector: \"AAVE-V3-A\",  method: \"borrow\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of debt. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowOnBehalfOfBorrow a token using Aave v3 on behalf of a userspells.add({  connector: \"AAVE-V3-A\",  method: \"borrowOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v3"}},"19":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of debt. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nThe user who will incur the debt\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackPayback debt owed.spells.add({  connector: \"AAVE-V3-A\",  method: \"payback\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v3"}},"20":{"pageContent":"rateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackWithATokensRepays a borrowed amount on a specific reserve using the reserve aTokens, burning the equivalent debt tokens.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackWithATokens\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfOfPayback debt owed on behalf os a user.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v3"}},"21":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nAddress of user who's debt to repay.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nEnableCollateralEnable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"enableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral\nSwapBorrowRateModeSwaps user borrow rate mode between variable and stablespells.add({  connector: \"AAVE-V3-A\",  method: \"swapBorrowRateMode\",  args: [token, rateMode]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v3"}},"22":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256\nCurrent rate mode. (Stable = 1, Variable = 2)\nSetUserEModeUpdates the user's e-mode categoryspells.add({  connector: \"AAVE-V3-A\",  method: \"setUserEMode\",  args: [categoryId]});Copy to clipboard\nParameter\nType\nDescription\ncategoryId\nuint8\nThe category Id of the e-mode user want to set\nDelegateBorrowGives approval to delegate debt tokensspells.add({  connector: \"AAVE-V3-A\",  method: \"delegateBorrow\",  args: [token, amount, rateMode, delegateTo, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256\nThe type of debt\ndelegateTo\naddress\nThe address to whom the user is delegating\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens delegated.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v3"}},"23":{"pageContent":"amount\nuint256\nThe amount\nrateMode\nuint256\nThe type of debt\ndelegateTo\naddress\nThe address to whom the user is delegating\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens delegated.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetAave V2MainnetAssets Transfer Polygon Bridge","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v3"}},"24":{"pageContent":"Compound-III - MainnetLending & Borrowing.\nCompoundV3-v1.0 connector on mainnet triggers methods like deposit, depositOnBehalf, depositFromUsingManager, withdraw, withdrawTo, withdrawOnBehalf, withdrawOnBehalfAndTransfer, borrow, borrowTo, borrowOnBehalf, borrowOnBehalfAndTransfer, payback, paybackOnBehalf, paybackFromUsingManager, buyCollateral, transferAsset, transferAssetOnBehalf, toggleAccountManager, toggleAccountManagerWithPermit. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Compound for lending / collaterization.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"deposit\",  args: [market, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"25":{"pageContent":"Parameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be supplied. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositOnBehalfDeposit a token to Compound for lending / collaterization on behalf of 'to'.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"depositOnBehalf\",  args: [market, token, to, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be supplied. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE).\nto\naddress\nThe address on behalf of which the supply is made.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"26":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositFromUsingManagerDeposit a token to Compound for lending / collaterization from a address and update the position of 'to'.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"depositFromUsingManager\",  args: [market, token, from, to, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be supplied. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nfrom\naddress\nThe address from where amount is to be supplied.\nto\naddress\nThe address on account of which the supply is made or whose positions are updated.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"27":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw base token or deposited token from Compound.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"withdraw\",  args: [market, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be withdrawn. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nWithdrawToWithdraw base token or deposited token from Compound on behalf of an address and transfer to 'to'.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"withdrawTo\",  args: [market, token, to, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"28":{"pageContent":"Parameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be withdrawn. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nto\naddress\nThe address to which the borrowed assets are to be transferred.\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nWithdrawOnBehalfWithdraw base token or deposited token from Compound from an address and transfer to DSA.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"withdrawOnBehalf\",  args: [market, token, from, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be withdrawn. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nfrom\naddress\nThe address from where asset is to be withdrawed.\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"29":{"pageContent":"from\naddress\nThe address from where asset is to be withdrawed.\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nWithdrawOnBehalfAndTransferWithdraw base token or deposited token from Compound from an address and transfer to 'to'.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"withdrawOnBehalfAndTransfer\",  args: [market, token, from, to, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be withdrawn. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nfrom\naddress\nThe address from where asset is to be withdrawed.\nto\naddress\nThe address to which the borrowed assets are to be transferred.\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"30":{"pageContent":"amt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow base token from Compound.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"borrow\",  args: [market, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be borrowed. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of base token to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowToBorrow base token from Compound on behalf of an address.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"borrowTo\",  args: [market, token, to, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be borrowed. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nto\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"31":{"pageContent":"Parameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be borrowed. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nto\naddress\nThe address to which the borrowed asset is transferred.\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowOnBehalfBorrow base token or deposited token from Compound.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"borrowOnBehalf\",  args: [market, token, from, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be borrowed. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nfrom\naddress\nThe address from where asset is to be withdrawed.\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"32":{"pageContent":"amt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowOnBehalfAndTransferBorrow base token or deposited token from Compound.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"borrowOnBehalfAndTransfer\",  args: [market, token, from, to, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be borrowed. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nfrom\naddress\nThe address from where asset is to be withdrawed.\nto\naddress\nThe address to which the borrowed assets are to be transferred.\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"33":{"pageContent":"amt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackRepays the borrow of the base asset.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"payback\",  args: [market, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be repaid. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount to be repaid.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens repaid.\nPaybackOnBehalfRepays borrow of the base asset on behalf of 'to'.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"paybackOnBehalf\",  args: [market, token, to, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be repaid. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nto\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"34":{"pageContent":"Parameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be repaid. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nto\naddress\nThe address on behalf of which the borrow is to be repaid.\namt\nuint256\nThe amount to be repaid.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens repaid.\nPaybackFromUsingManagerRepays borrow of the base asset on behalf of 'to'. 'From' address must approve the comet market.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"paybackFromUsingManager\",  args: [market, token, from, to, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe address of the token to be repaid. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nfrom\naddress\nThe address from which the borrow has to be repaid on behalf of 'to'.\nto\naddress\nThe address on behalf of which the borrow is to be repaid.\namt\nuint256\nThe amount to be repaid.\ngetId\nuint256\nID to retrieve amt.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"35":{"pageContent":"to\naddress\nThe address on behalf of which the borrow is to be repaid.\namt\nuint256\nThe amount to be repaid.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens repaid.\nBuyCollateralBuy collateral asset to increase protocol base reserves until targetReserves is reached.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"buyCollateral\",  args: [market, sellToken, buyAsset, unitAmt, baseSellAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market from where to withdraw.\nsellToken\naddress\nbase token. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nbuyAsset\naddress\nThe collateral asset to purachase. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nunitAmt\nuint256\nMinimum amount of collateral expected to be received.\nbaseSellAmt\nuint256\nAmount of base asset to be sold for collateral.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of base tokens sold.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"36":{"pageContent":"baseSellAmt\nuint256\nAmount of base asset to be sold for collateral.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of base tokens sold.\nTransferAssetTransfer base/collateral asset to dest address from caller's account.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"transferAsset\",  args: [market, token, dest, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe collateral asset to transfer to dest address.\ndest\naddress\nThe account where to transfer the base assets.\namount\nuint256\nThe amount of the collateral token to transfer. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens transferred.\nTransferAssetOnBehalfTransfer collateral asset to dest address from src's account.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"transferAssetOnBehalf\",  args: [market, token, src, dest, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"37":{"pageContent":"Parameter\nType\nDescription\nmarket\naddress\nThe address of the market.\ntoken\naddress\nThe collateral asset to transfer to dest address.\nsrc\naddress\nThe account from where to transfer the collaterals.\ndest\naddress\nThe account where to transfer the collateral assets.\namount\nuint256\nThe amount of the collateral token to transfer. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens transferred.\nToggleAccountManagerAuthorize/Remove managers to perform write operations for the position.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"toggleAccountManager\",  args: [market, manager, isAllowed]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market where to supply.\nmanager\naddress\nThe address to be authorized.\nisAllowed\nbool\nWhether to allow or disallow the manager.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"38":{"pageContent":"Parameter\nType\nDescription\nmarket\naddress\nThe address of the market where to supply.\nmanager\naddress\nThe address to be authorized.\nisAllowed\nbool\nWhether to allow or disallow the manager.\nToggleAccountManagerWithPermitAuthorize/Remove managers to perform write operations for owner's position.spells.add({  connector: \"COMPOUND-V3-A\",  method: \"toggleAccountManagerWithPermit\",  args: [market, owner, manager, isAllowed, nonce, expiry, v, r, s]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market where to supply.\nowner\naddress\nThe authorizind owner account.\nmanager\naddress\nThe address to be authorized.\nisAllowed\nbool\nWhether to allow or disallow the manager.\nnonce\nuint256\nSigner's nonce.\nexpiry\nuint256\nThe duration for which to permit the manager.\nv\nuint8\nRecovery byte of the signature.\nr\nbytes32\nHalf of the ECDSA signature pair.\ns\nbytes32\nHalf of the ECDSA signature pair.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"39":{"pageContent":"uint256\nSigner's nonce.\nexpiry\nuint256\nThe duration for which to permit the manager.\nv\nuint8\nRecovery byte of the signature.\nr\nbytes32\nHalf of the ECDSA signature pair.\ns\nbytes32\nHalf of the ECDSA signature pair.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetCompound-III-RewardsMainnetEULER-IMPORT-A","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3"}},"40":{"pageContent":"Basic A (ERC20) - MainnetDeposit & Withdraw from DSA.\nBasic-v1.1 connector on mainnet triggers methods like deposit, depositFrom, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to DSA.spells.add({  connector: \"BASIC-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE and need to pass `value` parameter equal to `amt` in cast function ```dsa.cast({..., value: amt})```.For ERC20: Need to give allowance prior casting spells.)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)` (Not valid for ETH))\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/basic"}},"41":{"pageContent":"amt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)` (Not valid for ETH))\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositFromDeposit a token to DSA from any user.spells.add({  connector: \"BASIC-A\",  method: \"depositFrom\",  args: [token, amt, from, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (Note: ETH is not supported. Use `deposit()`)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\nfrom\naddress\nThe address depositing the token.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw a token from DSAspells.add({  connector: \"BASIC-A\",  method: \"withdraw\",  args: [token, amt, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/basic"}},"42":{"pageContent":"Type\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of tokens withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetBasic C (ERC1155)MainnetB.Protocol Compound","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/basic"}},"43":{"pageContent":"MORPHO-AAVE-V2-A - MainnetDeposit ETH/ERC20_Token.\nMorpho-AaveV2-v1.0 connector on mainnet triggers methods like deposit, depositWithMaxGas, depositOnBehalf, borrow, borrowWithMaxGas, withdraw, payback, paybackOnBehalf. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Morpho Aave for lending / collaterization.spells.add({  connector: \"MORPHO-AAVE-V2-A\",  method: \"deposit\",  args: [_tokenAddress, _poolTokenAddress, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of aToken to deposit.(For ETH: aWETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\n_getId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-aave"}},"44":{"pageContent":"_poolTokenAddress\naddress\nThe address of aToken to deposit.(For ETH: aWETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens deposited.\nDepositWithMaxGasDeposit a token to Morpho Aave for lending / collaterization with max gas.spells.add({  connector: \"MORPHO-AAVE-V2-A\",  method: \"depositWithMaxGas\",  args: [_tokenAddress, _poolTokenAddress, _amount, _maxGasForMatching, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE).\n_poolTokenAddress\naddress\nThe address of aToken to deposit.(For ETH: aWETH address).\n_amount\nuint256\nThe amount of the token (in underlying) to deposit. (For max: `uint256(-1)`).\n_maxGasForMatching\nuint256\nThe maximum amount of gas to consume within a matching engine loop.\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-aave"}},"45":{"pageContent":"_maxGasForMatching\nuint256\nThe maximum amount of gas to consume within a matching engine loop.\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens deposited.\nDepositOnBehalfDeposit a token to Morpho Aave for lending / collaterization on behalf of a user.spells.add({  connector: \"MORPHO-AAVE-V2-A\",  method: \"depositOnBehalf\",  args: [_tokenAddress, _poolTokenAddress, _onBehalf, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of aToken to deposit.(For ETH: aWETH address)\n_onBehalf\naddress\nThe address of user on behalf to deposit.\n_amount\nuint256\nThe amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-aave"}},"46":{"pageContent":"_amount\nuint256\nThe amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens deposited.\nBorrowBorrow a token from Morpho Aave.spells.add({  connector: \"MORPHO-AAVE-V2-A\",  method: \"borrow\",  args: [_tokenAddress, _poolTokenAddress, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of aToken to borrow.(For ETH: aWETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to borrow.\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens borrowed.\nBorrowWithMaxGasBorrow a token from Morpho Aave with max gas.spells.add({  connector: \"MORPHO-AAVE-V2-A\",  method: \"borrowWithMaxGas\",  args: [_tokenAddress, _poolTokenAddress, _amount, _maxGasForMatching, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-aave"}},"47":{"pageContent":"Parameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE).\n_poolTokenAddress\naddress\nThe address of aToken to borrow.(For ETH: aWETH address).\n_amount\nuint256\nThe amount of the token (in underlying) to borrow.\n_maxGasForMatching\nuint256\nThe maximum amount of gas to consume within a matching engine loop.\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens borrowed.\nWithdrawWithdraw a token from Morpho Aave.spells.add({  connector: \"MORPHO-AAVE-V2-A\",  method: \"withdraw\",  args: [_tokenAddress, _poolTokenAddress, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of aToken to withdraw.(For ETH: aWETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to withdraw. (For max: `uint256(-1)`)\n_getId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-aave"}},"48":{"pageContent":"_poolTokenAddress\naddress\nThe address of aToken to withdraw.(For ETH: aWETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to withdraw. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens withdrawed.\nPaybackPayback a token to Morpho Aave.spells.add({  connector: \"MORPHO-AAVE-V2-A\",  method: \"payback\",  args: [_tokenAddress, _poolTokenAddress, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of aToken to payback.(For ETH: aWETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to payback. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-aave"}},"49":{"pageContent":"_amount\nuint256\nThe amount of the token (in underlying) to payback. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfPayback a token to Morpho Aave.spells.add({  connector: \"MORPHO-AAVE-V2-A\",  method: \"paybackOnBehalf\",  args: [_tokenAddress, _poolTokenAddress, _onBehalf, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of aToken to payback.(For ETH: aWETH address)\n_onBehalf\naddress\nThe address of user who's debt to repay.\n_amount\nuint256\nThe amount of the token (in underlying) to payback. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-aave"}},"50":{"pageContent":"_amount\nuint256\nThe amount of the token (in underlying) to payback. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens paid back.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetMakerDAOMainnetMORPHO-COMPOUND-V2-A","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-aave"}},"51":{"pageContent":"Comp - MainnetClaim COMP.\nCOMP-v1.1 connector on mainnet triggers methods like ClaimComp, ClaimCompTwo, ClaimCompThree, delegate. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ClaimCompClaim Accrued COMP Token.spells.add({  connector: \"COMP-A\",  method: \"ClaimComp\",  args: [setId]});Copy to clipboard\nParameter\nType\nDescription\nsetId\nuint256\nID stores the amount of COMP claimed.\nClaimCompTwoClaim Accrued COMP Token.spells.add({  connector: \"COMP-A\",  method: \"ClaimCompTwo\",  args: [tokenIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenIds\nstring[]\nArray of supplied and borrowed token IDs.\nsetId\nuint256\nID stores the amount of COMP claimed.\nClaimCompThreeClaim Accrued COMP Token.spells.add({  connector: \"COMP-A\",  method: \"ClaimCompThree\",  args: [supplyTokenIds, borrowTokenIds, setId]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/comp"}},"52":{"pageContent":"ClaimCompThreeClaim Accrued COMP Token.spells.add({  connector: \"COMP-A\",  method: \"ClaimCompThree\",  args: [supplyTokenIds, borrowTokenIds, setId]});Copy to clipboard\nParameter\nType\nDescription\nsupplyTokenIds\nstring[]\nArray of supplied tokenIds.\nborrowTokenIds\nstring[]\nArray of borrowed tokenIds.\nsetId\nuint256\nID stores the amount of COMP claimed.\nDelegateDelegate votes.spells.add({  connector: \"COMP-A\",  method: \"delegate\",  args: [delegatee]});Copy to clipboard\nParameter\nType\nDescription\ndelegatee\naddress\nThe address to delegate the votes to.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetB.Protocol MakerDAOMainnetCompound","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/comp"}},"53":{"pageContent":"Aave Rewards - MainnetClaim Aave rewards.\nAave-Incentives-v1 connector on mainnet triggers methods like claim. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ClaimClaim Pending Rewards from Aave incentives contract.spells.add({  connector: \"AAVE-CLAIM-A\",  method: \"claim\",  args: [assets, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nassets\naddress[]\nThe list of assets supplied and borrowed.\namt\nuint256\nThe amount of reward to claim. (uint(-1) for max)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of rewards claimed.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-rewards"}},"54":{"pageContent":"assets\naddress[]\nThe list of assets supplied and borrowed.\namt\nuint256\nThe amount of reward to claim. (uint(-1) for max)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of rewards claimed.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Mainnet1Inch (on-chain)MainnetAave V1","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-rewards"}},"55":{"pageContent":"MakerDAO - MainnetCollateralized Borrowing.\nMakerDAO-v1.2 connector on mainnet triggers methods like open, close, transfer, deposit, withdraw, borrow, payback, withdrawLiquidated, depositAndBorrow, exitDai, depositDai, withdrawDai. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.OpenOpen a MakerDAO Vaultspells.add({  connector: \"MAKERDAO-A\",  method: \"open\",  args: [colType]});Copy to clipboard\nParameter\nType\nDescription\ncolType\nstring\nType of Collateral.(eg: 'ETH-A')\nCloseClose a MakerDAO Vaultspells.add({  connector: \"MAKERDAO-A\",  method: \"close\",  args: [vault]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID to close.\nTransferTransfer a MakerDAO Vault to \"nextOwner\"spells.add({  connector: \"MAKERDAO-A\",  method: \"transfer\",  args: [vault, nextOwner]});Copy to clipboard\nParameter\nType","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/makerdao"}},"56":{"pageContent":"vault\nuint256\nVault ID to close.\nTransferTransfer a MakerDAO Vault to \"nextOwner\"spells.add({  connector: \"MAKERDAO-A\",  method: \"transfer\",  args: [vault, nextOwner]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint\nVault ID to close.\nnextOwner\naddress\nAddress of the next owner of the vault.\nDepositDeposit collateral to a MakerDAO vaultspells.add({  connector: \"MAKERDAO-A\",  method: \"deposit\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw collateral from a MakerDAO vaultspells.add({  connector: \"MAKERDAO-A\",  method: \"withdraw\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/makerdao"}},"57":{"pageContent":"Parameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow DAI using a MakerDAO vaultspells.add({  connector: \"MAKERDAO-A\",  method: \"borrow\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of DAI to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI borrowed.\nPaybackPayback DAI debt owed by a MakerDAO vaultspells.add({  connector: \"MAKERDAO-A\",  method: \"payback\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of DAI to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/makerdao"}},"58":{"pageContent":"vault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of DAI to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI paid back.\nWithdrawLiquidatedWithdraw leftover collateral after Liquidation.spells.add({  connector: \"MAKERDAO-A\",  method: \"withdrawLiquidated\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\ntoken amount to Withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of collateral withdrawn.\nDepositAndBorrowDeposit collateral and borrow DAI.spells.add({  connector: \"MAKERDAO-A\",  method: \"depositAndBorrow\",  args: [vault, depositAmt, borrowAmt, getIdDeposit, getIdBorrow, setIdDeposit, setIdBorrow]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\ndepositAmt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\nborrowAmt","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/makerdao"}},"59":{"pageContent":"Parameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\ndepositAmt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\nborrowAmt\nuint256\nThe amount of DAI to borrow.\ngetIdDeposit\nuint256\nID to retrieve depositAmt.\ngetIdBorrow\nuint256\nID to retrieve borrowAmt.\nsetIdDeposit\nuint256\nID stores the amount of tokens deposited.\nsetIdBorrow\nuint256\nID stores the amount of DAI borrowed.\nExitDaiExit DAI from urn.spells.add({  connector: \"MAKERDAO-A\",  method: \"exitDai\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of DAI to exit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI exited.\nDepositDaiDeposit DAI in DSR.spells.add({  connector: \"MAKERDAO-A\",  method: \"depositDai\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of DAI to deposit. (For max: `uint256(-1)`)\ngetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/makerdao"}},"60":{"pageContent":"Parameter\nType\nDescription\namt\nuint256\nThe amount of DAI to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI deposited.\nWithdrawDaiWithdraw DAI from DSR.spells.add({  connector: \"MAKERDAO-A\",  method: \"withdrawDai\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of DAI to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetLite-AMainnetMORPHO-AAVE-V2-A","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/makerdao"}},"61":{"pageContent":"Lite-B - MainnetImport Position\nInstaLite-Import-v1.0 connector on mainnet triggers methods like importPosition. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportPositionSupply a token into Instalite.spells.add({  connector: \"LITE-B\",  method: \"importPosition\",  args: [flashTkn_, flashAmt_, route_, stEthAmt_, wethAmt_, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\nflashTkn_\naddress\nAddress of flash token.\nflashAmt_\nuint256\nFlash loan amount.\nroute_\nuint256\nFlash loan route.\nstEthAmt_\nuint256\nAmount of astEthToken to be imported.\nwethAmt_\nuint256\nAmount of weth borrows to be imported.\ngetIds\nuint256[]\nIDs to retrieve amt.\nsetId\nuint256\nID to store balanceOf of iEth.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/lite-b"}},"62":{"pageContent":"Flash loan route.\nstEthAmt_\nuint256\nAmount of astEthToken to be imported.\nwethAmt_\nuint256\nAmount of weth borrows to be imported.\ngetIds\nuint256[]\nIDs to retrieve amt.\nsetId\nuint256\nID to store balanceOf of iEth.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetLiquityMainnetLite-A","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/lite-b"}},"63":{"pageContent":"LidoStETH - MainnetStake ETH and receive stETH while staking.\nLidoStEth-v1 connector on mainnet triggers methods like deposit. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.Depositstake Eth in Lido, users receive stETH tokens on a 1:1 basis representing their staked ETH.spells.add({  connector: \"LIDO-STETH-A\",  method: \"deposit\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of ETH to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of ETH deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/lidosteth"}},"64":{"pageContent":"Parameter\nType\nDescription\namt\nuint256\nThe amount of ETH to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of ETH deposited.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetINSTAPOOL-V4MainnetLiquity","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/lidosteth"}},"65":{"pageContent":"Uniswap V3 - OptimismDecentralized Exchange.\nUniswapV3-v1 connector on optimism triggers methods like mint, deposit, withdraw, collect, burn. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.MintMint New NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"mint\",  args: [tokenA, tokenB, fee, tickLower, tickUpper, amtA, amtB, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\ntokenA addreess\ntokenB\naddress\ntokenB addreess\nfee\nuint24\nfee percentage\ntickLower\nint24\nLower tick\ntickUpper\nint24\nUpper tick\namtA\nuint256\namount of tokenA\namtB\nuint256\namount of tokenB\nslippage\nuint256\nslippage percentage\ngetIds\nuint256[]\nID to retrieve amtA\nsetId\nuint256\nID stores the amount of LP token","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswapv3"}},"66":{"pageContent":"Lower tick\ntickUpper\nint24\nUpper tick\namtA\nuint256\namount of tokenA\namtB\nuint256\namount of tokenB\nslippage\nuint256\nslippage percentage\ngetIds\nuint256[]\nID to retrieve amtA\nsetId\nuint256\nID stores the amount of LP token\nDepositIncrease Liquidity of NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"deposit\",  args: [tokenId, amountA, amountB, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\namountA\nuint256\ntokenA amounts.\namountB\nuint256\ntokenB amounts.\nslippage\nuint256\nslippage.\ngetIds\nuint256[]\nIDs to retrieve token amounts\nsetId\nuint256\nstores the liquidity amount\nWithdrawDecrease Liquidity of NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"withdraw\",  args: [tokenId, liquidity, amountAMin, amountBMin, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\nliquidity\nuint256\nLP Token amount.\namountAMin\nuint256\nMin amount of tokenA.\namountBMin\nuint256\nMin amount of tokenB.\ngetId\nuint256\nID to retrieve LP token amounts","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswapv3"}},"67":{"pageContent":"Type\nDescription\ntokenId\nuint256\nNFT LP Token ID.\nliquidity\nuint256\nLP Token amount.\namountAMin\nuint256\nMin amount of tokenA.\namountBMin\nuint256\nMin amount of tokenB.\ngetId\nuint256\nID to retrieve LP token amounts\nsetIds\nuint256[]\nstores the amount of output tokens\nCollectCollect from NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"collect\",  args: [tokenId, amount0Max, amount1Max, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\namount0Max\nuint256\nMax amount of token0.\namount1Max\nuint256\nMax amount of token1.\ngetIds\nuint256[]\nIDs to retrieve amounts\nsetIds\nuint256[]\nstores the amount of output tokens\nBurnBurn NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"burn\",  args: [tokenId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswapv3"}},"68":{"pageContent":"BurnBurn NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"burn\",  args: [tokenId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismUNISWAP-V3-AOptimismWETH","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswapv3"}},"69":{"pageContent":"MORPHO-COMPOUND-V2-A - MainnetDeposit ETH/ERC20_Token.\nMorpho-Compound-v1.0 connector on mainnet triggers methods like deposit, depositWithMaxGas, depositOnBehalf, borrow, borrowWithMaxGas, withdraw, payback, paybackOnBehalf. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Morpho Compound for lending / collaterization.spells.add({  connector: \"MORPHO-COMPOUND-V2-A\",  method: \"deposit\",  args: [_tokenAddress, _poolTokenAddress, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of cToken to deposit.(For ETH: cETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-compound"}},"70":{"pageContent":"_poolTokenAddress\naddress\nThe address of cToken to deposit.(For ETH: cETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens deposited.\nDepositWithMaxGasDeposit a token to Morpho Compound for lending / collaterization with max gas.spells.add({  connector: \"MORPHO-COMPOUND-V2-A\",  method: \"depositWithMaxGas\",  args: [_tokenAddress, _poolTokenAddress, _amount, _maxGasForMatching, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of cToken to deposit.(For ETH: cETH address).\n_amount\nuint256\nThe amount of the token (in underlying) to deposit. (For max: `uint256(-1)`).\n_maxGasForMatching\nuint256\nThe maximum amount of gas to consume within a matching engine loop.\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-compound"}},"71":{"pageContent":"_maxGasForMatching\nuint256\nThe maximum amount of gas to consume within a matching engine loop.\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens deposited.\nDepositOnBehalfDeposit a token to Morpho Compound for lending / collaterization on behalf of a user.spells.add({  connector: \"MORPHO-COMPOUND-V2-A\",  method: \"depositOnBehalf\",  args: [_tokenAddress, _poolTokenAddress, _onBehalf, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of cToken to deposit.(For ETH: cETH address)\n_onBehalf\naddress\nThe address of user on behalf to deposit.\n_amount\nuint256\nThe amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-compound"}},"72":{"pageContent":"_amount\nuint256\nThe amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens deposited.\nBorrowBorrow a token from Morpho Compound.spells.add({  connector: \"MORPHO-COMPOUND-V2-A\",  method: \"borrow\",  args: [_tokenAddress, _poolTokenAddress, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of cToken to borrow.(For ETH: cETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to borrow.\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens borrowed.\nBorrowWithMaxGasBorrow a token from Morpho Compound with max gas.spells.add({  connector: \"MORPHO-COMPOUND-V2-A\",  method: \"borrowWithMaxGas\",  args: [_tokenAddress, _poolTokenAddress, _amount, _maxGasForMatching, _getId, _setId]});Copy to clipboard\nParameter","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-compound"}},"73":{"pageContent":"Parameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of cToken to borrow.(For ETH: cETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to borrow.\n_maxGasForMatching\nuint256\nThe maximum amount of gas to consume within a matching engine loop.\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens borrowed.\nWithdrawWithdraw a token from Morpho Compound.spells.add({  connector: \"MORPHO-COMPOUND-V2-A\",  method: \"withdraw\",  args: [_tokenAddress, _poolTokenAddress, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of cToken to withdraw.(For ETH: cETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to withdraw. (For max: `uint256(-1)`)\n_getId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-compound"}},"74":{"pageContent":"_poolTokenAddress\naddress\nThe address of cToken to withdraw.(For ETH: cETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to withdraw. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens withdrawed.\nPaybackPayback a token to Morpho Compound.spells.add({  connector: \"MORPHO-COMPOUND-V2-A\",  method: \"payback\",  args: [_tokenAddress, _poolTokenAddress, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of cToken to payback.(For ETH: cETH address)\n_amount\nuint256\nThe amount of the token (in underlying) to payback. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-compound"}},"75":{"pageContent":"_amount\nuint256\nThe amount of the token (in underlying) to payback. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfPayback a token to Morpho Compound on behalf of a user.spells.add({  connector: \"MORPHO-COMPOUND-V2-A\",  method: \"paybackOnBehalf\",  args: [_tokenAddress, _poolTokenAddress, _onBehalf, _amount, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenAddress\naddress\nThe address of underlying token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n_poolTokenAddress\naddress\nThe address of cToken to payback.(For ETH: cETH address)\n_onBehalf\naddress\nThe address of user who's debt to repay.\n_amount\nuint256\nThe amount of the token (in underlying) to payback. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-compound"}},"76":{"pageContent":"_amount\nuint256\nThe amount of the token (in underlying) to payback. (For max: `uint256(-1)`)\n_getId\nuint256\nID to retrieve amt.\n_setId\nuint256\nID stores the amount of tokens paid back.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetMORPHO-AAVE-V2-AMainnetMORPHO-REWARDS-A","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-compound"}},"77":{"pageContent":"UBIQUITY - MainnetUbiquity Dollar (uAD).\nUbiquity-v1 connector on mainnet triggers methods like deposit, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.Deposit3POOL (DAI / USDC / USDT) => METAPOOL (3CRV / uAD) => uAD3CRV-f => Ubiquity BondingShareSTEP 1 : 3POOL (DAI / USDC / USDT) => 3CRVSTEP 2 : METAPOOL(3CRV / UAD) => uAD3CRV-fSTEP 3 : uAD3CRV-f => Ubiquity BondingSharespells.add({  connector: \"UBIQUITY-A\",  method: \"deposit\",  args: [token, amount, durationWeeks, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken deposited : DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\namount\nuint256\nAmount of tokens to deposit (For max: `uint256(-1)`)\ndurationWeeks\nuint256\nDuration in weeks tokens will be locked (4-208)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/ubiquity"}},"78":{"pageContent":"amount\nuint256\nAmount of tokens to deposit (For max: `uint256(-1)`)\ndurationWeeks\nuint256\nDuration in weeks tokens will be locked (4-208)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the bonding share id of tokens deposited.\nWithdrawUbiquity BondingShare => uAD3CRV-f => METAPOOL (3CRV / uAD) => 3POOL (DAI / USDC / USDT)STEP 1 : Ubiquity BondingShare  => uAD3CRV-fSTEP 2 : uAD3CRV-f => METAPOOL(3CRV / UAD)STEP 3 : 3CRV => 3POOL (DAI / USDC / USDT)spells.add({  connector: \"UBIQUITY-A\",  method: \"withdraw\",  args: [bondingShareId, token, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbondingShareId\nuint256\nBonding Share Id to withdraw\ntoken\naddress\nToken to withdraw to : DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\ngetId\nuint256\nID\nsetId\nuint256\nID","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/ubiquity"}},"79":{"pageContent":"Parameter\nType\nDescription\nbondingShareId\nuint256\nBonding Share Id to withdraw\ntoken\naddress\nToken to withdraw to : DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\ngetId\nuint256\nID\nsetId\nuint256\nID\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetSUSHISWAPMainnetUNISWAP-V3-SWAP-A","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/ubiquity"}},"80":{"pageContent":"Compound-III-Rewards - MainnetRewards.\nCompoundV3Rewards-v1.0 connector on mainnet triggers methods like claimRewards, claimRewardsOnBehalfOf. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ClaimRewardsClaim rewards and interests accrued.spells.add({  connector: \"COMPOUND-V3-REWARDS-A\",  method: \"claimRewards\",  args: [market, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\nsetId\nuint256\nID stores the amount of rewards claimed.\nClaimRewardsOnBehalfOfClaim rewards and interests accrued and transfer to dest address.spells.add({  connector: \"COMPOUND-V3-REWARDS-A\",  method: \"claimRewardsOnBehalfOf\",  args: [market, owner, to, setId]});Copy to clipboard\nParameter\nType\nDescription\nmarket\naddress\nThe address of the market.\nowner\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3-rewards"}},"81":{"pageContent":"Parameter\nType\nDescription\nmarket\naddress\nThe address of the market.\nowner\naddress\nThe account of which the rewards are to be claimed.\nto\naddress\nThe account where to transfer the claimed rewards.\nsetId\nuint256\nID stores the amount of rewards claimed.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetCompoundMainnetCompound-III","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v3-rewards"}},"82":{"pageContent":"Euler - MainnetDeposit ETH/ERC20_Token.\nEuler-v1.0 connector on mainnet triggers methods like deposit, withdraw, borrow, repay, mint, burn, eTransfer, dTransfer, approveSpenderDebt, enterMarket, exitMarket. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Euler for lending / collaterization.spells.add({  connector: \"EULER-A\",  method: \"deposit\",  args: [subAccount, token, amt, enableCollateral, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsubAccount\nuint256\nSub-account Id (0 for primary and 1 - 255 for sub-account)\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\nenableCollateral\nbool\nTrue for entering the market\ngetId\nuint256\nID to retrieve amt.\nsetId","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/euler"}},"83":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\nenableCollateral\nbool\nTrue for entering the market\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token and earned interest from Eulerspells.add({  connector: \"EULER-A\",  method: \"withdraw\",  args: [subAccount, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsubAccount\nuint256\nSubaccount number\ntoken\naddress\nThe address of the token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token from Eulerspells.add({  connector: \"EULER-A\",  method: \"borrow\",  args: [subAccount, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsubAccount\nuint256\nSubaccount number\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/euler"}},"84":{"pageContent":"Parameter\nType\nDescription\nsubAccount\nuint256\nSubaccount number\ntoken\naddress\nThe address of the token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nRepayRepay a token from Eulerspells.add({  connector: \"EULER-A\",  method: \"repay\",  args: [subAccount, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsubAccount\nuint256\nSubaccount number\ntoken\naddress\nThe address of the token to repay.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to repay. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nMintMint a token from Euler. Mint creates an equal amount of deposits and debts. (self-borrow)spells.add({  connector: \"EULER-A\",  method: \"mint\",  args: [subAccount, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsubAccount\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/euler"}},"85":{"pageContent":"Parameter\nType\nDescription\nsubAccount\nuint256\nSubaccount number\ntoken\naddress\nThe address of the token to mint.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to mint.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nBurnBurn a token from Euler. Burn removes equal amount of deposits and debts.spells.add({  connector: \"EULER-A\",  method: \"burn\",  args: [subAccount, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsubAccount\nuint256\nSubaccount number\ntoken\naddress\nThe address of the token to burn.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to burn.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nETransferETransfer deposits from one sub-account to another.spells.add({  connector: \"EULER-A\",  method: \"eTransfer\",  args: [subAccountFrom, subAccountTo, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsubAccountFrom","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/euler"}},"86":{"pageContent":"Parameter\nType\nDescription\nsubAccountFrom\nuint256\nsubAccount from which deposit is transferred\nsubAccountTo\nuint256\nsubAccount to which deposit is transferred\ntoken\naddress\nThe address of the token to etransfer.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to etransfer. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDTransferDTransfer deposits from one sub-account to another.spells.add({  connector: \"EULER-A\",  method: \"dTransfer\",  args: [subAccountFrom, subAccountTo, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nsubAccountFrom\nuint256\nsubAccount from which debt is transferred\nsubAccountTo\nuint256\nsubAccount to which debt is transferred\ntoken\naddress\nThe address of the token to dtransfer.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to dtransfer. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/euler"}},"87":{"pageContent":"amt\nuint256\nThe amount of the token to dtransfer. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nApproveSpenderDebtApprove sender to send debt.spells.add({  connector: \"EULER-A\",  method: \"approveSpenderDebt\",  args: [subAccountId, debtSender, token, amt, setId]});Copy to clipboard\nParameter\nType\nDescription\nsubAccountId\nuint256\nSubaccount id of receiver\ndebtSender\naddress\nAddress of sender\ntoken\naddress\nThe address of the token.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token.\nsetId\nuint256\nID stores the amount of tokens deposited.\nEnterMarketEnter Market.spells.add({  connector: \"EULER-A\",  method: \"enterMarket\",  args: [subAccountId, tokens]});Copy to clipboard\nParameter\nType\nDescription\nsubAccountId\nuint256\nSubaccount number\ntokens\naddress[]\nArray of new token markets to be entered\nExitMarketExit Market.spells.add({  connector: \"EULER-A\",  method: \"exitMarket\",  args: [subAccountId, token]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/euler"}},"88":{"pageContent":"tokens\naddress[]\nArray of new token markets to be entered\nExitMarketExit Market.spells.add({  connector: \"EULER-A\",  method: \"exitMarket\",  args: [subAccountId, token]});Copy to clipboard\nParameter\nType\nDescription\nsubAccountId\nuint256\nSubaccount number\ntoken\naddress\ntoken address\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetEULER-IMPORT-AMainnetGelato Aave Protection","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/euler"}},"89":{"pageContent":"1Inch (on-chain) - MainnetOn-chain and off-chian DEX Aggregator.\n1Proto-v1.1 connector on mainnet triggers methods like sell, sellMulti. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SellSwap tokens from exchanges like Uniswap, Kyber etc, with calculation done off-chain.spells.add({  connector: \"1INCH-B\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, distribution, disableDexes, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ndistribution\nuint[]","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/1proto"}},"90":{"pageContent":"sellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ndistribution\nuint[]\nThe distribution of swap across different DEXs.\ndisableDexes\nuint\nDisable a dex. (To disable none: 0)\ngetId\nuint\nID to retrieve sellAmt.\nsetId\nuint\nID stores the amount of token brought.\nSellMultiSwap multiple tokens from exchanges like Uniswap, Kyber etc, with calculation done off-chain.spells.add({  connector: \"1INCH-B\",  method: \"sellMulti\",  args: [tokens, sellAmt, unitAmt, distribution, disableDexes, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens.\nsellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ndistribution\nuint[]\nThe distribution of swap across different DEXs.\ndisableDexes\nuint[]\nDisable a dex. (To disable none: 0)\ngetId\nuint\nID to retrieve sellAmt.\nsetId\nuint\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/1proto"}},"91":{"pageContent":"distribution\nuint[]\nThe distribution of swap across different DEXs.\ndisableDexes\nuint[]\nDisable a dex. (To disable none: 0)\ngetId\nuint\nID to retrieve sellAmt.\nsetId\nuint\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Mainnet1INCH-V4MainnetAave Rewards","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/1proto"}},"92":{"pageContent":"MORPHO-REWARDS-A - MainnetClaim Morpho and Underlying Pool Rewards.\nMorpho-Rewards-v1.0 connector on mainnet triggers methods like claimMorpho, claimCompound, claimAave. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ClaimMorphoClaims rewards.spells.add({  connector: \"MORPHO-REWARDS-A\",  method: \"claimMorpho\",  args: [_account, _claimable, _proof, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_account\naddress\nThe address of the claimer.\n_claimable\nuint256\nThe overall claimable amount of token rewards.\n_proof\nbytes32[]\nThe merkle proof that validates this claim.\n_setId\nuint256\nundefined\nClaimCompoundClaims rewards for the given assets.spells.add({  connector: \"MORPHO-REWARDS-A\",  method: \"claimCompound\",  args: [_poolTokenAddresses, _tradeForMorphoToken, _setId]});Copy to clipboard\nParameter\nType\nDescription","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-rewards"}},"93":{"pageContent":"Parameter\nType\nDescription\n_poolTokenAddresses\naddress[]\nThe cToken addresses to claim rewards from.\n_tradeForMorphoToken\nbool\nWhether or not to trade reward tokens for MORPHO tokens.\n_setId\nuint256\nSet ID for claimed amount(in COMP).\nClaimAaveClaims rewards for the given assets.spells.add({  connector: \"MORPHO-REWARDS-A\",  method: \"claimAave\",  args: [_poolTokenAddresses, _tradeForMorphoToken, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_poolTokenAddresses\naddress[]\nThe assets to claim rewards from (aToken or variable debt token).\n_tradeForMorphoToken\nbool\nWhether or not to trade reward tokens for MORPHO tokens.\n_setId\nuint256\nSet ID for claimed amount(in reward token).","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-rewards"}},"94":{"pageContent":"_tradeForMorphoToken\nbool\nWhether or not to trade reward tokens for MORPHO tokens.\n_setId\nuint256\nSet ID for claimed amount(in reward token).\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetMORPHO-COMPOUND-V2-AMainnetMSTABLE","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/morpho-rewards"}},"95":{"pageContent":"Liquity - MainnetLending & Borrowing.\nLiquity-v1 connector on mainnet triggers methods like open, close, deposit, withdraw, borrow, repay, adjust, claimCollateralFromRedemption, stabilityDeposit, stabilityWithdraw, stabilityMoveEthGainToTrove, stake, unstake, claimStakingGains. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.OpenOpens a Trove by depositing ETH and borrowing LUSDspells.add({  connector: \"LIQUITY-A\",  method: \"open\",  args: [depositAmount, maxFeePercentage, borrowAmount, upperHint, lowerHint, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ndepositAmount\nuint\nThe amount of ETH to deposit\nmaxFeePercentage\nuint\nThe maximum borrow fee that this transaction should permit\nborrowAmount\nuint\nThe amount of LUSD to borrow\nupperHint\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"96":{"pageContent":"Type\nDescription\ndepositAmount\nuint\nThe amount of ETH to deposit\nmaxFeePercentage\nuint\nThe maximum borrow fee that this transaction should permit\nborrowAmount\nuint\nThe amount of LUSD to borrow\nupperHint\naddress\nAddress of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\nlowerHint\naddress\nAddress of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\ngetIds\nuint[]\nOptional (default: 0) Optional storage slot to get deposit & borrow amounts stored using other spells\nsetIds\nuint[]\nOptional (default: 0) Optional storage slot to set deposit & borrow amounts to be used in future spells\nCloseCloses a Trove by repaying LUSD debtspells.add({  connector: \"LIQUITY-A\",  method: \"close\",  args: [setId]});Copy to clipboard\nParameter\nType\nDescription\nsetId\nuint\nOptional storage slot to store the ETH withdrawn from the Trove","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"97":{"pageContent":"Parameter\nType\nDescription\nsetId\nuint\nOptional storage slot to store the ETH withdrawn from the Trove\nDepositIncrease Trove collateral (collateral Top up)spells.add({  connector: \"LIQUITY-A\",  method: \"deposit\",  args: [amount, upperHint, lowerHint, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namount\nuint\nAmount of ETH to deposit into Trove\nupperHint\naddress\nAddress of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\nlowerHint\naddress\nAddress of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\ngetId\nuint\nOptional storage slot to retrieve the ETH from\nsetId\nuint\nOptional storage slot to set the ETH deposited\nWithdrawMove Trove collateral from Trove to DSAspells.add({  connector: \"LIQUITY-A\",  method: \"withdraw\",  args: [amount, upperHint, lowerHint, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namount\nuint\nAmount of ETH to move from Trove to DSA\nupperHint\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"98":{"pageContent":"Parameter\nType\nDescription\namount\nuint\nAmount of ETH to move from Trove to DSA\nupperHint\naddress\nAddress of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\nlowerHint\naddress\nAddress of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\ngetId\nuint\nOptional storage slot to get the amount of ETH to withdraw\nsetId\nuint\nOptional storage slot to store the withdrawn ETH in\nBorrowBorrow LUSD via an existing Trovespells.add({  connector: \"LIQUITY-A\",  method: \"borrow\",  args: [maxFeePercentage, amount, upperHint, lowerHint, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nmaxFeePercentage\nuint\nThe maximum borrow fee that this transaction should permit\namount\nuint\nAmount of LUSD to borrow\nupperHint\naddress\nAddress of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\nlowerHint\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"99":{"pageContent":"amount\nuint\nAmount of LUSD to borrow\nupperHint\naddress\nAddress of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\nlowerHint\naddress\nAddress of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\ngetId\nuint\nOptional storage slot to retrieve the amount of LUSD to borrow\nsetId\nuint\nOptional storage slot to store the final amount of LUSD borrowed\nRepayRepay LUSD Trove debtspells.add({  connector: \"LIQUITY-A\",  method: \"repay\",  args: [amount, upperHint, lowerHint, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namount\nuint\nAmount of LUSD to repay\nupperHint\naddress\nAddress of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\nlowerHint\naddress\nAddress of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\ngetId\nuint\nOptional storage slot to retrieve the amount of LUSD from\nsetId\nuint","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"100":{"pageContent":"lowerHint\naddress\nAddress of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\ngetId\nuint\nOptional storage slot to retrieve the amount of LUSD from\nsetId\nuint\nOptional storage slot to store the final amount of LUSD repaid\nAdjustAdjust Trove debt and/or collateralspells.add({  connector: \"LIQUITY-A\",  method: \"adjust\",  args: [maxFeePercentage, depositAmount, withdrawAmount, borrowAmount, repayAmount, upperHint, lowerHint, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\nmaxFeePercentage\nuint\nThe maximum borrow fee that this transaction should permit\ndepositAmount\nuint\nAmount of ETH to deposit\nwithdrawAmount\nuint\nAmount of ETH to withdraw\nborrowAmount\nuint\nAmount of LUSD to borrow\nrepayAmount\nuint\nAmount of LUSD to repay\nupperHint\naddress\nAddress of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\nlowerHint\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"101":{"pageContent":"repayAmount\nuint\nAmount of LUSD to repay\nupperHint\naddress\nAddress of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\nlowerHint\naddress\nAddress of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\ngetIds\nuint[]\nOptional Get Ids for deposit, withdraw, borrow & repay\nsetIds\nuint[]\nOptional Set Ids for deposit, withdraw, borrow & repay\nClaimCollateralFromRedemptionClaim remaining collateral from Trovespells.add({  connector: \"LIQUITY-A\",  method: \"claimCollateralFromRedemption\",  args: [setId]});Copy to clipboard\nParameter\nType\nDescription\nsetId\nuint\nOptional storage slot to store the ETH claimed\nStabilityDepositDeposit LUSD into Stability Poolspells.add({  connector: \"LIQUITY-A\",  method: \"stabilityDeposit\",  args: [amount, frontendTag, getDepositId, setDepositId, setEthGainId, setLqtyGainId]});Copy to clipboard\nParameter\nType\nDescription\namount\nuint\nAmount of LUSD to deposit into Stability Pool\nfrontendTag\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"102":{"pageContent":"Parameter\nType\nDescription\namount\nuint\nAmount of LUSD to deposit into Stability Pool\nfrontendTag\naddress\nAddress of the frontend to make this deposit against (determines the kickback rate of rewards)\ngetDepositId\nuint\nOptional storage slot to retrieve the amount of LUSD from\nsetDepositId\nuint\nOptional storage slot to store the final amount of LUSD deposited\nsetEthGainId\nuint\nOptional storage slot to store any ETH gains in\nsetLqtyGainId\nuint\nOptional storage slot to store any LQTY gains in\nStabilityWithdrawWithdraw LUSD from Stability Poolspells.add({  connector: \"LIQUITY-A\",  method: \"stabilityWithdraw\",  args: [amount, getWithdrawId, setWithdrawId, setEthGainId, setLqtyGainId]});Copy to clipboard\nParameter\nType\nDescription\namount\nuint\nAmount of LUSD to withdraw from Stability Pool\ngetWithdrawId\nuint\nOptional storage slot to retrieve the amount of LUSD to withdraw from\nsetWithdrawId\nuint\nOptional storage slot to store the withdrawn LUSD\nsetEthGainId\nuint\nOptional storage slot to store any ETH gains in\nsetLqtyGainId\nuint","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"103":{"pageContent":"setWithdrawId\nuint\nOptional storage slot to store the withdrawn LUSD\nsetEthGainId\nuint\nOptional storage slot to store any ETH gains in\nsetLqtyGainId\nuint\nOptional storage slot to store any LQTY gains in\nStabilityMoveEthGainToTroveMoves user's ETH gain from the Stability Pool into their Trovespells.add({  connector: \"LIQUITY-A\",  method: \"stabilityMoveEthGainToTrove\",  args: [upperHint, lowerHint]});Copy to clipboard\nParameter\nType\nDescription\nupperHint\naddress\nAddress of the Trove near the upper bound of where the user's Trove should now sit in the ordered Trove list\nlowerHint\naddress\nAddress of the Trove near the lower bound of where the user's Trove should now sit in the ordered Trove list\nStakeStake LQTY in Staking Poolspells.add({  connector: \"LIQUITY-A\",  method: \"stake\",  args: [amount, getStakeId, setStakeId, setEthGainId, setLusdGainId]});Copy to clipboard\nParameter\nType\nDescription\namount\nuint\nAmount of LQTY to stake\ngetStakeId\nuint\nOptional storage slot to retrieve the amount of LQTY to stake\nsetStakeId","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"104":{"pageContent":"Parameter\nType\nDescription\namount\nuint\nAmount of LQTY to stake\ngetStakeId\nuint\nOptional storage slot to retrieve the amount of LQTY to stake\nsetStakeId\nuint\nOptional storage slot to store the final staked amount (can differ if requested with max balance: uint(-1))\nsetEthGainId\nuint\nOptional storage slot to store any ETH gains\nsetLusdGainId\nuint\nOptional storage slot to store any LUSD gains\nUnstakeUnstake LQTY in Staking Poolspells.add({  connector: \"LIQUITY-A\",  method: \"unstake\",  args: [amount, getUnstakeId, setUnstakeId, setEthGainId, setLusdGainId]});Copy to clipboard\nParameter\nType\nDescription\namount\nuint\nAmount of LQTY to unstake\ngetUnstakeId\nuint\nOptional storage slot to retrieve the amount of LQTY to unstake\nsetUnstakeId\nuint\nOptional storage slot to store the unstaked LQTY\nsetEthGainId\nuint\nOptional storage slot to store any ETH gains\nsetLusdGainId\nuint\nOptional storage slot to store any LUSD gains","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"105":{"pageContent":"setUnstakeId\nuint\nOptional storage slot to store the unstaked LQTY\nsetEthGainId\nuint\nOptional storage slot to store any ETH gains\nsetLusdGainId\nuint\nOptional storage slot to store any LUSD gains\nClaimStakingGainsClaim ETH and LUSD gains from Stakingspells.add({  connector: \"LIQUITY-A\",  method: \"claimStakingGains\",  args: [setEthGainId, setLusdGainId]});Copy to clipboard\nParameter\nType\nDescription\nsetEthGainId\nuint\nOptional storage slot to store the claimed ETH\nsetLusdGainId\nuint\nOptional storage slot to store the claimed LUSD\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetLidoStETHMainnetLite-B","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/liquity"}},"106":{"pageContent":"WETH - MainnetWrap and Unwrap WETH.\nWETH-v1.0 connector on mainnet triggers methods like deposit, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositWrap ETH into WETHspells.add({  connector: \"WETH-A\",  method: \"deposit\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of ETH to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of ETH deposited.\nWithdrawUnwrap ETH from WETHspells.add({  connector: \"WETH-A\",  method: \"withdraw\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint\nThe amount of weth to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of ETH withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/weth"}},"107":{"pageContent":"Parameter\nType\nDescription\namt\nuint\nThe amount of weth to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of ETH withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetUNIVERSEMainnetWSTETH","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/weth"}},"108":{"pageContent":"UNIVERSE - MainnetMaximising uniswap v3 returns\nUniverseFinance-v1 connector on mainnet triggers methods like deposit, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit in Universe Vault by Adapterspells.add({  connector: \"UNIVERSE-A\",  method: \"deposit\",  args: [universeVault, amountA, amountB, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\nuniverseVault\naddress\nUniverse Official Vault Address\namountA\nuint256\nAmount of tokenA\namountB\nuint256\nAmount of tokenB\ngetIds\nuint256[]\nID to retrieve amountA and amountB\nsetIds\nuint256[]\nID to store amountA and amountB\nWithdrawWithdraw Token0 & Token1 From Universe Vaultspells.add({  connector: \"UNIVERSE-A\",  method: \"withdraw\",  args: [universeVault, share0, share1, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\nuniverseVault","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/universe-v1"}},"109":{"pageContent":"Parameter\nType\nDescription\nuniverseVault\naddress\nUniverse Official Vault Address\nshare0\nuint256\nAmount of uToken0.\nshare1\nuint256\nAmount of uToken1.\ngetIds\nuint256[]\nID to retrieve amount of output token\nsetIds\nuint256[]\nstores the amount of output tokens\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetUniswap V3MainnetWETH","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/universe-v1"}},"110":{"pageContent":"Aave V1 - MainnetLending & Borrowing.\nAaveV1-v1.1 connector on mainnet triggers methods like deposit, withdraw, borrow, payback, enableCollateral. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Aave v1 for lending / collaterization.spells.add({  connector: \"AAVE-V1-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v1spells.add({  connector: \"AAVE-V1-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v1"}},"111":{"pageContent":"ID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v1spells.add({  connector: \"AAVE-V1-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token using Aave v1spells.add({  connector: \"AAVE-V1-A\",  method: \"borrow\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v1"}},"112":{"pageContent":"amt\nuint256\nThe amount of the token to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackPayback debt owed.spells.add({  connector: \"AAVE-V1-A\",  method: \"payback\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nEnableCollateralEnable an array of tokens as collateralspells.add({  connector: \"AAVE-V1-A\",  method: \"enableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v1"}},"113":{"pageContent":"Parameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetAave RewardsMainnetAave V2","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v1"}},"114":{"pageContent":"DSA Spell - OptimismCast spells on DSA.\nDSA-Spell-v1.0 connector on optimism triggers methods like castOnDSA, castAny. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.CastOnDSAInteract with a target DSA by casting spells on it.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castOnDSA\",  args: [targetDSA, connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\ntargetDSA\naddress\ntarget DSA to cast spells on.\nconnectors\nstring[]\nArray of connector names (For example, [\"1INCH-A\", \"BASIC-A\"]).\ndatas\nbytes[]\nArray of connector calldatas (function selectors encoded with parameters).\nCastAnyCasts the first successful spell on the DSA.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castAny\",  args: [connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\nconnectors\nstring[]","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/dsa-spell"}},"115":{"pageContent":"CastAnyCasts the first successful spell on the DSA.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castAny\",  args: [connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\nconnectors\nstring[]\nArray of connector names, in preference order, if any (For example, [\"1INCH-A\", \"ZEROX-A\"]).\ndatas\nbytes[]\nArray of connector calldatas (function selectors encoded with parameters).\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismBasic A (ERC20)OptimismHOP-A","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/dsa-spell"}},"116":{"pageContent":"Assets Transfer Polygon Bridge - MainnetPolygon assets bridge.\nPolygon-Bridge-v1.1 connector on mainnet triggers methods like deposit. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit assets to the bridge.spells.add({  connector: \"POLYGON-BRIDGE-A\",  method: \"deposit\",  args: [targetDsa, token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntargetDsa\naddress\nThe address to receive the token on Polygon\ntoken\naddress\nThe address of the token to deposit. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposit.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/assets-polygon-bridge"}},"117":{"pageContent":"amt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposit.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetAave V3MainnetAuthority","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/assets-polygon-bridge"}},"118":{"pageContent":"SUSHISWAP - MainnetDecentralized Exchange.\nSushiswap-v1 connector on mainnet triggers methods like deposit, withdraw, buy, sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit Liquidity to a SushiSwap pool.spells.add({  connector: \"SUSHISWAP-A\",  method: \"deposit\",  args: [tokenA, tokenB, amtA, unitAmt, slippage, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namtA\nuint256\nThe amount of A tokens to deposit.\nunitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/sushiswap"}},"119":{"pageContent":"unitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.\nWithdrawWithdraw Liquidity from a SushiSwap pool.spells.add({  connector: \"SUSHISWAP-A\",  method: \"withdraw\",  args: [tokenA, tokenB, uniAmt, unitAmtA, unitAmtB, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nuniAmt\nuint256\nThe amount of pool tokens to withdraw.\nunitAmtA\nuint256\nThe unit amount of amtA/uniAmt with slippage.\nunitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/sushiswap"}},"120":{"pageContent":"unitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.\nBuyBuy a token using a SushiSwapspells.add({  connector: \"SUSHISWAP-A\",  method: \"buy\",  args: [buyAddr, sellAddr, buyAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nbuyAmt\nuint256\nThe amount of tokens to buy.\nunitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage.\ngetId\nuint256\nID to retrieve buyAmt.\nsetId\nuint256\nID to store the amount of tokens sold.\nSellSell a token using a SushiSwapspells.add({  connector: \"SUSHISWAP-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/sushiswap"}},"121":{"pageContent":"Parameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage.\ngetId\nuint256\nID to retrieve sellAmt.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetReflexerMainnetUBIQUITY","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/sushiswap"}},"122":{"pageContent":"INSTAPOOL-V4 - MainnetInbuilt Flash Loan in DSA\nInstapool-v4 connector on mainnet triggers methods like flashBorrowAndCast, flashPayback, flashMultiBorrowAndCast, flashMultiPayback. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.FlashBorrowAndCastBorrow Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashBorrowAndCast\",  args: [token, amt, route, data, extraData]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes\nFlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/instapool-v4"}},"123":{"pageContent":"FlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\ngetId\nuint\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint\nSet token amount at this ID in `InstaMemory` Contract.\nFlashMultiBorrowAndCastBorrow multi-tokens Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashMultiBorrowAndCast\",  args: [tokens_, amts_, route, data, extraData]});Copy to clipboard\nParameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/instapool-v4"}},"124":{"pageContent":"uint[]\nArray of Token Amounts.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes\nFlashMultiPaybackReturn multi-tokens to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashMultiPayback\",  args: [tokens_, amts_, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\ngetIds\nuint[]\nArray of getId token amounts.\nsetIds\nuint[]\nArray of setId token amounts.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetInstapool V2MainnetLidoStETH","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/instapool-v4"}},"125":{"pageContent":"Authority - MainnetManage Authorities to DSA.\nAuth-v1.1 connector on mainnet triggers methods like add, remove. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.AddAdd an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"add\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nRemoveRemove an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"remove\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/authority"}},"126":{"pageContent":"Parameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetAssets Transfer Polygon BridgeMainnetBasic B (ERC721)","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/authority"}},"127":{"pageContent":"INST Governance - MainnetGovernance.\nInstadapp-governance-bravo-v1 connector on mainnet triggers methods like delegate, voteCast, voteCastWithReason. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DelegateDelegating votes to delegatee.spells.add({  connector: \"INST-A\",  method: \"delegate\",  args: [delegatee]});Copy to clipboard\nParameter\nType\nDescription\ndelegatee\naddress\nThe address to delegate the votes.\nVoteCastCasting vote for a proposalspells.add({  connector: \"INST-A\",  method: \"voteCast\",  args: [proposalId, support]});Copy to clipboard\nParameter\nType\nDescription\nproposalId\nuint256\nThe id of the proposal to vote on\nsupport\nuint256\nThe support value for the vote. 0=against, 1=for, 2=abstain","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/inst"}},"128":{"pageContent":"Parameter\nType\nDescription\nproposalId\nuint256\nThe id of the proposal to vote on\nsupport\nuint256\nThe support value for the vote. 0=against, 1=for, 2=abstain\nVoteCastWithReasonCasting vote for a proposalspells.add({  connector: \"INST-A\",  method: \"voteCastWithReason\",  args: [proposalId, support, reason]});Copy to clipboard\nParameter\nType\nDescription\nproposalId\nuint256\nThe id of the proposal to vote on\nsupport\nuint256\nThe support value for the vote. 0=against, 1=for, 2=abstain\nreason\nstring\nThe reason given for the vote\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetHOP-MAINNET-AMainnetInstapool V2","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/inst"}},"129":{"pageContent":"WSTETH - MainnetWrap and Unwrap STETH.\nWSTETH-v1.0 connector on mainnet triggers methods like deposit, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositWrap STETH into WSTETHspells.add({  connector: \"WSTETH-A\",  method: \"deposit\",  args: [stethAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nstethAmt\nuint256\nThe amount of STETH to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve STETH amount.\nsetId\nuint256\nID stores the amount of WSTETH deposited.\nWithdrawUnwrap STETH from WSTETHspells.add({  connector: \"WSTETH-A\",  method: \"withdraw\",  args: [wstethAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nwstethAmt\nuint256\nThe amount of WSTETH to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve WSTETH amount.\nsetId\nuint256\nID stores the amount of STETH.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/wsteth"}},"130":{"pageContent":"Parameter\nType\nDescription\nwstethAmt\nuint256\nThe amount of WSTETH to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve WSTETH amount.\nsetId\nuint256\nID stores the amount of STETH.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetWETHMainnetYearn V2","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/wsteth"}},"131":{"pageContent":"B.Protocol Compound - MainnetLending & Borrowing.\nB.Compound-v1.0 connector on mainnet triggers methods like depositRaw, deposit, withdrawRaw, withdraw, borrowRaw, borrow, paybackRaw, payback, depositCTokenRaw, depositCToken, withdrawCTokenRaw, withdrawCToken. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositRawDeposit a token to Compound for lending / collaterization.spells.add({  connector: \"B-COMPOUND-A\",  method: \"depositRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-compound"}},"132":{"pageContent":"cToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositDeposit a token to Compound for lending / collaterization.spells.add({  connector: \"B-COMPOUND-A\",  method: \"deposit\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to deposit.(For eg: ETH-A)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawRawWithdraw deposited token from Compoundspells.add({  connector: \"B-COMPOUND-A\",  method: \"withdrawRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-compound"}},"133":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nWithdrawWithdraw deposited token from Compoundspells.add({  connector: \"B-COMPOUND-A\",  method: \"withdraw\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to withdraw.(For eg: ETH-A)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowRawBorrow a token using Compoundspells.add({  connector: \"B-COMPOUND-A\",  method: \"borrowRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-compound"}},"134":{"pageContent":"BorrowRawBorrow a token using Compoundspells.add({  connector: \"B-COMPOUND-A\",  method: \"borrowRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowBorrow a token using Compoundspells.add({  connector: \"B-COMPOUND-A\",  method: \"borrow\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to borrow.(For eg: DAI-A)\namt\nuint256\nThe amount of the token to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackRawPayback debt owed.spells.add({  connector: \"B-COMPOUND-A\",  method: \"paybackRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-compound"}},"135":{"pageContent":"PaybackRawPayback debt owed.spells.add({  connector: \"B-COMPOUND-A\",  method: \"paybackRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackPayback debt owed.spells.add({  connector: \"B-COMPOUND-A\",  method: \"payback\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to payback.(For eg: COMP-A)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-compound"}},"136":{"pageContent":"amt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nDepositCTokenRawSame as depositRaw. The only difference is this method stores cToken amount in set ID.spells.add({  connector: \"B-COMPOUND-A\",  method: \"depositCTokenRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of cTokens received.\nDepositCTokenSame as deposit. The only difference is this method stores cToken amount in set ID.spells.add({  connector: \"B-COMPOUND-A\",  method: \"depositCToken\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-compound"}},"137":{"pageContent":"Parameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to depositCToken.(For eg: DAI-A)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of cTokens received.\nWithdrawCTokenRawSame as withdrawRaw. The only difference is this method fetch cToken amount in get ID.spells.add({  connector: \"B-COMPOUND-A\",  method: \"withdrawCTokenRaw\",  args: [token, cToken, cTokenAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\ncTokenAmt\nuint\nThe amount of cTokens to withdraw\ngetId\nuint\nID to retrieve cTokenAmt\nsetId\nuint\nID stores the amount of tokens withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-compound"}},"138":{"pageContent":"cToken\naddress\nThe address of the corresponding cToken.\ncTokenAmt\nuint\nThe amount of cTokens to withdraw\ngetId\nuint\nID to retrieve cTokenAmt\nsetId\nuint\nID stores the amount of tokens withdrawn.\nWithdrawCTokenSame as withdraw. The only difference is this method fetch cToken amount in get ID.spells.add({  connector: \"B-COMPOUND-A\",  method: \"withdrawCToken\",  args: [tokenId, cTokenAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to withdraw CToken.(For eg: ETH-A)\ncTokenAmt\nuint\nThe amount of cTokens to withdraw\ngetId\nuint\nID to retrieve cTokenAmt\nsetId\nuint\nID stores the amount of tokens withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-compound"}},"139":{"pageContent":"string\nThe token id of the token to withdraw CToken.(For eg: ETH-A)\ncTokenAmt\nuint\nThe amount of cTokens to withdraw\ngetId\nuint\nID to retrieve cTokenAmt\nsetId\nuint\nID stores the amount of tokens withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetBasic A (ERC20)MainnetB.Protocol Liquity","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-compound"}},"140":{"pageContent":"Yearn V2 - MainnetVaults & yield.\nYearnV2-v1.0 connector on mainnet triggers methods like deposit, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositThis will deposit funds to a specific Yearn Vault.spells.add({  connector: \"YEARN-VAULT-A\",  method: \"deposit\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\naddress\nThe address of the vault to deposit funds into.\namt\nuint256\nThe amount of tokens to deposit.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of shares received.\nWithdrawThis will withdraw the share from a specific Yearn Vault.spells.add({  connector: \"YEARN-VAULT-A\",  method: \"withdraw\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\naddress\nThe address of the vault to withdraw shares from.\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/yearn-v2"}},"141":{"pageContent":"Parameter\nType\nDescription\nvault\naddress\nThe address of the vault to withdraw shares from.\namt\nuint256\nThe amount of shares to withdraw.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount want token redeemed.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetWSTETHConnectorsOptimism","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/yearn-v2"}},"142":{"pageContent":"PARASWAP-V5 - MainnetDEX Aggregator.\nParaswap-v5 connector on mainnet triggers methods like swap. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"PARASWAP-A\",  method: \"swap\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from paraswap API.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/paraswap"}},"143":{"pageContent":"sellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from paraswap API.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetNOTIONAL-V2-AMainnetPoolTogether","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/paraswap"}},"144":{"pageContent":"G-UNI Staking - MainnetStake G-UNI for earning rewards.\nStake-G-UNI-v1.1 connector on mainnet triggers methods like deposit, withdraw, claimReward. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit Tokens to staking pool.spells.add({  connector: \"INST-STAKING-B\",  method: \"deposit\",  args: [stakingPool, stakingToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nstakingPool\naddress\nstaking pool address.\nstakingToken\naddress\nstaking token address.\namt\nuint\nstaking token amount.\ngetId\nuint\nID to retrieve amount.\nsetId\nuint\nID stores the amount of staked tokens.\nWithdrawWithdraw Tokens from the staking pool.spells.add({  connector: \"INST-STAKING-B\",  method: \"withdraw\",  args: [stakingPool, stakingToken, amt, getId, setIdAmount, setIdReward]});Copy to clipboard\nParameter\nType\nDescription","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/guniswap_v3_erc20_staking"}},"145":{"pageContent":"Parameter\nType\nDescription\nstakingPool\naddress\nstaking pool address.\nstakingToken\naddress\nstaking token address.\namt\nuint\nstaking token amount.\ngetId\nuint\nID to retrieve amount.\nsetIdAmount\nuint\nID stores the amount of stake tokens withdrawn.\nsetIdReward\nuint\nID stores the amount of reward tokens claimed.\nClaimRewardClaim Pending Rewards of tokens staked.spells.add({  connector: \"INST-STAKING-B\",  method: \"claimReward\",  args: [stakingPool, setId]});Copy to clipboard\nParameter\nType\nDescription\nstakingPool\naddress\nstaking pool address.\nsetId\nuint\nID stores the amount of reward tokens claimed.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetGelato Aave ProtectionMainnetG-Uniswap V3 ERC20","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/guniswap_v3_erc20_staking"}},"146":{"pageContent":"Aave V3 - OptimismLending & Borrowing.\nAaveV3-v1.2 connector on optimism triggers methods like deposit, depositWithoutCollateral, withdraw, borrow, borrowOnBehalfOf, payback, paybackWithATokens, paybackOnBehalfOf, enableCollateral, disableCollateral, swapBorrowRateMode, setUserEMode, delegateBorrow. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Aave v3 for lending / collaterization.spells.add({  connector: \"AAVE-V3-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3"}},"147":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositWithoutCollateralDeposit a token to Aave v3 without enabling it as collateral.spells.add({  connector: \"AAVE-V3-A\",  method: \"depositWithoutCollateral\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v3spells.add({  connector: \"AAVE-V3-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3"}},"148":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token using Aave v3spells.add({  connector: \"AAVE-V3-A\",  method: \"borrow\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of debt. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowOnBehalfOfBorrow a token using Aave v3 on behalf of a userspells.add({  connector: \"AAVE-V3-A\",  method: \"borrowOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3"}},"149":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of debt. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nThe user who will incur the debt\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackPayback debt owed.spells.add({  connector: \"AAVE-V3-A\",  method: \"payback\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3"}},"150":{"pageContent":"rateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackWithATokensRepays a borrowed amount on a specific reserve using the reserve aTokens, burning the equivalent debt tokens.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackWithATokens\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfOfPayback debt owed on behalf os a user.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3"}},"151":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nAddress of user who's debt to repay.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nEnableCollateralEnable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"enableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral\nDisableCollateralDisable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"disableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to disable as collateral","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3"}},"152":{"pageContent":"Parameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to disable as collateral\nSwapBorrowRateModeSwaps user borrow rate mode between variable and stablespells.add({  connector: \"AAVE-V3-A\",  method: \"swapBorrowRateMode\",  args: [token, rateMode]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256\nCurrent borrow rate (Stable = 1, Variable = 2)\nSetUserEModeUpdates the user's e-mode categoryspells.add({  connector: \"AAVE-V3-A\",  method: \"setUserEMode\",  args: [categoryId]});Copy to clipboard\nParameter\nType\nDescription\ncategoryId\nuint8\nThe category Id of the e-mode user want to set\nDelegateBorrowGives approval to delegate debt tokensspells.add({  connector: \"AAVE-V3-A\",  method: \"delegateBorrow\",  args: [token, amount, rateMode, delegateTo, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256\nThe type of debt","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3"}},"153":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256\nThe type of debt\ndelegateTo\naddress\nThe address to whom the user is delegating\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens delegated.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismAave V3 RewardsOptimismAuthority","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3"}},"154":{"pageContent":"0x - AvalancheOn-chain DEX Aggregator.\n0x-V4 connector on avalanche triggers methods like . You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ConnectorsAvalancheAvalanche1INCH-V4","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/0x"}},"155":{"pageContent":"Basic C (ERC1155) - AvalancheDeposit & Withdraw from ERC1155 DSA.\nBASIC-ERC1155-v1.0 connector on avalanche triggers methods like depositERC1155, withdrawERC1155. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC1155Deposit a ERC1155 token to DSAspells.add({  connector: \"BASIC-C\",  method: \"depositERC1155\",  args: [token, tokenId, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\namount\nuint256\nAmount to deposit.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nWithdrawERC1155Withdraw a ERC1155 token from DSAspells.add({  connector: \"BASIC-C\",  method: \"withdrawERC1155\",  args: [token, tokenId, to, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/basic-c"}},"156":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\namount\nuint256\nAmount to withdraw.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheBasic B (ERC721)AvalancheBasic A (ERC20)","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/basic-c"}},"157":{"pageContent":"Basic B (ERC721) - AvalancheDeposit & Withdraw ERC721 from DSA.\nBASIC-ERC721-v1.0 connector on avalanche triggers methods like depositERC721, withdrawERC721. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC721Deposit a ERC721 token to DSAspells.add({  connector: \"BASIC-B\",  method: \"depositERC721\",  args: [token, tokenId, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nWithdrawERC721Withdraw a ERC721 token from DSAspells.add({  connector: \"BASIC-B\",  method: \"withdrawERC721\",  args: [token, tokenId, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/basic-b"}},"158":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheAuthorityAvalancheBasic C (ERC1155)","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/basic-b"}},"159":{"pageContent":"SWAP-AGGREGATOR-A - AvalancheSwap integration for DEX Aggregators.\nSwap-Aggregator-v1 connector on avalanche triggers methods like swap. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens from exchanges like 1INCH, 0x etc, with calculation done off-chain.spells.add({  connector: \"SWAP-AGGREGATOR-A\",  method: \"swap\",  args: [_connectors, _datas]});Copy to clipboard\nParameter\nType\nDescription\n_connectors\nstring[]\nThe name of the connectors like 1INCH-A, 0x etc, in order of their priority.\n_datas\nbytes[]\nEncoded function call data including function selector encoded with parameters.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/swap-aggregator"}},"160":{"pageContent":"Description\n_connectors\nstring[]\nThe name of the connectors like 1INCH-A, 0x etc, in order of their priority.\n_datas\nbytes[]\nEncoded function call data including function selector encoded with parameters.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheSUSHISWAPAvalancheWAVAX","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/swap-aggregator"}},"161":{"pageContent":"Aave V3 Import - AvalancheImport EOA's aave V3 position to DSA's aave v3 position\nAave-v3-import-v1.1 connector on avalanche triggers methods like importAave, importAaveWithCollateral. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportAaveImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-A\",  method: \"importAave\",  args: [userAccount, inputData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3-import"}},"162":{"pageContent":"Parameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nImportAaveWithCollateralImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-A\",  method: \"importAaveWithCollateral\",  args: [userAccount, inputData, enableCollateral]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3-import"}},"163":{"pageContent":"inputData\nImportInputData\nThe struct containing all the neccessary input data\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheAave V3 Import (permit)AvalancheAave V3","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3-import"}},"164":{"pageContent":"QI - AvalancheClaim Reward.\nBenqi-Incentives-v1 connector on avalanche triggers methods like ClaimQiReward, ClaimQiRewardTwo, ClaimQiRewardThree, ClaimAvaxReward, ClaimAvaxRewardTwo, ClaimAvaxRewardThree, delegate. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ClaimQiRewardClaim Accrued Qi Token.spells.add({  connector: \"QI-A\",  method: \"ClaimQiReward\",  args: [setId]});Copy to clipboard\nParameter\nType\nDescription\nsetId\nuint256\nID stores the amount of Reward claimed.\nClaimQiRewardTwoClaim Accrued Qi Token.spells.add({  connector: \"QI-A\",  method: \"ClaimQiRewardTwo\",  args: [tokenIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenIds\nstring[]\nArray of supplied and borrowed token IDs.\nsetId\nuint256\nID stores the amount of Reward claimed.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/qi-v1"}},"165":{"pageContent":"Parameter\nType\nDescription\ntokenIds\nstring[]\nArray of supplied and borrowed token IDs.\nsetId\nuint256\nID stores the amount of Reward claimed.\nClaimQiRewardThreeClaim Accrued Qi Token.spells.add({  connector: \"QI-A\",  method: \"ClaimQiRewardThree\",  args: [supplyTokenIds, borrowTokenIds, setId]});Copy to clipboard\nParameter\nType\nDescription\nsupplyTokenIds\nstring[]\nArray of supplied tokenIds.\nborrowTokenIds\nstring[]\nArray of borrowed tokenIds.\nsetId\nuint256\nID stores the amount of Reward claimed.\nClaimAvaxRewardClaim Accrued Avax Token.spells.add({  connector: \"QI-A\",  method: \"ClaimAvaxReward\",  args: [setId]});Copy to clipboard\nParameter\nType\nDescription\nsetId\nuint256\nID stores the amount of Reward claimed.\nClaimAvaxRewardTwoClaim Accrued Avax Token.spells.add({  connector: \"QI-A\",  method: \"ClaimAvaxRewardTwo\",  args: [tokenIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenIds\nstring[]\nArray of supplied and borrowed token IDs.\nsetId\nuint256\nID stores the amount of Reward claimed.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/qi-v1"}},"166":{"pageContent":"Parameter\nType\nDescription\ntokenIds\nstring[]\nArray of supplied and borrowed token IDs.\nsetId\nuint256\nID stores the amount of Reward claimed.\nClaimAvaxRewardThreeClaim Accrued Avax Token.spells.add({  connector: \"QI-A\",  method: \"ClaimAvaxRewardThree\",  args: [supplyTokenIds, borrowTokenIds, setId]});Copy to clipboard\nParameter\nType\nDescription\nsupplyTokenIds\nstring[]\nArray of supplied tokenIds.\nborrowTokenIds\nstring[]\nArray of borrowed tokenIds.\nsetId\nuint256\nID stores the amount of Reward claimed.\nDelegateDelegate votes.spells.add({  connector: \"QI-A\",  method: \"delegate\",  args: [delegatee]});Copy to clipboard\nParameter\nType\nDescription\ndelegatee\naddress\nThe address to delegate the votes to.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/qi-v1"}},"167":{"pageContent":"DelegateDelegate votes.spells.add({  connector: \"QI-A\",  method: \"delegate\",  args: [delegatee]});Copy to clipboard\nParameter\nType\nDescription\ndelegatee\naddress\nThe address to delegate the votes to.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalanchePARASWAP-V5AvalancheSUSHISWAP","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/qi-v1"}},"168":{"pageContent":"1INCH-V4 - AvalancheOn-chain DEX Aggregator.\n1Inch-v4 connector on avalanche triggers methods like sell. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SellSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"1INCH-V4-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For Avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For Avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/1inch-v4"}},"169":{"pageContent":"sellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Avalanche0xAvalancheAave V2 to V3 import","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/1inch-v4"}},"170":{"pageContent":"WAVAX - AvalancheWrap and Unwrap WAVAX.\nWAVAX-v1.0 connector on avalanche triggers methods like deposit, withdraw. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositWrap AVAX into WAVAXspells.add({  connector: \"WAVAX-A\",  method: \"deposit\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of AVAX to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of AVAX deposited.\nWithdrawUnwrap AVAX from WAVAXspells.add({  connector: \"WAVAX-A\",  method: \"withdraw\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint\nThe amount of wavax to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of AVAX withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/wavax"}},"171":{"pageContent":"Parameter\nType\nDescription\namt\nuint\nThe amount of wavax to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of AVAX withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheSWAP-AGGREGATOR-AConnectorsFantom","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/wavax"}},"172":{"pageContent":"DSA Spell - AvalancheCast spells on DSA.\nDSA-Spell-v1.0 connector on avalanche triggers methods like castOnDSA, castAny. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.CastOnDSAInteract with a target DSA by casting spells on it.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castOnDSA\",  args: [targetDSA, connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\ntargetDSA\naddress\ntarget DSA to cast spells on.\nconnectors\nstring[]\nArray of connector names (For example, [\"1INCH-A\", \"BASIC-A\"]).\ndatas\nbytes[]\nArray of connector calldatas (function selectors encoded with parameters).\nCastAnyCasts the first successful spell on the DSA.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castAny\",  args: [connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\nconnectors\nstring[]","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/dsa-spell"}},"173":{"pageContent":"CastAnyCasts the first successful spell on the DSA.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castAny\",  args: [connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\nconnectors\nstring[]\nArray of connector names, in preference order, if any (For example, [\"1INCH-A\", \"ZEROX-A\"]).\ndatas\nbytes[]\nArray of connector calldatas (function selectors encoded with parameters).\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheBenqiAvalancheINSTAPOOL-V4","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/dsa-spell"}},"174":{"pageContent":"Aave V2 - AvalancheLending & Borrowing.\nAaveV2-v1.1 connector on avalanche triggers methods like deposit, withdraw, borrow, payback, paybackOnBehalfOf, enableCollateral, swapBorrowRateMode. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Aave v2 for lending / collaterization.spells.add({  connector: \"AAVE-V2-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v2"}},"175":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v2spells.add({  connector: \"AAVE-V2-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token using Aave v2spells.add({  connector: \"AAVE-V2-A\",  method: \"borrow\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of borrow debt. (For Stable: 1, Variable: 2)\ngetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v2"}},"176":{"pageContent":"amt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of borrow debt. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackPayback debt owed.spells.add({  connector: \"AAVE-V2-A\",  method: \"payback\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfOfPayback debt owed on behalf os a user.spells.add({  connector: \"AAVE-V2-A\",  method: \"paybackOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v2"}},"177":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nAddress of user who's debt to repay.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nEnableCollateralEnable an array of tokens as collateralspells.add({  connector: \"AAVE-V2-A\",  method: \"enableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral\nSwapBorrowRateModeSwaps user borrow rate mode between variable and stablespells.add({  connector: \"AAVE-V2-A\",  method: \"swapBorrowRateMode\",  args: [token, rateMode]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v2"}},"178":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256\nCurrent Rate mode. (Stable = 1, Variable = 2)\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheAave V2 to V3 importAvalancheAave V3 Import (permit)","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v2"}},"179":{"pageContent":"Basic A (ERC20) - OptimismDeposit & Withdraw from DSA.\nBasic-v1.1 connector on optimism triggers methods like deposit, depositFrom, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to DSA.spells.add({  connector: \"BASIC-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE and need to pass `value` parameter equal to `amt` in cast function ```dsa.cast({..., value: amt})```.For ERC20: Need to give allowance prior casting spells.)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)` (Not valid for ETH))\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/basic"}},"180":{"pageContent":"amt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)` (Not valid for ETH))\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositFromDeposit a token to DSA from any user.spells.add({  connector: \"BASIC-A\",  method: \"depositFrom\",  args: [token, amt, from, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (Note: ETH is not supported. Use `deposit()`)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\nfrom\naddress\nThe address depositing the token.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw a token from DSAspells.add({  connector: \"BASIC-A\",  method: \"withdraw\",  args: [token, amt, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\nto","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/basic"}},"181":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismBasic C (ERC1155)OptimismDSA Spell","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/basic"}},"182":{"pageContent":"Aave V3 - AvalancheLending & Borrowing.\nAaveV3-v1.2 connector on avalanche triggers methods like deposit, depositWithoutCollateral, withdraw, borrow, borrowOnBehalfOf, payback, paybackWithATokens, paybackOnBehalfOf, enableCollateral, disableCollateral, swapBorrowRateMode, setUserEMode, approveDelegation. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Aave v3 for lending / collaterization.spells.add({  connector: \"AAVE-V3-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3"}},"183":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositWithoutCollateralDeposit a token to Aave v3 without enabling it as collateral.spells.add({  connector: \"AAVE-V3-A\",  method: \"depositWithoutCollateral\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v3spells.add({  connector: \"AAVE-V3-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3"}},"184":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token using Aave v3spells.add({  connector: \"AAVE-V3-A\",  method: \"borrow\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of debt. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowOnBehalfOfBorrow a token using Aave v3 on behalf of a userspells.add({  connector: \"AAVE-V3-A\",  method: \"borrowOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3"}},"185":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of debt. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nThe user who will incur the debt\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackPayback debt owed.spells.add({  connector: \"AAVE-V3-A\",  method: \"payback\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3"}},"186":{"pageContent":"rateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackWithATokensRepays a borrowed amount on a specific reserve using the reserve aTokens, burning the equivalent debt tokens.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackWithATokens\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfOfPayback debt owed on behalf os a user.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3"}},"187":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nAddress of user who's debt to repay.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nEnableCollateralEnable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"enableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral\nDisableCollateralDisable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"disableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to disable as collateral","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3"}},"188":{"pageContent":"Parameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to disable as collateral\nSwapBorrowRateModeSwaps user borrow rate mode between variable and stablespells.add({  connector: \"AAVE-V3-A\",  method: \"swapBorrowRateMode\",  args: [token, rateMode]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256\nCurrent rate mode (Stable = 1, Variable = 2)\nSetUserEModeUpdates the user's e-mode categoryspells.add({  connector: \"AAVE-V3-A\",  method: \"setUserEMode\",  args: [categoryId]});Copy to clipboard\nParameter\nType\nDescription\ncategoryId\nuint8\nThe category Id of the e-mode user want to set\nApproveDelegationGives approval to delegate debt tokensspells.add({  connector: \"AAVE-V3-A\",  method: \"approveDelegation\",  args: [token, amount, rateMode, delegateTo, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3"}},"189":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256\nThe type of debt\ndelegateTo\naddress\nThe address to whom the user is delegating\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens delegated.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheAave V3 ImportAvalancheAuthority","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3"}},"190":{"pageContent":"PANGOLIN - AvalancheDecentralized Exchange.\nPangolin-v1 connector on avalanche triggers methods like deposit, withdraw, buy, sell. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit Liquidity to a Pangolin pool.spells.add({  connector: \"PANGOLIN-A\",  method: \"deposit\",  args: [tokenA, tokenB, amtA, unitAmt, slippage, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namtA\nuint256\nThe amount of A tokens to deposit.\nunitAmt\nuint256\nThe unit amount of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/pangolin"}},"191":{"pageContent":"unitAmt\nuint256\nThe unit amount of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.\nWithdrawWithdraw Liquidity from a Pangolin pool.spells.add({  connector: \"PANGOLIN-A\",  method: \"withdraw\",  args: [tokenA, tokenB, uniAmt, unitAmtA, unitAmtB, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nuniAmt\nuint256\nThe amount of pool tokens to withdraw.\nunitAmtA\nuint256\nThe unit amount of amtA/uniAmt with slippage.\nunitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/pangolin"}},"192":{"pageContent":"unitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.\nBuyBuy a token using a Pangolinspells.add({  connector: \"PANGOLIN-A\",  method: \"buy\",  args: [buyAddr, sellAddr, buyAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nbuyAmt\nuint256\nThe amount of tokens to buy.\nunitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage.\ngetId\nuint256\nID to retrieve buyAmt.\nsetId\nuint256\nID to store the amount of tokens sold.\nSellSell a token using a Pangolinspells.add({  connector: \"PANGOLIN-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/pangolin"}},"193":{"pageContent":"Parameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage.\ngetId\nuint256\nID to retrieve sellAmt.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheINSTAPOOL-V4AvalanchePARASWAP-V5","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/pangolin"}},"194":{"pageContent":"Basic A (ERC20) - AvalancheDeposit & Withdraw from DSA.\nBasic-v1.1 connector on avalanche triggers methods like deposit, depositFrom, withdraw. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to DSAspells.add({  connector: \"BASIC-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)` (Not valid for AVAX))\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositFromDeposit a token to DSA from any user.spells.add({  connector: \"BASIC-A\",  method: \"depositFrom\",  args: [token, amt, from, getId, setId]});Copy to clipboard\nParameter\nType","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/basic"}},"195":{"pageContent":"DepositFromDeposit a token to DSA from any user.spells.add({  connector: \"BASIC-A\",  method: \"depositFrom\",  args: [token, amt, from, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (Note: AVAX is not supported. Use `deposit()`)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\nfrom\naddress\nThe address depositing the token.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw a token from DSAspells.add({  connector: \"BASIC-A\",  method: \"withdraw\",  args: [token, amt, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/basic"}},"196":{"pageContent":"The amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheBasic C (ERC1155)AvalancheBenqi","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/basic"}},"197":{"pageContent":"Aave V3 Import (permit) - AvalancheImport EOA's aave V3 position to DSA's aave v3 position\nAave-v3-import-permit-v1.1 connector on avalanche triggers methods like importAave, importAaveWithCollateral. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportAaveImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-PERMIT-A\",  method: \"importAave\",  args: [userAccount, inputData, permitData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3-import-with-permit"}},"198":{"pageContent":"inputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nImportAaveWithCollateralImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-PERMIT-A\",  method: \"importAaveWithCollateral\",  args: [userAccount, inputData, permitData, enableCollateral]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3-import-with-permit"}},"199":{"pageContent":"permitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheAave V2AvalancheAave V3 Import","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v3-import-with-permit"}},"200":{"pageContent":"Aave V2 to V3 import - Avalanchemigrate aave V2 position to aave v3 position\nAave-Import-v2-to-v3 connector on avalanche triggers methods like importAaveV2ToV3, migrateAaveV2ToV3. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportAaveV2ToV3Import EOA's aave V2 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-IMPORT-V2-V3-A\",  method: \"importAaveV2ToV3\",  args: [userAccount, inputData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nMigrateAaveV2ToV3Migrate DSA's aave V2 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-IMPORT-V2-V3-A\",  method: \"migrateAaveV2ToV3\",  args: [inputData]});Copy to clipboard\nParameter\nType","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v2-to-v3-import"}},"201":{"pageContent":"Parameter\nType\nDescription\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Avalanche1INCH-V4AvalancheAave V2","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/aave-v2-to-v3-import"}},"202":{"pageContent":"SUSHISWAP - AvalancheDecentralized Exchange.\nSushiswap-v1 connector on avalanche triggers methods like deposit, withdraw, buy, sell. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit Liquidity to a SushiSwap pool.spells.add({  connector: \"SUSHISWAP-A\",  method: \"deposit\",  args: [tokenA, tokenB, amtA, unitAmt, slippage, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For Avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For Avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namtA\nuint256\nThe amount of A tokens to deposit.\nunitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/sushiswap"}},"203":{"pageContent":"unitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.\nWithdrawWithdraw Liquidity from a SushiSwap pool.spells.add({  connector: \"SUSHISWAP-A\",  method: \"withdraw\",  args: [tokenA, tokenB, uniAmt, unitAmtA, unitAmtB, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For Avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For Avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nuniAmt\nuint256\nThe amount of pool tokens to withdraw.\nunitAmtA\nuint256\nThe unit amount of amtA/uniAmt with slippage.\nunitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/sushiswap"}},"204":{"pageContent":"unitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.\nBuyBuy a token using a SushiSwapspells.add({  connector: \"SUSHISWAP-A\",  method: \"buy\",  args: [buyAddr, sellAddr, buyAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For Avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For Avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nbuyAmt\nuint256\nThe amount of tokens to buy.\nunitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage.\ngetId\nuint256\nID to retrieve buyAmt.\nsetId\nuint256\nID to store the amount of tokens sold.\nSellSell a token using a SushiSwapspells.add({  connector: \"SUSHISWAP-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/sushiswap"}},"205":{"pageContent":"Parameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For Avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For Avax: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage.\ngetId\nuint256\nID to retrieve sellAmt.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheQIAvalancheSWAP-AGGREGATOR-A","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/sushiswap"}},"206":{"pageContent":"INSTAPOOL-V4 - AvalancheInbuilt Flash Loan in DSA\nInstapool-v4 connector on avalanche triggers methods like flashBorrowAndCast, flashPayback, flashMultiBorrowAndCast, flashMultiPayback. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.FlashBorrowAndCastBorrow Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashBorrowAndCast\",  args: [token, amt, route, data, extraData]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/instapool-v4"}},"207":{"pageContent":"amt\nuint\nToken Amount.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes\nFlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\ngetId\nuint\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint\nSet token amount at this ID in `InstaMemory` Contract.\nFlashMultiBorrowAndCastBorrow multi-tokens Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashMultiBorrowAndCast\",  args: [tokens_, amts_, route, data, extraData]});Copy to clipboard\nParameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/instapool-v4"}},"208":{"pageContent":"Parameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes\nFlashMultiPaybackReturn multi-tokens to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashMultiPayback\",  args: [tokens_, amts_, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\ngetIds\nuint[]\nArray of getId token amounts.\nsetIds\nuint[]\nArray of setId token amounts.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/instapool-v4"}},"209":{"pageContent":"Parameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\ngetIds\nuint[]\nArray of getId token amounts.\nsetIds\nuint[]\nArray of setId token amounts.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheDSA SpellAvalanchePANGOLIN","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/instapool-v4"}},"210":{"pageContent":"Benqi - AvalancheLending & Borrowing.\nBenqi-v1 connector on avalanche triggers methods like depositRaw, deposit, withdrawRaw, withdraw, borrowRaw, borrow, paybackRaw, payback, depositQiTokenRaw, depositQiToken, withdrawQiTokenRaw, withdrawQiToken, liquidateRaw, liquidate. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositRawDeposit a token to Benqi for lending / collaterization.spells.add({  connector: \"BENQI-A\",  method: \"depositRaw\",  args: [token, qiToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nqiToken\naddress\nThe address of the corresponding qiToken.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/benqi-v1"}},"211":{"pageContent":"qiToken\naddress\nThe address of the corresponding qiToken.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositDeposit a token to Benqi for lending / collaterization.spells.add({  connector: \"BENQI-A\",  method: \"deposit\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to deposit.(For eg: AVAX-A)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawRawWithdraw deposited token from Benqispells.add({  connector: \"BENQI-A\",  method: \"withdrawRaw\",  args: [token, qiToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nqiToken\naddress\nThe address of the corresponding qiToken.\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/benqi-v1"}},"212":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nqiToken\naddress\nThe address of the corresponding qiToken.\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nWithdrawWithdraw deposited token from Benqispells.add({  connector: \"BENQI-A\",  method: \"withdraw\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to withdraw.(For eg: AVAX-A)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowRawBorrow a token using Benqispells.add({  connector: \"BENQI-A\",  method: \"borrowRaw\",  args: [token, qiToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/benqi-v1"}},"213":{"pageContent":"BorrowRawBorrow a token using Benqispells.add({  connector: \"BENQI-A\",  method: \"borrowRaw\",  args: [token, qiToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow. (For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nqiToken\naddress\nThe address of the corresponding qiToken.\namt\nuint256\nThe amount of the token to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowBorrow a token using Benqispells.add({  connector: \"BENQI-A\",  method: \"borrow\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to borrow.(For eg: DAI-A)\namt\nuint256\nThe amount of the token to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackRawPayback debt owed.spells.add({  connector: \"BENQI-A\",  method: \"paybackRaw\",  args: [token, qiToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/benqi-v1"}},"214":{"pageContent":"PaybackRawPayback debt owed.spells.add({  connector: \"BENQI-A\",  method: \"paybackRaw\",  args: [token, qiToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback. (For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nqiToken\naddress\nThe address of the corresponding qiToken.\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackPayback debt owed.spells.add({  connector: \"BENQI-A\",  method: \"payback\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to payback.(For eg: BENQI-A)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/benqi-v1"}},"215":{"pageContent":"amt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nDepositQiTokenRawSame as depositRaw. The only difference is this method stores qiToken amount in set ID.spells.add({  connector: \"BENQI-A\",  method: \"depositQiTokenRaw\",  args: [token, qiToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nqiToken\naddress\nThe address of the corresponding qiToken.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of qiTokens received.\nDepositQiTokenSame as deposit. The only difference is this method stores qiToken amount in set ID.spells.add({  connector: \"BENQI-A\",  method: \"depositQiToken\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/benqi-v1"}},"216":{"pageContent":"Parameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to depositQiToken.(For eg: DAI-A)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of qiTokens received.\nWithdrawQiTokenRawSame as withdrawRaw. The only difference is this method fetch qiToken amount in get ID.spells.add({  connector: \"BENQI-A\",  method: \"withdrawQiTokenRaw\",  args: [token, qiToken, qiTokenAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nqiToken\naddress\nThe address of the corresponding qiToken.\nqiTokenAmt\nuint\nThe amount of qiTokens to withdraw\ngetId\nuint\nID to retrieve qiTokenAmt\nsetId\nuint\nID stores the amount of tokens withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/benqi-v1"}},"217":{"pageContent":"qiToken\naddress\nThe address of the corresponding qiToken.\nqiTokenAmt\nuint\nThe amount of qiTokens to withdraw\ngetId\nuint\nID to retrieve qiTokenAmt\nsetId\nuint\nID stores the amount of tokens withdrawn.\nWithdrawQiTokenSame as withdraw. The only difference is this method fetch qiToken amount in get ID.spells.add({  connector: \"BENQI-A\",  method: \"withdrawQiToken\",  args: [tokenId, qiTokenAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to withdraw QiToken.(For eg: AVAX-A)\nqiTokenAmt\nuint\nThe amount of qiTokens to withdraw\ngetId\nuint\nID to retrieve qiTokenAmt\nsetId\nuint\nID stores the amount of tokens withdrawn.\nLiquidateRawLiquidate a position.spells.add({  connector: \"BENQI-A\",  method: \"liquidateRaw\",  args: [borrower, tokenToPay, qiTokenPay, tokenInReturn, qiTokenColl, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nborrower\naddress\nBorrower's Address.\ntokenToPay\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/benqi-v1"}},"218":{"pageContent":"Parameter\nType\nDescription\nborrower\naddress\nBorrower's Address.\ntokenToPay\naddress\nThe address of the token to pay for liquidation.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nqiTokenPay\naddress\nCorresponding qiToken address.\ntokenInReturn\naddress\nThe address of the token to return for liquidation.\nqiTokenColl\naddress\nCorresponding qiToken address.\namt\nuint256\nThe token amount to pay for liquidation.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of paid for liquidation.\nLiquidateLiquidate a position using the mapping.spells.add({  connector: \"BENQI-A\",  method: \"liquidate\",  args: [borrower, tokenIdToPay, tokenIdInReturn, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nborrower\naddress\nBorrower's Address.\ntokenIdToPay\nstring\ntoken id of the token to pay for liquidation.(For eg: AVAX-A)\ntokenIdInReturn\nstring\ntoken id of the token to return for liquidation.(For eg: USDC-A)\namt\nuint256\ntoken amount to pay for liquidation.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/benqi-v1"}},"219":{"pageContent":"tokenIdInReturn\nstring\ntoken id of the token to return for liquidation.(For eg: USDC-A)\namt\nuint256\ntoken amount to pay for liquidation.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of paid for liquidation.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheBasic A (ERC20)AvalancheDSA Spell","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/benqi-v1"}},"220":{"pageContent":"Authority - AvalancheManage Authorities to DSA.\nAuth-v1 connector on avalanche triggers methods like add, remove. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.AddAdd an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"add\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nRemoveRemove an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"remove\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/authority"}},"221":{"pageContent":"Parameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheAave V3AvalancheBasic B (ERC721)","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/authority"}},"222":{"pageContent":"PARASWAP-V5 - AvalancheDEX Aggregator.\nParaswap-v5 connector on avalanche triggers methods like swap. You can view details like source code, ABIs on Snowtrace.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate AVAX.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"PARASWAP-A\",  method: \"swap\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from paraswap API.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/paraswap"}},"223":{"pageContent":"sellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from paraswap API.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalanchePANGOLINAvalancheQI","metadata":{"source":"https://docs.instadapp.io/connectors/avalanche/paraswap"}},"224":{"pageContent":"Aave V3 Import (permit) - OptimismImport EOA's aave V3 position to DSA's aave v3 position\nAave-v3-import-permit-v1 connector on optimism triggers methods like importAave, importAaveWithCollateral. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportAaveImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-PERMIT-A\",  method: \"importAave\",  args: [userAccount, inputData, permitData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3-import-with-permit"}},"225":{"pageContent":"inputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nImportAaveWithCollateralImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-PERMIT-A\",  method: \"importAaveWithCollateral\",  args: [userAccount, inputData, permitData, enableCollateral]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3-import-with-permit"}},"226":{"pageContent":"permitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Optimism1INCH-V4OptimismAave V3 Import","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3-import-with-permit"}},"227":{"pageContent":"What's the use of getId and setId?setId and getId will help you share data/value from one spell to another. You can get a value from a specific Id that had been stored before.Example where getId and setId can be usedLet's say I want to sell USDC to buy ETH on 1Inch and then deposit bought ETH into Compound.So I sell USDC on 1Inch, and I store the bought ETH amount at setId (let's say it's 482 as setId for now) on sell() function of 1inch.Then I will use 482 as getId on compound deposit() function and deposit the bought ETH in Compound. In deposit function, I don't need to mention the amount specifically to deposit. It will get the deposit amount from getId that is passed.Code Snippet:spells.add({  connector: \"1INCH-A\",  method: \"sell\",  args: [eth_address, usdc_address, sellAmount, unitAmt, 0, \"482\"] // setting bought ETH amount at id 482});spells.add({  connector: \"COMPOUND-A\",  method: \"deposit\",  args: [\"ETH-A\", 0, \"482\", 0] // getting deposit amount from id 482});Copy to clipboardNote:For getId, if the id is 0 then it won't get the stored amount but it will use the amount that's passed in the function.For setId, if the id is 0 then it won't stored amount.If you still can't find","metadata":{"source":"https://docs.instadapp.io/faq/connectors/getid-and-setid"}},"228":{"pageContent":"amount from id 482});Copy to clipboardNote:For getId, if the id is 0 then it won't get the stored amount but it will use the amount that's passed in the function.For setId, if the id is 0 then it won't stored amount.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ConnectorsHow to get calldata and unit for uniswap v3 swap connector?FaqDsa-connect","metadata":{"source":"https://docs.instadapp.io/faq/connectors/getid-and-setid"}},"229":{"pageContent":"How to calculate UnitAmt?function caculateUnitAmt(buyAmount, sellAmount, buyDecimal, sellDecimal, maxSlippage) {  let unitAmt = new BigNumber(buyAmount)    .dividedBy(10 ** buyDecimal)    .dividedBy(new BigNumber(sellAmount).dividedBy(10 ** sellDecimal))  unitAmt = unitAmt.multipliedBy((100 - maxSlippage) / 100)  unitAmt = unitAmt.multipliedBy(1e18).toFixed(0)  return unitAmt}Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ConnectorsHow to take and payback flashloan on polygon chain?ConnectorsHow to get calldata and unit for uniswap v3 swap connector?","metadata":{"source":"https://docs.instadapp.io/faq/connectors/calculate-unitamt"}},"230":{"pageContent":"How to take and payback flashloan on polygon chain?const token = \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\" // wmatic token address on polygon const amount = web3.utils.toWei('100', 'ether') const amountWithFee = web3.utils.toWei('100.09', 'ether') let spells = new dsa.Spell()spells.add({      connector: 'INSTAPOOL-C',      method: 'flashPayback',      args: [token, amountWithFee, 0, 0],})const cd = dsa.instapool_v2.encodeFlashCastData(spells);let flashloanWrappedSpells = new dsa.Spell();console.log(cd)flashloanWrappedSpells.add({      connector: 'INSTAPOOL-C',      method: 'flashBorrowAndCast',      args: [ token , amount, 1, cd, \"0x\"],})console.log(dsa.instance)console.log(dsa.encodeSpells(flashloanWrappedSpells))// keep adding spells across DeFi protocols to execute.console.log(\"Transaction hash:\",            await dsa.cast({spells:flashloanWrappedSpells})            .catch(err => {console.log(err)})           )Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp","metadata":{"source":"https://docs.instadapp.io/faq/connectors/borrow-and-payback-flashloan"}},"231":{"pageContent":"clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FaqConnectorsConnectorsHow to calculate UnitAmt?","metadata":{"source":"https://docs.instadapp.io/faq/connectors/borrow-and-payback-flashloan"}},"232":{"pageContent":"How to get calldata and unit for uniswap v3 swap connector?const network = \"polygon\"const url = `https://api.instadapp.io/defi/${network}/uniswap/v3/swap/router`;const params = {    buyToken:<\"buy-token\">,    sellToken: <\"sell-token\">,    sellAmount: <\"amount\">,    dsaAddress: USER_ADDRESS}const response = await axios.get(url, {    params: params});const calldata = response.data.calldata;const unitAmt = response.data.unitAmt;Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ConnectorsHow to calculate UnitAmt?ConnectorsWhat's the use of getId and setId?","metadata":{"source":"https://docs.instadapp.io/faq/connectors/calldata-param"}},"233":{"pageContent":"Useful dsa-connect functionsSome more important methods that the dsa-connect provides include -getAuthById()This method takes dsaId as input and returns the Authority/Authorities for the DSA account.await dsa.getAuthById(dsaId);Copy to clipboardParameterTypeDescriptiondsaIdstring/numberThe Id of the DSA account.encodeCastABI()This method returns the encoded format of spells to be used in the low-level call.await dsa.encodeCastABI(spells);Copy to clipboardParameterTypeDescriptionspellsobjectThe instance of Spells with the spells to be cast added to it.encodeSpells()This method returns the parameters for the cast function.await dsa.encodeSpells(spells);Copy to clipboardParameterTypeDescriptionspellsobjectThe instance of Spells with the spells to be cast added to it.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future","metadata":{"source":"https://docs.instadapp.io/faq/dsa-connect/additional-dsa-connect-functions"}},"234":{"pageContent":"community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FaqDsa-connectFaqTerminal","metadata":{"source":"https://docs.instadapp.io/faq/dsa-connect/additional-dsa-connect-functions"}},"235":{"pageContent":"Typechain-guideCommon functions or variables available on terminal :LibrariesBigNumberaxiosDSAWeb3waitConstantsMAINNET_TOKENSPOLYGON_TOKENSAVALACHE_TOKENSARBITRUM_TOKENSUSER_ADDRESSACCOUNT_ADDRESSLibrary InstancesWeb3DSAYou can also use top level await -Usually you need async wrapper in JS:const run = async () => {   const gas = await web3.eth.getGasPrice();}run() .then(() => console.log(\"Done\")) .catch((error) => console.log(error.message))Copy to clipboardBut we have top level await, no need to any wrapperconst gas = await web3.eth.getGasPrice();Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FaqTerminal","metadata":{"source":"https://docs.instadapp.io/faq/terminal/typechain-guide"}},"236":{"pageContent":"Contractsflashloan contract addressesInstaFlashAggregatorflashloan()Sends the requested amounts of assets to the contract which called it, passing the included params, using the passed route.","metadata":{"source":"https://docs.instadapp.io/flashloan/contracts"}},"237":{"pageContent":"If the flash loaned amounts + fee is not returned by the end of the transaction, then the transaction will revert.function flashLoan(         address[] memory tokens,            uint256[] memory amounts,        uint256 route,        bytes calldata data,        bytes calldata instaData    );Copy to clipboardparamstypeDescriptiontokensaddressThe addresses of the tokens for which user needs flashloan.amountsuint256The amounts of the respective tokens for flashloan. This needs to contain the same number of elements as tokens.routeuint256Route through which user wants flashloan.databytesbytes-encoded parameters to be used by the receiver contract.instaDatabytesbytes-encoded parameters. Kept for future use by instadapp. Currently used nowhere.getRoutes()Returns an integer list of available routes.function getRoutes() public pure returns (uint16[] memory routes);Copy to clipboardInstaFlashResolverThis contract can be used to get data from the flashloan aggregator which can be helpful in deciding the route through which user wants to take flashloan. The flashResolver has the following functions:-getRoutes()This function returns all routes that are supported by FLA (Flashloan","metadata":{"source":"https://docs.instadapp.io/flashloan/contracts"}},"238":{"pageContent":"aggregator which can be helpful in deciding the route through which user wants to take flashloan. The flashResolver has the following functions:-getRoutes()This function returns all routes that are supported by FLA (Flashloan Aggregator) for that particiular chain.function getRoutes() public view returns (uint16[] memory)Copy to clipboardgetBestRoutes()This function returns the bestRoutes (can be more than 1), the best fee in BPS (1 BPS = 0.01%) and the bestData . The best routes are found considering the tokens availability, amounts of tokens for flashloan, and the fee.function getBestRoutes(address[] memory tokens, uint256[] memory amounts) public view returns (uint16[] memory, uint256, bytes[] memory)Copy to clipboardparamstypeDescriptiontokensaddressThe addresses of the tokens for which user needs flashloan.amountsuint256The amounts of the respective tokens for flashloan. This needs to contain the same number of elements as tokens.getData()This function internally calls getRoutes() and getBestRoutes() functions and returns the compiled data.function getData(address[] memory tokens, uint256[] memory amounts) public view","metadata":{"source":"https://docs.instadapp.io/flashloan/contracts"}},"239":{"pageContent":"same number of elements as tokens.getData()This function internally calls getRoutes() and getBestRoutes() functions and returns the compiled data.function getData(address[] memory tokens, uint256[] memory amounts) public view returns (uint16[] memory, uint16[] memory, uint256, bytes[] memory)Copy to clipboardparamstypeDescriptiontokensaddressThe addresses of the tokens for which user needs flashloan.amountsuint256The amounts of the respective tokens for flashloan. This needs to contain the same number of elements as tokens.Receiver Contract InterfaceThe receiver contract must follow the below interface to use the flashloan aggregator.interface InstaFlashReceiverInterface {    function executeOperation(        address[] calldata assets,        uint256[] calldata amounts,        uint256[] calldata premiums,        address initiator,        bytes calldata data    ) external returns (bool);}Copy to clipboardparamstypeDescriptionassetsaddressThe addresses of the tokens for which user needs flashloan.amountsuint256The amounts of the respective tokens for flashloan. This needs to contain the same number of elements as tokens.premiumsuint256The fee for the","metadata":{"source":"https://docs.instadapp.io/flashloan/contracts"}},"240":{"pageContent":"addresses of the tokens for which user needs flashloan.amountsuint256The amounts of the respective tokens for flashloan. This needs to contain the same number of elements as tokens.premiumsuint256The fee for the respective tokens based on the amounts borrowed. At the end user need to return the amount + premium for all the tokens.initiatoraddressThe address which initiated the flashloan transaction.databytesbytes-encoded parameters to be used by the receiver contract.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismUniswap V3FlashloanFlashloan Aggregator","metadata":{"source":"https://docs.instadapp.io/flashloan/contracts"}},"241":{"pageContent":"Flashloan Aggregatorflashloan aggregator and resolvers\"FlashloansFlash Loans are special uncollateralized loans that allow the borrowing of an asset, as long as the borrowed amount (and a fee) is returned before the end of the transaction. There is no real-world analogy to Flash Loans, so it requires some basic understanding of how state is managed within blocks in blockchains.","metadata":{"source":"https://docs.instadapp.io/flashloan/docs"}},"242":{"pageContent":"Flash Loans are an advanced concept aimed at developers. You must have a good understanding of Ethereum, programming, and smart contracts to take advantage of them.Applications of FlashloansAt Instadapp flashloans are used very extensively for many strategies like Protection Automation, Leverage / Max mining, Save / Unwind mining, Collateral swap, Debt swap, etc. Other examples in the wild include:Arbitrage between assets, without needing to have the principal amount to execute the arbitrage. Example: ArbitrageDAO.Other examples and ideas are listed in these blogs here and here.Flashloan AggregatorThere are many flashloan providers which charge different fees (eg Aave, MakerDAO, Balancer, etc). Instadapp has aggregated all these different routes along with other complex ways to get flashloans in the 'Flashloan Aggregator' using advanced routing.","metadata":{"source":"https://docs.instadapp.io/flashloan/docs"}},"243":{"pageContent":"The user can pass in the route through which he/she wants to take flashloan from.OverviewFor developers, a helpful mental model to consider when developing your solution:Your receiver contract calls the aggregator contract, requesting a Flash Loan of certain amounts using flashloan() mentioning the route.After some sanity checks, the aggregator routes the transaction to the passed route, gets the requested amounts, transfers the requested amounts to your contract, and calls the executeOperation() of your contract.Your contract, now holding the flash loaned amounts, executes any arbitrary operation in its code.When your code has finished, your contract transfers the flash loaned amounts with fees back to the aggregator.The aggregator verifies if you have sent the correct amounts, and then sends the amounts back to the respective routes' flashloan provider.All of the above happens in 1 transaction (hence in a single ethereum block).RoutesRoute 1 - Aave route. Flashloan provider is aave.Route 2 - Maker route. Flashloan provider is makerDAO. Provides flashloan only for DAI.Route 3 - Maker-Compound route. Advanced Routing Pair MakerDAO - Compound.Route 4 -","metadata":{"source":"https://docs.instadapp.io/flashloan/docs"}},"244":{"pageContent":"block).RoutesRoute 1 - Aave route. Flashloan provider is aave.Route 2 - Maker route. Flashloan provider is makerDAO. Provides flashloan only for DAI.Route 3 - Maker-Compound route. Advanced Routing Pair MakerDAO - Compound.Route 4 - Maker-Aave route. Advanced Routing Pair MakerDAO - Aave.Route 5 - Balancer route. Flashloan provider is balancer.Route 6 - Balancer-Compound route. Advanced Routing Pair Balancer - Compound.Route 7 - Balancer-Aave route. Advanced Routing Pair Balancer - Aave.Route 8 - Uniswap route. Flashloan provider is uniswap.Chains\\Routes12345678Arbitrum❌❌❌❌✔️❌❌✔️Avalanche✔️❌❌❌❌❌❌❌Mainnet✔️✔️✔️✔️✔️✔️✔️❌Polygon✔️❌❌❌✔️❌✔️✔️Optimism❌❌❌❌❌❌❌✔️If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FlashloanContractsFaqConnectors","metadata":{"source":"https://docs.instadapp.io/flashloan/docs"}},"245":{"pageContent":"Uniswap V3UniswapV3-v1 resolver triggers methods like getPoolDetails, getPositionInfoByTokenId, getPositionsInfo, getMintAmount, getDepositAmount, getSingleDepositAmount, getSingleMintAmount, getWithdrawAmount, getCollectAmount, getUserNFTs. You can view details like source code, ABIs on Optimistic Ethereum.getPoolDetailsReturns the pool detailsfunction getPoolDetails(PoolConfig[] memory poolConfigs) public view returns (PoolData[] memory poolDatas);Copy to clipboardparamstypeDescriptionpoolConfigsPoolConfigStruct containing tokenA, tokenB addresses and the fee.getPositionInfoByTokenIdReturns the positIon info by token id.function getPositionInfoByTokenId(uint256 tokenId) public view returns (PositionInfo memory pInfo);Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.getPositionsInfoReturns the position info of tokens the user has used as stakes. function getPositionsInfo(    address user,     uint256[] memory stakedTokenIds    ) public view returns (uint256[] memory tokenIds, PositionInfo[] memory positionsInfo);Copy to clipboardparamstypeDescriptionuseraddressThe","metadata":{"source":"https://docs.instadapp.io/resolvers/optimism/uniswap"}},"246":{"pageContent":"function getPositionsInfo(    address user,     uint256[] memory stakedTokenIds    ) public view returns (uint256[] memory tokenIds, PositionInfo[] memory positionsInfo);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens position you want.stakedTokenIdsuint256uint256 array of tokens-ids, the user has staked.getMintAmountGet the mint amountfunction getMintAmount(MintParams memory mintParams) public view returns         (            address token0,            address token1,            uint256 liquidity,            uint256 amount0,            uint256 amount1,            uint256 amount0Min,            uint256 amount1Min        );Copy to clipboardparamstypeDescriptionmintParamsMintParamsStruct of mint params containing tokenA, tokenB, fee, lowerTick, upperTick, amountA, amountB, slippage.getDepositAmountGet the Deposit amount    function getDepositAmount (        uint256 tokenId,        uint256 amountA,        uint256 amountB,        uint256 slippage    ) public view returns (         uint256 liquidity,         uint256 amount0,         uint256 amount1,         uint256 amount0Min,         uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.amountAuint256tokenA amounts.amountBuint256tokenB","metadata":{"source":"https://docs.instadapp.io/resolvers/optimism/uniswap"}},"247":{"pageContent":"(         uint256 liquidity,         uint256 amount0,         uint256 amount1,         uint256 amount0Min,         uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.amountAuint256tokenA amounts.amountBuint256tokenB amounts.slippageuint256slippagegetSingleDepositAmountGet single deposit amount    function getSingleDepositAmount(        uint256 tokenId,        address tokenA,        uint256 amountA,        uint256 slippage    ) public view returns (         uint256 liquidity,         address tokenB,         uint256 amountB,         uint256 amountAMin,         uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.tokenAaddresstokenA address.amountAuint256tokenA amounts.slippageuint256slippage.getSingleMintAmountGet single mint amount     function getSingleMintAmount(        address tokenA,        address tokenB,        uint256 amountA,        uint256 slippage,        uint24 fee,        int24 tickLower,        int24 tickUpper    )        public        view        returns (            uint256 liquidity,            uint256 amountB,            uint256 amountAMin,            uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenAaddresstokenA address.tokenBaddresstokenB address.amountAuint256tokenA","metadata":{"source":"https://docs.instadapp.io/resolvers/optimism/uniswap"}},"248":{"pageContent":")        public        view        returns (            uint256 liquidity,            uint256 amountB,            uint256 amountAMin,            uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenAaddresstokenA address.tokenBaddresstokenB address.amountAuint256tokenA amounts.slippageuint256slippage.tickLoweruint24Lower tick.tickUpperuint24Upper tick.getWithdrawAmountGet withdraw amount    function getWithdrawAmount(        uint256 tokenId,        uint256 liquidity,        uint256 slippage    )        public        view        returns (            uint256 amount0,            uint256 amount1,            uint256 amount0Min,            uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.liquidityuint256LP Token amount.slippageuint256slippage.getCollectAmountGet collect amount using token-idfunction getCollectAmount(uint256 tokenId) public view returns (uint256 amountA, uint256 amountB);Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.getUserNFTsGet userNft token-idsfunction getUserNFTs(address user) public view returns (uint256[] memory tokenIds);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose token-ids you want.If you still can't find","metadata":{"source":"https://docs.instadapp.io/resolvers/optimism/uniswap"}},"249":{"pageContent":"userNft token-idsfunction getUserNFTs(address user) public view returns (uint256[] memory tokenIds);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose token-ids you want.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismAave V3FlashloanContracts","metadata":{"source":"https://docs.instadapp.io/resolvers/optimism/uniswap"}},"250":{"pageContent":"Aave V3AaveV3-v1.0 resolver triggers methods like getPosition, getPositionAll, getConfiguration, getReservesList. You can view details like source code, ABIs on Optimistic Ethereum.getPositionReturns the position of user on aave v3.function getPosition(        address user,         address[] memory tokens        )         public         view         returns (                AaveV3UserData memory,                AaveV3UserTokenData[] memory,                 AaveV3TokenData[] memory,                 ReserveIncentiveData[] memory        );Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.tokensaddressString array of tokens whose data you want.getPositionAllReturns the position of user on aave v3 for all reserves of the market.function getPositionAll(        address user        )         public         view         returns (                AaveV3UserData memory,                AaveV3UserTokenData[] memory,                 AaveV3TokenData[] memory,                 ReserveIncentiveData[] memory        );Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user)","metadata":{"source":"https://docs.instadapp.io/resolvers/optimism/aave_v3"}},"251":{"pageContent":"of the user whose tokens data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user) public view returns (uint256[] memory collateral, uint256[] memory borrowed);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getReservesListReturns the list of initialized reserves. function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FantomAave V3OptimismUniswap V3","metadata":{"source":"https://docs.instadapp.io/resolvers/optimism/aave_v3"}},"252":{"pageContent":"UNISWAP-V3-ROUTER  - OptimismDEX.\nUniswapV3-Auto-Router-v1 connector on optimism triggers methods like sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SellSwap tokens from getting an optimized trade routesspells.add({  connector: \"UNISWAP-V3-ROUTER-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from Uniswap V3 auto router SDK.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap-v3-auto-router"}},"253":{"pageContent":"uint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from Uniswap V3 auto router SDK.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismUNISWAP-V3-SWAP-AOptimismUniswap V3 Staker","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap-v3-auto-router"}},"254":{"pageContent":"Uniswap V3UniswapV3-v1 resolver triggers methods like getPoolDetails, getPositionInfoByTokenId, getPositionsInfo, getMintAmount, getDepositAmount, getSingleDepositAmount, getSingleMintAmount, getWithdrawAmount, getCollectAmount, getUserNFTs. You can view details like source code, ABIs on arbiscan.getPoolDetailsReturns the pool detailsfunction getPoolDetails(PoolConfig[] memory poolConfigs) public view returns (PoolData[] memory poolDatas);Copy to clipboardparamstypeDescriptionpoolConfigsPoolConfigStruct containing tokenA, tokenB addresses and the fee.getPositionInfoByTokenIdReturns the positIon info by token id.function getPositionInfoByTokenId(uint256 tokenId) public view returns (PositionInfo memory pInfo);Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.getPositionsInfoReturns the position info of tokens the user has used as stakes. function getPositionsInfo(    address user,     uint256[] memory stakedTokenIds    ) public view returns (uint256[] memory tokenIds, PositionInfo[] memory positionsInfo);Copy to clipboardparamstypeDescriptionuseraddressThe address of the","metadata":{"source":"https://docs.instadapp.io/resolvers/arbitrum/uniswap"}},"255":{"pageContent":"getPositionsInfo(    address user,     uint256[] memory stakedTokenIds    ) public view returns (uint256[] memory tokenIds, PositionInfo[] memory positionsInfo);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens position you want.stakedTokenIdsuint256uint256 array of tokens-ids, the user has staked.getMintAmountGet the mint amountfunction getMintAmount(MintParams memory mintParams) public view returns         (            address token0,            address token1,            uint256 liquidity,            uint256 amount0,            uint256 amount1,            uint256 amount0Min,            uint256 amount1Min        );Copy to clipboardparamstypeDescriptionmintParamsMintParamsStruct of mint params containing tokenA, tokenB, fee, lowerTick, upperTick, amountA, amountB, slippage.getDepositAmountGet the Deposit amount    function getDepositAmount (        uint256 tokenId,        uint256 amountA,        uint256 amountB,        uint256 slippage    ) public view returns (         uint256 liquidity,         uint256 amount0,         uint256 amount1,         uint256 amount0Min,         uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.amountAuint256tokenA amounts.amountBuint256tokenB","metadata":{"source":"https://docs.instadapp.io/resolvers/arbitrum/uniswap"}},"256":{"pageContent":"(         uint256 liquidity,         uint256 amount0,         uint256 amount1,         uint256 amount0Min,         uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.amountAuint256tokenA amounts.amountBuint256tokenB amounts.slippageuint256slippagegetSingleDepositAmountGet single deposit amount    function getSingleDepositAmount(        uint256 tokenId,        address tokenA,        uint256 amountA,        uint256 slippage    ) public view returns (         uint256 liquidity,         address tokenB,         uint256 amountB,         uint256 amountAMin,         uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.tokenAaddresstokenA address.amountAuint256tokenA amounts.slippageuint256slippage.getSingleMintAmountGet single mint amount     function getSingleMintAmount(        address tokenA,        address tokenB,        uint256 amountA,        uint256 slippage,        uint24 fee,        int24 tickLower,        int24 tickUpper    )        public        view        returns (            uint256 liquidity,            uint256 amountB,            uint256 amountAMin,            uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenAaddresstokenA address.tokenBaddresstokenB address.amountAuint256tokenA","metadata":{"source":"https://docs.instadapp.io/resolvers/arbitrum/uniswap"}},"257":{"pageContent":")        public        view        returns (            uint256 liquidity,            uint256 amountB,            uint256 amountAMin,            uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenAaddresstokenA address.tokenBaddresstokenB address.amountAuint256tokenA amounts.slippageuint256slippage.tickLoweruint24Lower tick.tickUpperuint24Upper tick.getWithdrawAmountGet withdraw amount    function getWithdrawAmount(        uint256 tokenId,        uint256 liquidity,        uint256 slippage    )        public        view        returns (            uint256 amount0,            uint256 amount1,            uint256 amount0Min,            uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.liquidityuint256LP Token amount.slippageuint256slippage.getCollectAmountGet collect amount using token-idfunction getCollectAmount(uint256 tokenId) public view returns (uint256 amountA, uint256 amountB);Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.getUserNFTsGet userNft token-idsfunction getUserNFTs(address user) public view returns (uint256[] memory tokenIds);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose token-ids you want.If you still can't find","metadata":{"source":"https://docs.instadapp.io/resolvers/arbitrum/uniswap"}},"258":{"pageContent":"userNft token-idsfunction getUserNFTs(address user) public view returns (uint256[] memory tokenIds);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose token-ids you want.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumInstadappAvalancheAave V2","metadata":{"source":"https://docs.instadapp.io/resolvers/arbitrum/uniswap"}},"259":{"pageContent":"Aave V3AaveV3-v1.0 resolver triggers methods like getPosition, getPositionAll, getConfiguration, getReservesList. You can view details like source code, ABIs on arbiscan.getPositionReturns the position of user on aave v3.function getPosition(        address user,         address[] memory tokens        )         public         view         returns (                AaveV3UserData memory,                AaveV3UserTokenData[] memory,                 AaveV3TokenData[] memory,                 ReserveIncentiveData[] memory        );Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.tokensaddressString array of tokens whose data you want.getPositionAllReturns the position of user on aave v3 for all reserves of the market.    function getPositionAll(address user)        public        view        returns (            AaveV3UserData memory,            AaveV3UserTokenData[] memory,            AaveV3TokenData[] memory,            ReserveIncentiveData[] memory        );Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user supplied as collateral and which user borrowed.function getConfiguration(address user) public view","metadata":{"source":"https://docs.instadapp.io/resolvers/arbitrum/aave_v3"}},"260":{"pageContent":"user whose tokens data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user supplied as collateral and which user borrowed.function getConfiguration(address user) public view returns (uint256[] memory collateral, uint256[] memory borrowed);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getReservesListReturns the list of initialized reserves. function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonUniswap V3ArbitrumInstadapp","metadata":{"source":"https://docs.instadapp.io/resolvers/arbitrum/aave_v3"}},"261":{"pageContent":"InstadappInstapoolv2 resolver triggers methods like getAuthorityAccounts, getAuthorityIDs, getAccountAuthorities, getIDAuthorities. You can view details like source code, ABIs on arbiscan.getAuthorityAccountsReturns all accounts related to an authorityfunction getAuthorityAccounts(address authority) public view returns(address[] memory);Copy to clipboardparamstypeDescriptionauthorityaddressThe authority Address.getAuthorityIDsReturns all IDs related to authority.function getAuthorityIDs(address authority) public view returns(uint64[] memory);Copy to clipboardparamstypeDescriptionauthorityaddressThe authority Address.getAccountAuthoritiesReturns the authoriy (owner) of an account.function getAccountAuthorities(address account) public view returns(address[] memory);Copy to clipboardparamstypeDescriptionaccountaddressAddress of the account.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your","metadata":{"source":"https://docs.instadapp.io/resolvers/arbitrum/instadapp"}},"262":{"pageContent":"find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumAave V3ArbitrumUniswap V3","metadata":{"source":"https://docs.instadapp.io/resolvers/arbitrum/instadapp"}},"263":{"pageContent":"Aave V3AaveV3-v1.0 resolver triggers methods like getPosition, getPositionAll, getConfiguration, getReservesList. You can view details like source code, ABIs on FTMscan.getPositionReturns the position of user on aave v3.function getPosition(        address user,         address[] memory tokens        )         public         view         returns (            AaveV3UserData memory,            AaveV3UserTokenData[] memory,             AaveV3TokenData[] memory,             ReserveIncentiveData[] memory        );Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.tokensaddressString array of tokens whose data you want.getPositionAllReturns the position of user on aave v3 for all reserves of the market.function getPositionAll(address user)         public         view         returns (            AaveV3UserData memory,            AaveV3UserTokenData[] memory,             AaveV3TokenData[] memory,             ReserveIncentiveData[] memory        );Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user) public view","metadata":{"source":"https://docs.instadapp.io/resolvers/fantom/aave_v3"}},"264":{"pageContent":"user whose tokens data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user) public view returns (uint256[] memory collateral, uint256[] memory borrowed);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getReservesListReturns the list of initialized reserves. function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheInstadappOptimismAave V3","metadata":{"source":"https://docs.instadapp.io/resolvers/fantom/aave_v3"}},"265":{"pageContent":"Uniswap V3UniswapV3-v1 resolver triggers methods like getPoolDetails, getPositionInfoByTokenId, getPositionsInfo, getMintAmount, getDepositAmount, getSingleDepositAmount, getSingleMintAmount, getWithdrawAmount, getCollectAmount, getUserNFTs. You can view details like source code, ABIs on Polygonscan.getPoolDetailsReturns the pool detailsfunction getPoolDetails(PoolConfig[] memory poolConfigs) public view returns (PoolData[] memory poolDatas);Copy to clipboardparamstypeDescriptionpoolConfigsPoolConfigStruct containing tokenA, tokenB addresses and the fee.getPositionInfoByTokenIdReturns the positIon info by token id.function getPositionInfoByTokenId(uint256 tokenId) public view returns (PositionInfo memory pInfo);Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.getPositionsInfoReturns the position info of tokens the user has used as stakes. function getPositionsInfo(    address user,     uint256[] memory stakedTokenIds    ) public view returns (uint256[] memory tokenIds, PositionInfo[] memory positionsInfo);Copy to clipboardparamstypeDescriptionuseraddressThe address of the","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/uniswap"}},"266":{"pageContent":"getPositionsInfo(    address user,     uint256[] memory stakedTokenIds    ) public view returns (uint256[] memory tokenIds, PositionInfo[] memory positionsInfo);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens position you want.stakedTokenIdsuint256uint256 array of tokens-ids, the user has staked.getMintAmountGet the mint amountfunction getMintAmount(MintParams memory mintParams) public view returns         (            address token0,            address token1,            uint256 liquidity,            uint256 amount0,            uint256 amount1,            uint256 amount0Min,            uint256 amount1Min        );Copy to clipboardparamstypeDescriptionmintParamsMintParamsStruct of mint params containing tokenA, tokenB, fee, lowerTick, upperTick, amountA, amountB, slippage.getDepositAmountGet the Deposit amount    function getDepositAmount (        uint256 tokenId,        uint256 amountA,        uint256 amountB,        uint256 slippage    ) public view returns (         uint256 liquidity,         uint256 amount0,         uint256 amount1,         uint256 amount0Min,         uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.amountAuint256tokenA amounts.amountBuint256tokenB","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/uniswap"}},"267":{"pageContent":"(         uint256 liquidity,         uint256 amount0,         uint256 amount1,         uint256 amount0Min,         uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.amountAuint256tokenA amounts.amountBuint256tokenB amounts.slippageuint256slippagegetSingleDepositAmountGet single deposit amount    function getSingleDepositAmount(        uint256 tokenId,        address tokenA,        uint256 amountA,        uint256 slippage    ) public view returns (         uint256 liquidity,         address tokenB,         uint256 amountB,         uint256 amountAMin,         uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.tokenAaddresstokenA address.amountAuint256tokenA amounts.slippageuint256slippage.getSingleMintAmountGet single mint amount     function getSingleMintAmount(        address tokenA,        address tokenB,        uint256 amountA,        uint256 slippage,        uint24 fee,        int24 tickLower,        int24 tickUpper    )        public        view        returns (            uint256 liquidity,            uint256 amountB,            uint256 amountAMin,            uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenAaddresstokenA address.tokenBaddresstokenB address.amountAuint256tokenA","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/uniswap"}},"268":{"pageContent":")        public        view        returns (            uint256 liquidity,            uint256 amountB,            uint256 amountAMin,            uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenAaddresstokenA address.tokenBaddresstokenB address.amountAuint256tokenA amounts.slippageuint256slippage.tickLoweruint24Lower tick.tickUpperuint24Upper tick.getWithdrawAmountGet withdraw amount    function getWithdrawAmount(        uint256 tokenId,        uint256 liquidity,        uint256 slippage    )        public        view        returns (            uint256 amount0,            uint256 amount1,            uint256 amount0Min,            uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.liquidityuint256LP Token amount.slippageuint256slippage.getCollectAmountGet collect amount using token-idfunction getCollectAmount(uint256 tokenId) public view returns (uint256 amountA, uint256 amountB);Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.getUserNFTsGet userNft token-idsfunction getUserNFTs(address user) public view returns (uint256[] memory tokenIds);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose token-ids you want.If you still can't find","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/uniswap"}},"269":{"pageContent":"userNft token-idsfunction getUserNFTs(address user) public view returns (uint256[] memory tokenIds);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose token-ids you want.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonInstadappArbitrumAave V3","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/uniswap"}},"270":{"pageContent":"Aave V3AaveV3-v1.0 resolver triggers methods like getPosition, getPositionAll, getConfiguration, getReservesList. You can view details like source code, ABIs on Polygonscan.getPositionReturns the position of user on aave v3.function getPosition(        address user,         address[] memory tokens        )         public         view         returns (                AaveV3UserData memory,                AaveV3UserTokenData[] memory,                 AaveV3TokenData[] memory,                 ReserveIncentiveData[] memory        );Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.tokensaddressString array of tokens whose data you want.getPositionAllReturns the position of user on aave v3 for all reserves of the market.function getPositionAll(address user)         public         view         returns (                AaveV3UserData memory,                AaveV3UserTokenData[] memory,                 AaveV3TokenData[] memory,                 ReserveIncentiveData[] memory        );Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user) public","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/aave_v3"}},"271":{"pageContent":"the user whose tokens data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user) public view returns (uint256[] memory collateral, uint256[] memory borrowed);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getReservesListReturns the list of initialized reserves. function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonAave V2PolygonInstadapp","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/aave_v3"}},"272":{"pageContent":"Aave V2AaveV2-v1.6 resolver triggers methods like getPosition, getConfiguration, getReservesList. You can view details like source code, ABIs on polygonscan.getPositionReturns the position of user on aave v2.function getPosition(        address user,         address[] memory tokens        ) public view returns (AaveUserTokenData[] memory, AaveUserData memory);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.tokensaddressString array of tokens whose data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user) public view returns (uint256[] memory collateral, uint256[] memory borrowed);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getReservesListReturns the list of initialized reserves. function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/aave_v2"}},"273":{"pageContent":"reserves. function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetUniswap V3PolygonAave V3","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/aave_v2"}},"274":{"pageContent":"InstadappInstapoolv2 resolver triggers methods like getAuthorityAccounts, getAuthorityIDs, getAccountAuthorities, getIDAuthorities. You can view details like source code, ABIs on polygonscan.getAuthorityAccountsReturns all accounts related to an authorityfunction getAuthorityAccounts(address authority) public view returns(address[] memory);Copy to clipboardparamstypeDescriptionauthorityaddressThe authority Address.getAuthorityIDsReturns all IDs related to authority.function getAuthorityIDs(address authority) public view returns(uint64[] memory);Copy to clipboardparamstypeDescriptionauthorityaddressThe authority Address.getAccountAuthoritiesReturns the authoriy (owner) of an account.function getAccountAuthorities(address account) public view returns(address[] memory);Copy to clipboardparamstypeDescriptionaccountaddressAddress of the account.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/instadapp"}},"275":{"pageContent":"find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonAave V3PolygonUniswap V3","metadata":{"source":"https://docs.instadapp.io/resolvers/polygon/instadapp"}},"276":{"pageContent":"Uniswap V3UniswapV3-v1 resolver triggers methods like getPoolDetails, getPositionInfoByTokenId, getPositionsInfo, getMintAmount, getDepositAmount, getSingleDepositAmount, getSingleMintAmount, getWithdrawAmount, getCollectAmount, getUserNFTs. You can view details like source code, ABIs on Etherscan.getPoolDetailsReturns the pool detailsfunction getPoolDetails(PoolConfig[] memory poolConfigs) public view returns (PoolData[] memory poolDatas);Copy to clipboardparamstypeDescriptionpoolConfigsPoolConfigStruct containing tokenA, tokenB addresses and the fee.getPositionInfoByTokenIdReturns the positIon info by token id.function getPositionInfoByTokenId(uint256 tokenId) public view returns (PositionInfo memory pInfo);Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.getPositionsInfoReturns the position info of tokens the user has used as stakes. function getPositionsInfo(    address user,     uint256[] memory stakedTokenIds    ) public view returns (uint256[] memory tokenIds, PositionInfo[] memory positionsInfo);Copy to clipboardparamstypeDescriptionuseraddressThe address of the","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/uniswap"}},"277":{"pageContent":"getPositionsInfo(    address user,     uint256[] memory stakedTokenIds    ) public view returns (uint256[] memory tokenIds, PositionInfo[] memory positionsInfo);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens position you want.stakedTokenIdsuint256uint256 array of tokens-ids, the user has staked.getMintAmountGet the mint amountfunction getMintAmount(MintParams memory mintParams) public view returns         (            address token0,            address token1,            uint256 liquidity,            uint256 amount0,            uint256 amount1,            uint256 amount0Min,            uint256 amount1Min        );Copy to clipboardparamstypeDescriptionmintParamsMintParamsStruct of mint params containing tokenA, tokenB, fee, lowerTick, upperTick, amountA, amountB, slippage.getDepositAmountGet the Deposit amount    function getDepositAmount (        uint256 tokenId,        uint256 amountA,        uint256 amountB,        uint256 slippage    ) public view returns (         uint256 liquidity,         uint256 amount0,         uint256 amount1,         uint256 amount0Min,         uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.amountAuint256tokenA amounts.amountBuint256tokenB","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/uniswap"}},"278":{"pageContent":"(         uint256 liquidity,         uint256 amount0,         uint256 amount1,         uint256 amount0Min,         uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.amountAuint256tokenA amounts.amountBuint256tokenB amounts.slippageuint256slippagegetSingleDepositAmountGet single deposit amount    function getSingleDepositAmount(        uint256 tokenId,        address tokenA,        uint256 amountA,        uint256 slippage    ) public view returns (         uint256 liquidity,         address tokenB,         uint256 amountB,         uint256 amountAMin,         uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.tokenAaddresstokenA address.amountAuint256tokenA amounts.slippageuint256slippage.getSingleMintAmountGet single mint amount     function getSingleMintAmount(        address tokenA,        address tokenB,        uint256 amountA,        uint256 slippage,        uint24 fee,        int24 tickLower,        int24 tickUpper    )        public        view        returns (            uint256 liquidity,            uint256 amountB,            uint256 amountAMin,            uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenAaddresstokenA address.tokenBaddresstokenB address.amountAuint256tokenA","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/uniswap"}},"279":{"pageContent":")        public        view        returns (            uint256 liquidity,            uint256 amountB,            uint256 amountAMin,            uint256 amountBMin        );Copy to clipboardparamstypeDescriptiontokenAaddresstokenA address.tokenBaddresstokenB address.amountAuint256tokenA amounts.slippageuint256slippage.tickLoweruint24Lower tick.tickUpperuint24Upper tick.getWithdrawAmountGet withdraw amount    function getWithdrawAmount(        uint256 tokenId,        uint256 liquidity,        uint256 slippage    )        public        view        returns (            uint256 amount0,            uint256 amount1,            uint256 amount0Min,            uint256 amount1Min        );Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.liquidityuint256LP Token amount.slippageuint256slippage.getCollectAmountGet collect amount using token-idfunction getCollectAmount(uint256 tokenId) public view returns (uint256 amountA, uint256 amountB);Copy to clipboardparamstypeDescriptiontokenIduint256NFT LP Token ID.getUserNFTsGet userNft token-idsfunction getUserNFTs(address user) public view returns (uint256[] memory tokenIds);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose token-ids you want.If you still can't find","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/uniswap"}},"280":{"pageContent":"userNft token-idsfunction getUserNFTs(address user) public view returns (uint256[] memory tokenIds);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose token-ids you want.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetMakerDAOPolygonAave V2","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/uniswap"}},"281":{"pageContent":"MakerDAOMakerDAO-v1.2 resolver triggers methods like getColInfo, getVaultById, getVaults. You can view details like source code, ABIs on Etherscan.getColInfoGet details around collateral types in maker vault.function getColInfo(string[] memory name) public view returns (ColInfo[] memory);Copy to clipboardparamstypeDescriptionnamestringString array containing names of collateralgetVaultByIdGet the vaults details by vault id.function getVaultById(uint256 id) external view returns (VaultData memory);Copy to clipboardparamstypeDescriptioniduint256Vault ID.getVaultsReturns the details of all maker vault related to user.function getVaults(address owner) external view returns (VaultData[] memory);Copy to clipboardparamstypeDescriptionowneraddressAddress of the owner of the vault.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/makerdao"}},"282":{"pageContent":"community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetInstadappMainnetUniswap V3","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/makerdao"}},"283":{"pageContent":"WETH - OptimismWrap and Unwrap WETH.\nWETH-v1.1 connector on optimism triggers methods like deposit, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositWrap ETH into WETHspells.add({  connector: \"WETH-A\",  method: \"deposit\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of ETH to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of ETH deposited.\nWithdrawUnwrap ETH from WETHspells.add({  connector: \"WETH-A\",  method: \"withdraw\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint\nThe amount of weth to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of ETH withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/weth"}},"284":{"pageContent":"Parameter\nType\nDescription\namt\nuint\nThe amount of weth to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of ETH withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismUniswap V3ConnectorsPolygon","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/weth"}},"285":{"pageContent":"AaveAaveV2-v1.6 resolver triggers methods like getPosition, getConfiguration, getReservesList. You can view details like source code, ABIs on Etherscan.getPositionReturns the position of user on aave.function getPosition(        address user,         address[] memory tokens        ) public view returns (AaveUserTokenData[] memory, AaveUserData memory);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.tokensaddressString array of tokens whose data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user) public view returns (uint256[] memory collateral, uint256[] memory borrowed);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getReservesListReturns the list of initialized reserves. function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/aave"}},"286":{"pageContent":"function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonWMATICMainnetCompound","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/aave"}},"287":{"pageContent":"CompoundCompound-v1.5 resolver triggers methods like getPriceInEth, getCompoundData, getPosition. You can view details like source code, ABIs on Etherscan.getPriceInEthReturns the price of cToken in Eth and in USD.function getPriceInEth(CTokenInterface cToken) public view returns (uint256 priceInETH, uint256 priceInUSD); Copy to clipboardparamstypeDescriptioncTokenaddressThe address of the token whose price you need.getCompoundDataReturns tokens data of address of an user.function getCompoundData(        address owner,         address[] memory cAddress        ) public view returns (CompData[] memory); Copy to clipboardparamstypeDescriptionowneraddressThe address of the user whose tokens data you want.cAddressaddressString array of tokens whose data you want.getPositionReturns the position of user on compound. function getPosition(        address owner,         address[] memory cAddress        ) public returns (CompData[] memory, CompReadInterface.CompBalanceMetadataExt memory);Copy to clipboardparamstypeDescriptionowneraddressThe address of the user whose tokens data you want.cAddressaddressString array of tokens whose data you want.If you still","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/compound"}},"288":{"pageContent":"CompReadInterface.CompBalanceMetadataExt memory);Copy to clipboardparamstypeDescriptionowneraddressThe address of the user whose tokens data you want.cAddressaddressString array of tokens whose data you want.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetAaveMainnetInstadapp","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/compound"}},"289":{"pageContent":"InstadappInstapoolv2 resolver triggers methods like getAuthorityAccounts, getAuthorityIDs, getAccountAuthorities, getIDAuthorities. You can view details like source code, ABIs on Etherscan.getAuthorityAccountsReturns all accounts related to an authorityfunction getAuthorityAccounts(address authority) public view returns(address[] memory);Copy to clipboardparamstypeDescriptionauthorityaddressThe authority Address.getAuthorityIDsReturns all IDs related to authority.function getAuthorityIDs(address authority) public view returns(uint64[] memory);Copy to clipboardparamstypeDescriptionauthorityaddressThe authority Address.getAccountAuthoritiesReturns the authoriy (owner) of an account.function getAccountAuthorities(address account) public view returns(address[] memory);Copy to clipboardparamstypeDescriptionaccountaddressAddress of the account.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/instadapp"}},"290":{"pageContent":"find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetCompoundMainnetMakerDAO","metadata":{"source":"https://docs.instadapp.io/resolvers/mainnet/instadapp"}},"291":{"pageContent":"Aave V3AaveV3-v1.0 resolver triggers methods like getPosition, getPositionAll, getConfiguration, getReservesList. You can view details like source code, ABIs on snowtrace.getPositionReturns the position of user on aave v3.function getPosition(        address user,         address[] memory tokens        )         public         view         returns (                AaveV3UserData memory,                AaveV3UserTokenData[] memory,                 AaveV3TokenData[] memory,                 ReserveIncentiveData[] memory        );Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.tokensaddressString array of tokens whose data you want.getPositionAllReturns the position of user on aave v3 for all reserves of the market.function getPositionAll(address user)         public         view         returns (                AaveV3UserData memory,                AaveV3UserTokenData[] memory,                 AaveV3TokenData[] memory,                 ReserveIncentiveData[] memory        );Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user) public view","metadata":{"source":"https://docs.instadapp.io/resolvers/avalanche/aave_v3"}},"292":{"pageContent":"user whose tokens data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user) public view returns (uint256[] memory collateral, uint256[] memory borrowed);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getReservesListReturns the list of initialized reserves. function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheAave V2AvalancheInstadapp","metadata":{"source":"https://docs.instadapp.io/resolvers/avalanche/aave_v3"}},"293":{"pageContent":"Aave V2AaveV2-v1.6 resolver triggers methods like getPosition, getConfiguration, getReservesList. You can view details like source code, ABIs on snowtrace.getPositionReturns the position of user on aave v2.function getPosition(        address user,         address[] memory tokens        ) public view returns (AaveUserTokenData[] memory, AaveUserData memory);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.tokensaddressString array of tokens whose data you want.getConfigurationReturns the user's configuration across all the reserves, which tokens the user-supplied as collateral and which user borrowed.function getConfiguration(address user) public view returns (uint256[] memory collateral, uint256[] memory borrowed);Copy to clipboardparamstypeDescriptionuseraddressThe address of the user whose tokens data you want.getReservesListReturns the list of initialized reserves. function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply","metadata":{"source":"https://docs.instadapp.io/resolvers/avalanche/aave_v2"}},"294":{"pageContent":"reserves. function getReservesList() public view returns (address[] memory data);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumUniswap V3AvalancheAave V3","metadata":{"source":"https://docs.instadapp.io/resolvers/avalanche/aave_v2"}},"295":{"pageContent":"InstadappInstapoolv2 resolver triggers methods like getAuthorityAccounts, getAuthorityIDs, getAccountAuthorities, getIDAuthorities. You can view details like source code, ABIs on avascan.getAuthorityAccountsReturns all accounts related to an authorityfunction getAuthorityAccounts(address authority) public view returns(address[] memory);Copy to clipboardparamstypeDescriptionauthorityaddressThe authority Address.getAuthorityIDsReturns all IDs related to authority.function getAuthorityIDs(address authority) public view returns(uint64[] memory);Copy to clipboardparamstypeDescriptionauthorityaddressThe authority Address.getAccountAuthoritiesReturns the authoriy (owner) of an account.function getAccountAuthorities(address account) public view returns(address[] memory);Copy to clipboardparamstypeDescriptionaccountaddressAddress of the account.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your","metadata":{"source":"https://docs.instadapp.io/resolvers/avalanche/instadapp"}},"296":{"pageContent":"find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.AvalancheAave V3FantomAave V3","metadata":{"source":"https://docs.instadapp.io/resolvers/avalanche/instadapp"}},"297":{"pageContent":"Instadapp OptimismDeployed addressesBelow are all the addresses of Core Contracts of the DSL ecosystem on Optimism:ContractAddressIndex0x6CE3e607C808b4f4C26B7F6aDAeB619e49CAbb25InstaList0x9926955e0Dd681Dc303370C52f4Ad0a4dd061687InstaAccount0x0a0a82D2F86b9E46AE60E22FCE4e8b916F858DdcInstaConnectors0x127d8cD0E2b2E0366D522DeA53A787bfE9002C14InstaMemory0x3254Ce8f5b1c82431B8f21Df01918342215825C2Implementations0x01fEF4d2B513C9F69E34b2f93Ef707FA9Ff60109List of other Instadapp related address (non core to DSAs):ContractAddressInstaFlashAggregator0x84e6b05a089d5677a702cf61dc14335b4be5b282InstaFlashResolver0x810D6b2425Dc5523525D1F45CC548ae9a085F5EaTreasury0xdaf12965b3d5bf60843aa1fb49e2688919e697a0Networks and Underlying meaningsIndex: This is the Main Contract for all the DeFi Smart Accounts. Used for creating a new DeFi Smart Account of a user and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account","metadata":{"source":"https://docs.instadapp.io/networks/optimism"}},"298":{"pageContent":"and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account address. With this address, an account link is created which is utilised to add and remove accounts from the LinkedList.InstaAccounts: It’s the DeFi Smart Account Wallet. All smart accounts that are created are a clone of this contract.InstaConnectors: Holds a registry of all the Connectors associated with InstaDapp. An array of all the connectors is maintained using their address.InstaMemory: All the data (bytes, uint, address and Storage Id) for the cast function are stored in this contract.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.NetworksFantomGuidesCreate Connectors","metadata":{"source":"https://docs.instadapp.io/networks/optimism"}},"299":{"pageContent":"Instadapp ArbitrumDeployed addressesBelow are all the addresses of Core Contracts of the DSL ecosystem on Arbitrum:ContractAddressIndex0x1eE00C305C51Ff3bE60162456A9B533C07cD9288InstaList0x3565F6057b7fFE36984779A507fC87b31EFb0f09InstaAccount0x857f3b524317C0C403EC40e01837F1B160F9E7AbInstaConnectors0x67fCE99Dd6d8d659eea2a1ac1b8881c57eb6592BInstaMemory0xc109f7Ef06152c3a63dc7254fD861E612d3Ac571Implementations0xF3Bb2FbdCDa1B8B6d19f513D69462eA548d0eF12List of other Instadapp related address (non core to DSAs):ContractAddressInstaFlashAggregator0x1f882522DF99820dF8e586b6df8bAae2b91a782dInstaFlashResolver0x33D8F735DD64ceC51d212616BCa5Ad9b7769CD34Treasury0xf81AB897E3940E95d749fF2e1F8D38f9b7cBe3cfNetworks and Underlying meaningsIndex: This is the Main Contract for all the DeFi Smart Accounts. Used for creating a new DeFi Smart Account of a user and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account","metadata":{"source":"https://docs.instadapp.io/networks/arbitrum"}},"300":{"pageContent":"and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account address. With this address, an account link is created which is utilised to add and remove accounts from the LinkedList.InstaAccounts: It’s the DeFi Smart Account Wallet. All smart accounts that are created are a clone of this contract.InstaConnectors: Holds a registry of all the Connectors associated with InstaDapp. An array of all the connectors is maintained using their address.InstaMemory: All the data (bytes, uint, address and Storage Id) for the cast function are stored in this contract.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.NetworksAvalancheNetworksFantom","metadata":{"source":"https://docs.instadapp.io/networks/arbitrum"}},"301":{"pageContent":"Instadapp FantomDeployed addressesBelow are all the addresses of Core Contracts of the DSL ecosystem on Fantom:ContractAddressIndex0x2fa042BEEB7A40A7078EaA5aC755e3842248292bInstaList0x10e166c3FAF887D8a61dE6c25039231eE694E926InstaAccount0x1a0862ecA9eAc5028aBdf85bD095fd13a7eebA2fInstaConnectors0x819910794a030403F69247E1e5C0bBfF1593B968InstaMemory0x56439117379A53bE3CC2C55217251e2481B7a1C8Implementations0xF0b36681C9d3ED74227880646De41c4a979AC191List of other Instadapp related address (non core to DSAs):ContractAddressTreasury0x6C4061A00F8739d528b185CC683B6400E0cd396aNetworks and Underlying meaningsIndex: This is the Main Contract for all the DeFi Smart Accounts. Used for creating a new DeFi Smart Account of a user and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account address. With this address, an account link is created which is utilised to add and remove accounts from the LinkedList.InstaAccounts: It’s the DeFi Smart","metadata":{"source":"https://docs.instadapp.io/networks/fantom"}},"302":{"pageContent":"address, a smart account Id is created which is later mapped to get a smart account address. With this address, an account link is created which is utilised to add and remove accounts from the LinkedList.InstaAccounts: It’s the DeFi Smart Account Wallet. All smart accounts that are created are a clone of this contract.InstaConnectors: Holds a registry of all the Connectors associated with InstaDapp. An array of all the connectors is maintained using their address.InstaMemory: All the data (bytes, uint, address and Storage Id) for the cast function are stored in this contract.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.NetworksArbitrumNetworksOptimism","metadata":{"source":"https://docs.instadapp.io/networks/fantom"}},"303":{"pageContent":"Instadapp PolygonDeployed addressesBelow are all the addresses of Core Contracts of the DSL ecosystem on Polygon:ContractAddressIndex0xA9B99766E6C676Cf1975c0D3166F96C0848fF5adInstaList0x839c2D3aDe63DF5b0b8F3E57D5e145057Ab41556InstaAccount0x28846f4051EB05594B3fF9dE76b7B5bf00431155InstaConnectors0x2A00684bFAb9717C21271E0751BCcb7d2D763c88InstaMemory0x6C7256cf7C003dD85683339F75DdE9971f98f2FDInstaImplementations0x39d3d5e7c11D61E072511485878dd84711c19d4AList of other Instadapp related address (non core to DSAs):ContractAddressInstaFlashAggregator0xB2A7F20D10A006B0bEA86Ce42F2524Fde5D6a0F4InstaFlashResolver0xa996699a8f3716FCB5D26652a81b037554128136Treasury0x6e9d36eaeC63Bc3aD4A47fb0d7826A9922AAfC22Networks and Underlying meaningsIndex: This is the Main Contract for all the DeFi Smart Accounts. Used for creating a new DeFi Smart Account of a user and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account","metadata":{"source":"https://docs.instadapp.io/networks/polygon"}},"304":{"pageContent":"and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account address. With this address, an account link is created which is utilised to add and remove accounts from the LinkedList.InstaAccounts: It’s the DeFi Smart Account Wallet. All smart accounts that are created are a clone of this contract.InstaConnectors: Holds a registry of all the Connectors associated with InstaDapp. An array of all the connectors is maintained using their address.InstaMemory: All the data (bytes, uint, address and Storage Id) for the cast function are stored in this contract.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.NetworksMainnetNetworksAvalanche","metadata":{"source":"https://docs.instadapp.io/networks/polygon"}},"305":{"pageContent":"INSTAPOOL-V4 - OptimismInbuilt Flash Loan in DSA\nInstapool-v4 connector on optimism triggers methods like flashBorrowAndCast, flashPayback, flashMultiBorrowAndCast, flashMultiPayback. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.FlashBorrowAndCastBorrow Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashBorrowAndCast\",  args: [token, amt, route, data, extraData]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes\nFlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/instapool-v4"}},"306":{"pageContent":"FlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\ngetId\nuint\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint\nSet token amount at this ID in `InstaMemory` Contract.\nFlashMultiBorrowAndCastBorrow multi-tokens Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashMultiBorrowAndCast\",  args: [tokens_, amts_, route, data, extraData]});Copy to clipboard\nParameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/instapool-v4"}},"307":{"pageContent":"uint[]\nArray of Token Amounts.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes\nFlashMultiPaybackReturn multi-tokens to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashMultiPayback\",  args: [tokens_, amts_, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\ngetIds\nuint[]\nArray of getId token amounts.\nsetIds\nuint[]\nArray of setId token amounts.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismHOP-AOptimismPARASWAP-V5","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/instapool-v4"}},"308":{"pageContent":"Instadapp MainnetDeployed addressesBelow are all the addresses of Core Contracts of the DSL ecosystem on Main-net:ContractAddressIndex0x2971adfa57b20e5a416ae5a708a8655a9c74f723InstaList0x4c8a1BEb8a87765788946D6B19C6C6355194AbEbInstaAccount0xFE02a32Cbe0CB9ad9A945576A5bb53A3C123A3A3InstaConnectors0x97b0B3A8bDeFE8cB9563a3c610019Ad10DB8aD11InstaMemory0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957FImplementations0xCBA828153d3a85b30B5b912e1f2daCac5816aE9DList of other Instadapp related address (non core to DSAs):ContractAddressInstaFlashAggregator0x619Ad2D02dBeE6ebA3CDbDA3F98430410e892882InstaFlashResolver0x10c7B513b7d37f40bdBCE77183b9112ec35CAec1Treasury0x28849D2b63fA8D361e5fc15cB8aBB13019884d09Networks and Underlying meaningsIndex: This is the Main Contract for all the DeFi Smart Accounts. Used for creating a new DeFi Smart Account of a user and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account","metadata":{"source":"https://docs.instadapp.io/networks/mainnet"}},"309":{"pageContent":"and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account address. With this address, an account link is created which is utilised to add and remove accounts from the LinkedList.InstaAccounts: It’s the DeFi Smart Account Wallet. All smart accounts that are created are a clone of this contract.InstaConnectors: Holds a registry of all the Connectors associated with InstaDapp. An array of all the connectors is maintained using their address.InstaMemory: All the data (bytes, uint, address and Storage Id) for the cast function are stored in this contract.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Get StartedCast (smart contract)NetworksPolygon","metadata":{"source":"https://docs.instadapp.io/networks/mainnet"}},"310":{"pageContent":"Instadapp AvalancheDeployed addressesBelow are all the addresses of Core Contracts of the DSL ecosystem on Avalanche:ContractAddressIndex0x6CE3e607C808b4f4C26B7F6aDAeB619e49CAbb25InstaList0x9926955e0Dd681Dc303370C52f4Ad0a4dd061687InstaAccount0x0a0a82D2F86b9E46AE60E22FCE4e8b916F858DdcInstaConnectors0x127d8cD0E2b2E0366D522DeA53A787bfE9002C14InstaMemory0x3254Ce8f5b1c82431B8f21Df01918342215825C2Implementations0x01fEF4d2B513C9F69E34b2f93Ef707FA9Ff60109List of other Instadapp related address (non core to DSAs):ContractAddressInstaFlashAggregator0x2b65731A085B55DBe6c7DcC8D717Ac36c00F6d19InstaFlashResolver0x333733DEedd11Ee40D41Df7b0327bBB57397a1CATreasury0xE06d0b1752E60687C0EA5ABBe006d3368fdCDCC1Networks and Underlying meaningsIndex: This is the Main Contract for all the DeFi Smart Accounts. Used for creating a new DeFi Smart Account of a user and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account","metadata":{"source":"https://docs.instadapp.io/networks/avax"}},"311":{"pageContent":"and to run a cast function in the new smart account.InstaList: Maintains a registry of all the DeFi Smart Account users using a Linked List. Using the user’s address, a smart account Id is created which is later mapped to get a smart account address. With this address, an account link is created which is utilised to add and remove accounts from the LinkedList.InstaAccounts: It’s the DeFi Smart Account Wallet. All smart accounts that are created are a clone of this contract.InstaConnectors: Holds a registry of all the Connectors associated with InstaDapp. An array of all the connectors is maintained using their address.InstaMemory: All the data (bytes, uint, address and Storage Id) for the cast function are stored in this contract.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.NetworksPolygonNetworksArbitrum","metadata":{"source":"https://docs.instadapp.io/networks/avax"}},"312":{"pageContent":"Create ConnectorsConnectors are standard proxy logics contract that let DeFi Smart Account (DSA) interact with various smart contracts, and make the important actions accessible like cross protocol interoperability.DSAs are powerful because they can easily be extended with connectors. Every new connector that is added is immediately usable by any developer building on top of DSAs. Connectors can either be base connectors to protocols, auth connectors, higher level connectors with more specific use cases like optimized lending, or connectors to native liquidity pools.You can create a PR to request a support for specific protocol or external contracts. The process to add a new connector is explained here. Following is the list of all the supported connectors. Following is the list of all the primary connectors used to cast spells:Read this post to learn about getId and setId used in the connectorsHow to add a new connectorYou can create a new PR to add a new connector. To get the PR merged, certain requirements needs to be met which will be explained here.New connector should follow the current directory structureCommon files for all connectors are in","metadata":{"source":"https://docs.instadapp.io/guides/create-connectors"}},"313":{"pageContent":"can create a new PR to add a new connector. To get the PR merged, certain requirements needs to be met which will be explained here.New connector should follow the current directory structureCommon files for all connectors are in contracts/common directory.math.sol has methods for mathematical operations (DSMath)interfaces.sol contains the common interfacesTokenInterface for ERC-20 interface including WETHstores.sol contains the global constants as well as methods getId & setId (Stores)basic.sol inherits DSMath & Stores contracts. This contains few details explained belowWrapping & unwrapping ETH (convertEthToWeth & convertWethToEth)Getting token & ETH balance of DSAConnectors are under contracts/connectors directory, and should be formatted as follows:Connector events should be in a separate contract: events.solInterfaces should be defined in a seperate file: interface.solIf the connector has helper methods & constants (including interface instances), this should be defined in a separate file: helpers.solHelpers contract should inherit Basic contract from common directoryIf the connector doesn't have any helper methods, the main","metadata":{"source":"https://docs.instadapp.io/guides/create-connectors"}},"314":{"pageContent":"& constants (including interface instances), this should be defined in a separate file: helpers.solHelpers contract should inherit Basic contract from common directoryIf the connector doesn't have any helper methods, the main contract should inherit Basic contractThe main logic of the contract should be under main.sol, and the contract should inherit Helpers (if exists, otherwise Basic) & EventsFew things to consider while writing the connector:Connector should have a public string declared name, which will be the name of the connector. This will be versioned. Ex: Compound-v1User interacting methods (external methods) will not be emitting events, rather the methods will be returning 2 variables:_eventName of string type: This will be the event signture defined in the Events contract. Ex: LogDeposit(address,address,uint256,uint256,uint256)_eventParam of bytes type: This will be the abi encoded event parametersThe contracts should not have selfdestruct()The contracts should not have delegatecall()Use uint(-1) for maximum amount everywhereUse ethAddr (declared in Stores) to denote Ethereum (non-ERC20)Use address(this) instead of msg.sender","metadata":{"source":"https://docs.instadapp.io/guides/create-connectors"}},"315":{"pageContent":"should not have selfdestruct()The contracts should not have delegatecall()Use uint(-1) for maximum amount everywhereUse ethAddr (declared in Stores) to denote Ethereum (non-ERC20)Use address(this) instead of msg.sender for fetching balance on-chain, etcOnly approve() limited amount while giving ERC20 allowance, which strictly needs to be 0 by the end of the spell.Use getUint() (declared in Stores) for getting value that saved from previous spellUse setUint() (declared in Stores) for setting value to save for the future spellIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.NetworksOptimismConnectorsArbitrum","metadata":{"source":"https://docs.instadapp.io/guides/create-connectors"}},"316":{"pageContent":"Cast (smart contract)Interact with DSA on smart contract levelThis guide will show you how to interact with DSA on the smart contract level.Quick setuppragma solidity ^0.8.3;import \"hardhat/console.sol\";import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";interface IInstaIndex {    function build(        address _owner,        uint256 _accountVersion,        address _origin    ) external returns (address _account);}interface IDSA {    function cast(        string[] calldata _targetNames,        bytes[] calldata _datas,        address _origin    ) external payable returns (bytes32);}contract InteractingDSA {    IInstaIndex instaIndex = IInstaIndex(0x2971adfa57b20e5a416ae5a708a8655a9c74f723); // this address is only of mainnet.    function buildAndCast(address _owner) external {        // creating an account        address _account = instaIndex.build(_owner, 2, address(0)); // 2 is the most recent DSA version                // encoding data to run multiple things through cast on account        // Depositing in DSA and then deposit in Compound through DSA.        string[] memory _targets = new string[](2);        bytes[] memory _data = new bytes[](2);                _targets[0] = \"BASIC-A\";        _targets[1] = \"COMPOUND-A\";                bytes4 memory","metadata":{"source":"https://docs.instadapp.io/get-started/cast-smart-contract"}},"317":{"pageContent":"cast on account        // Depositing in DSA and then deposit in Compound through DSA.        string[] memory _targets = new string[](2);        bytes[] memory _data = new bytes[](2);                _targets[0] = \"BASIC-A\";        _targets[1] = \"COMPOUND-A\";                bytes4 memory basicDeposit = bytes4(keccak256(\"deposit(address,uint256,uint256,uint256)\"));        bytes4 memory compoundDeposit = bytes4(keccak256(\"deposit(string,uint256,uint256,uint256)\"));                address dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;        uint amtToDeposit = 1e18; // 1 DAI                _data[0] = abi.encodeWithSelector(basicDeposit, dai, amtToDeposit, 0, 0);        _data[1] = abi.encodeWithSelector(compoundDeposit, \"DAI-A\", amtToDeposit, 0, 0);                IDSA(_account).cast(_targets, _data, address(0)); // Magic!!    }}   Copy to clipboardNow we can start interacting with the DSA contract.","metadata":{"source":"https://docs.instadapp.io/get-started/cast-smart-contract"}},"318":{"pageContent":"Go to Networks to find each chain-related address.Go to Networks to find each chain-related address.UsageInstaIndex #This is the Main Contract for all the Defi Smart Accounts. Used to create a new Defi Smart Account for a user and run a cast function in the new smart account.InstaImplementationM1 #This contract contains most core functions of smart account name cast(). It is only called by owners of smart accounts and has full-fledge access over the smart account. Used also to access all the DSA.build(owner, accountVersion, _origin) #Create a DSA Account using this function. It returns the address of the DSA account created.parametertypedescriptionowneraddressOwner of the Smart Accountaccountversionuint256Account Module version_originaddressWhere Smart Account is createdcast(_targets, _datas, _origin) #Using cast() user can access the connectors, which allows the smart account to interact with protocols or set up any settings on the smart account.parametertypedescription_targetstringstring array mentioning connectors, encoded data_datasbytesencoded data containing function abi and paramsDSA SetupInside the interactingDSA contract, we","metadata":{"source":"https://docs.instadapp.io/get-started/cast-smart-contract"}},"319":{"pageContent":"settings on the smart account.parametertypedescription_targetstringstring array mentioning connectors, encoded data_datasbytesencoded data containing function abi and paramsDSA SetupInside the interactingDSA contract, we will create a DSA account and use that to cast a spell.Creating InstaIndex instanceIInstaIndex instaIndex = IInstaIndex(0x2971adfa57b20e5a416ae5a708a8655a9c74f723);Copy to clipboardCreating DSA accountaddress _account = instaIndex.build(_owner, 2, address(0));Copy to clipboardCasting SpellSpells denote a sequence of connector functions that will achieve a given use case. Spells can comprise any number of tasks across any number of connectors. IDSA(_account).cast(_targets, _data, address(0));Copy to clipboardWe create an InstaIplementationM1 contract instance using our DSA account and then cast function to cast the spell.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a","metadata":{"source":"https://docs.instadapp.io/get-started/cast-smart-contract"}},"320":{"pageContent":"or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Get StartedCastNetworksMainnet","metadata":{"source":"https://docs.instadapp.io/get-started/cast-smart-contract"}},"321":{"pageContent":"CastCasting SpellsA \"spell\" denotes a sequence of connector function calls that achieves a particular use case. Spells can comprise of any number of functions across any number of connectors.","metadata":{"source":"https://docs.instadapp.io/get-started/cast"}},"322":{"pageContent":"So, in essence, performing DeFi operations through Instadapp consists of creating a Spell instance to add transactions. This guide shows how you can use spells to perform operations in your dapp.Create a \"Spell\" instance -let spells = dsa.Spell();Copy to clipboardAdd spells for the transactions you want to execute in your dapp to this instance using the add() method. As an example, let's try to execute the following sequence of transactions using casting -Deposit 1 ETH to AaveBorrow 100 DAIDeposit borrowed DAI on Compoundspells.add({  connector: \"AAVE-V2-A\", // ID for AAVE connector  method: \"deposit\",  args: [    \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\", // address to be used for ETH transactions on AAVE    \"1000000000000000000\", // 1 ETH (10^18 wei)    0,    0,  ],});spells.add({  connector: \"AAVE-V2-A\",  method: \"borrow\",  args: [    \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", // DAI token contract address    \"100000000000000000000\",    1, // rateMode - to decide between stable and variable interest rates while borrowing    0,    0,  ],});spells.add({  connector: \"COMPOUND-A\", // ID for Compound connector  method: \"deposit\",  args: [    \"DAI-A\", // DAI token id","metadata":{"source":"https://docs.instadapp.io/get-started/cast"}},"323":{"pageContent":"1, // rateMode - to decide between stable and variable interest rates while borrowing    0,    0,  ],});spells.add({  connector: \"COMPOUND-A\", // ID for Compound connector  method: \"deposit\",  args: [    \"DAI-A\", // DAI token id    \"100000000000000000000\",    0,    0,  ],});Copy to clipboardFor more details on the arguments required for various methods in connectors, refer to the connector docs of the respective protocol (Connector docs - here).Note: Make sure your account has enough ETH (and ERC20) balance before executing transactions.Finally, we execute the added spells using the cast() method.// in async functionslet transactionHash = await spells.cast();// orspells.cast().then(console.log); // returns transaction hashCopy to clipboardYou can also pass an object to send optional parameters like sending ETH along with transaction.spells.cast({  gasPrice: web3.utils.toWei(gasPrice, \"gwei\"), // in gwei, required in node implementation.  value: \"1000000000000000000\", // sending 1 Eth along the transaction.  nonce: nonce,});Copy to clipboardBelow is a list of all (optional) parameters you can pass with the cast() method","metadata":{"source":"https://docs.instadapp.io/get-started/cast"}},"324":{"pageContent":"// in gwei, required in node implementation.  value: \"1000000000000000000\", // sending 1 Eth along the transaction.  nonce: nonce,});Copy to clipboardBelow is a list of all (optional) parameters you can pass with the cast() method -ParameterTypeDescriptiongasPricestring/numberThe gas price in gwei. Required in NodeJs implementation to configure the transaction confirmation speed.valuestring/numberThe amount of ETH you want to send along with the transactions (in wei).noncestring/numberNonce of your sender account. Mostly used in Node implementation to send transactions with a particular nonce either to override unconfirmed transaction or some other purpose.This will send the transaction to blockchain in node implementation (or ask users to confirm the transaction on web3 wallet like Metamask).Check out the FAQs section for more details on these functions.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better","metadata":{"source":"https://docs.instadapp.io/get-started/cast"}},"325":{"pageContent":"any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Get StartedSetup AccountGet StartedCast (smart contract)","metadata":{"source":"https://docs.instadapp.io/get-started/cast"}},"326":{"pageContent":"Setup AccountDeFi Smart Account SetupEvery user needs to create a Smart Account to interact with DeFi protocols through Instadapp. These DeFi Smart Accounts (DSAs) allow developers to build extensible use-cases with maximum security and composability. It is also possible to create multiple DSAs for a single ethereum address.The protocol provides three methods pertaining to setting up a DSA -Create a Smart Account - build()Fetch all Smart Accounts owned by an ethereum address - getAccounts()Set a Smart Account to be used for function calls - setInstance()build()Used to create a new DSA account. For an already created account, you can use the setInstance() method to activate the particular DSA to start casting spells.// in async functionsawait dsa.build();// ordsa.build().then(console.log);Copy to clipboardFor implementations on NodeJs, it is required to pass the otherwise optional gasPrice parameter as well. There are also some other optional parameters that can be passed to the method as shown below -dsa.build({  gasPrice: gasPrice // estimated gas price  origin: origin,  authority: authority,  version: 2})Copy to clipboardAll the parameters that this","metadata":{"source":"https://docs.instadapp.io/get-started/setup"}},"327":{"pageContent":"some other optional parameters that can be passed to the method as shown below -dsa.build({  gasPrice: gasPrice // estimated gas price  origin: origin,  authority: authority,  version: 2})Copy to clipboardAll the parameters that this method accepts are listed below -ParameterTypeDescriptiongasPricestring/numberThe gas price in gwei. Mostly used in Node implementations to configure the transaction confirmation speed.originaddressThe address to track the origin of the transaction. Used for analytics and affiliates.authorityaddressThe address to be added as the DSA authority.fromaddressThe account with which you want to create your DSA. This is helpful to create DSA for other addresses.noncestring/numberNonce of your sender account. Mostly used in Node implementation to send transaction with a particular nonce either to override unconfirmed transaction or for other purposes.versionnumberThe version of DSA to use (it is recommended to use version 2 which is latest)The method returns the hash of the transaction and creates a uniquely numbered Smart Account which acts as a proxy to interact with verified DeFi protocols. Each DSA has a unique ethereum","metadata":{"source":"https://docs.instadapp.io/get-started/setup"}},"328":{"pageContent":"(it is recommended to use version 2 which is latest)The method returns the hash of the transaction and creates a uniquely numbered Smart Account which acts as a proxy to interact with verified DeFi protocols. Each DSA has a unique ethereum address.getAccounts()Used to fetch all accounts owned by an ethereum address.// in async functionsawait dsa.getAccounts(address);// ordsa.getAccounts(address).then(console.log);Copy to clipboardParameterTypeDescription addressaddressThe ethereum address for which the list of held DSA accounts is required.The method returns an array of objects with all the DSA accounts which have the passed address as one of their authorities:[  {      id: 52, // DSA ID      address: \"0x...\", // DSA Address      version: 2 // DSA protocol version  },  ...]Copy to clipboardsetInstance()setInstance() method is used to configure global values and use the account having the dsaId equal to the passed Id for all subsequent operations.dsa.setInstance(dsaId); // DSA IDCopy to clipboardParametersTypeDescriptiondsaIdnumberThe DSA Id to be used for casting spells.If you still can't find something you're looking for or have any questions, ask them at our","metadata":{"source":"https://docs.instadapp.io/get-started/setup"}},"329":{"pageContent":"operations.dsa.setInstance(dsaId); // DSA IDCopy to clipboardParametersTypeDescriptiondsaIdnumberThe DSA Id to be used for casting spells.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Get StartedInstallationGet StartedCast","metadata":{"source":"https://docs.instadapp.io/get-started/setup"}},"330":{"pageContent":"InstallationQuickly get up and running with DSA platformInteracting with DeFi shouldn't be hard. That's why this SDK exists.To get started, install the DSA Connect package from npm:npm install dsa-connectCopy to clipboardFor browsers, via jsDelivr CDN:<script src=\"https://cdn.jsdelivr.net/npm/dsa-connect@latest/dist/index.bundle.min.js\"></script>Copy to clipboardUsageTo enable web3 calls via SDK, instantiate web3 library// in browserif (window.ethereum) {  window.web3 = new Web3(window.ethereum)} else if (window.web3) {  window.web3 = new Web3(window.web3.currentProvider)} else {  window.web3 = new Web3(customProvider)}Copy to clipboard// in nodejsconst Web3 = require('web3')const DSA = require('dsa-connect');const web3 = new Web3(new Web3.providers.HttpProvider(ETH_NODE_URL))Copy to clipboardNow instantiate DSA with web3 instance.// in browserconst dsa = new DSA(web3);const chainId = 1; // Mainnet chainId// in nodejsconst dsa = new DSA({    web3: web3,    mode: \"node\",    privateKey: PRIVATE_KEY  },    chainId);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers","metadata":{"source":"https://docs.instadapp.io/get-started/installation"}},"331":{"pageContent":"1; // Mainnet chainId// in nodejsconst dsa = new DSA({    web3: web3,    mode: \"node\",    privateKey: PRIVATE_KEY  },    chainId);Copy to clipboardIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OverviewGet StartedSetup Account","metadata":{"source":"https://docs.instadapp.io/get-started/installation"}},"332":{"pageContent":"Authority - OptimismManage Authorities to DSA.\nAuth-v1.1 connector on optimism triggers methods like add, remove. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.AddAdd an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"add\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nRemoveRemove an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"remove\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/authority"}},"333":{"pageContent":"Parameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismAave V3OptimismBasic B (ERC721)","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/authority"}},"334":{"pageContent":"0x - OptimismOn-chain DEX Aggregator.\n0x-V4 connector on optimism triggers methods like swap. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens on 0xspells.add({  connector: \"ZEROX-A\",  method: \"swap\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 0x API.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/0x"}},"335":{"pageContent":"sellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 0x API.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ConnectorsOptimismOptimism1INCH-V4","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/0x"}},"336":{"pageContent":"Aave V3 Rewards - OptimismClaim Aave v3 rewards.\nAave-V3-Incentives-v1 connector on optimism triggers methods like claim, claimAll. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ClaimClaim Pending Rewards from Aave v3 incentives contract.spells.add({  connector: \"AAVE-V3-CLAIM-A\",  method: \"claim\",  args: [assets, amt, reward, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nassets\naddress[]\nThe list of assets supplied and borrowed.\namt\nuint256\nThe amount of reward to claim. (uint(-1) for max)\nreward\naddress\nThe address of reward token to claim.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of rewards claimed.\nClaimAllClaim All Pending Rewards from Aave v3 incentives contract.spells.add({  connector: \"AAVE-V3-CLAIM-A\",  method: \"claimAll\",  args: [assets]});Copy to clipboard\nParameter","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3-rewards"}},"337":{"pageContent":"ClaimAllClaim All Pending Rewards from Aave v3 incentives contract.spells.add({  connector: \"AAVE-V3-CLAIM-A\",  method: \"claimAll\",  args: [assets]});Copy to clipboard\nParameter\nType\nDescription\nassets\naddress[]\nThe list of assets supplied and borrowed.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismAave V3 ImportOptimismAave V3","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3-rewards"}},"338":{"pageContent":"PARASWAP-V5 - OptimismDEX Aggregator.\nParaswap-v5 connector on optimism triggers methods like swap. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"PARASWAP-A\",  method: \"swap\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from paraswap API.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/paraswap"}},"339":{"pageContent":"sellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from paraswap API.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismINSTAPOOL-V4OptimismSWAP-AGGREGATOR-A","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/paraswap"}},"340":{"pageContent":"0x - ArbitrumOn-chain DEX Aggregator.\n0x-V4 connector on arbitrum triggers methods like swap. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens on 0xspells.add({  connector: \"ZEROX-V4-A\",  method: \"swap\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 0x API.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/0x"}},"341":{"pageContent":"sellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 0x API.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ConnectorsArbitrumArbitrum1INCH-V4","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/0x"}},"342":{"pageContent":"Basic C (ERC1155) - ArbitrumDeposit & Withdraw from ERC1155 DSA.\nBASIC-ERC1155-v1.0 connector on arbitrum triggers methods like depositERC1155, withdrawERC1155. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC1155Deposit a ERC1155 token to DSAspells.add({  connector: \"BASIC-C\",  method: \"depositERC1155\",  args: [token, tokenId, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\namount\nuint256\nAmount to deposit.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nWithdrawERC1155Withdraw a ERC1155 token from DSAspells.add({  connector: \"BASIC-C\",  method: \"withdrawERC1155\",  args: [token, tokenId, to, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/basic-c"}},"343":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\namount\nuint256\nAmount to withdraw.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumBasic B (ERC721)ArbitrumBasic A (ERC20)","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/basic-c"}},"344":{"pageContent":"Uniswap V3 Staker - ArbitrumDecentralized Exchange.\nUniswap-V3-Staker-v1.2 connector on arbitrum triggers methods like deposit, depositAndStake, transferDeposit, withdraw, stake, unstake, claimRewards, createIncentive. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositTransfer deposited NFT tokenspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"deposit\",  args: [_tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\nDepositAndStakeTo Deposit and Stake NFT for Stakingspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"depositAndStake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswap-v3-staker"}},"345":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nTransferDepositTransfer deposited NFT tokenspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"transferDeposit\",  args: [_tokenId, _to]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\n_to\naddress\naddress to transfer\nWithdrawWithdraw NFT LP token from staking poolspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"withdraw\",  args: [_tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\nStakeStake NFT LP Positionspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"stake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswap-v3-staker"}},"346":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nUnstakeUnstake NFT LP Positionspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"unstake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nClaimRewardsClaim rewardsspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"claimRewards\",  args: [_rewardToken, _amount]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_amount\nuint256\nrequested amount\nCreateIncentiveCreate incentivespells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"createIncentive\",  args: [_rewardToken, _startTime, _endTime, _refundee, _poolAddr, _reward]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswap-v3-staker"}},"347":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_poolAddr\naddress\nUniswap V3 Pool address\n_reward\nuint256\nreward amount\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumUNISWAP-V3-ROUTERArbitrumUniswap V3","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswap-v3-staker"}},"348":{"pageContent":"Basic B (ERC721) - ArbitrumDeposit & Withdraw ERC721 from DSA.\nBASIC-ERC721-v1.0 connector on arbitrum triggers methods like depositERC721, withdrawERC721. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC721Deposit a ERC721 token to DSAspells.add({  connector: \"BASIC-B\",  method: \"depositERC721\",  args: [token, tokenId, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nWithdrawERC721Withdraw a ERC721 token from DSAspells.add({  connector: \"BASIC-B\",  method: \"withdrawERC721\",  args: [token, tokenId, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/basic-b"}},"349":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumAuthorityArbitrumBasic C (ERC1155)","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/basic-b"}},"350":{"pageContent":"SWAP-AGGREGATOR-A - ArbitrumSwap integration for DEX Aggregators.\nSwap-Aggregator-v1 connector on arbitrum triggers methods like swap. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens from exchanges like 1INCH, 0x etc, with calculation done off-chain.spells.add({  connector: \"SWAP-AGGREGATOR-A\",  method: \"swap\",  args: [_connectors, _datas]});Copy to clipboard\nParameter\nType\nDescription\n_connectors\nstring[]\nThe name of the connectors like 1INCH-A, 0x etc, in order of their priority.\n_datas\nbytes[]\nEncoded function call data including function selector encoded with parameters.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/swap-aggregator"}},"351":{"pageContent":"Description\n_connectors\nstring[]\nThe name of the connectors like 1INCH-A, 0x etc, in order of their priority.\n_datas\nbytes[]\nEncoded function call data including function selector encoded with parameters.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumSUSHISWAPArbitrumUNISWAP-V3-SWAP-A","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/swap-aggregator"}},"352":{"pageContent":"UNISWAP-V3-ROUTER  - ArbitrumDEX.\nUniswapV3-Auto-Router-v1 connector on arbitrum triggers methods like sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SellSwap tokens from getting an optimized trade routesspells.add({  connector: \"UNISWAP-V3-ROUTER-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from Uniswap V3 auto router SDK.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswap-v3-router"}},"353":{"pageContent":"uint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from Uniswap V3 auto router SDK.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumUNISWAP-V3-SWAP-AArbitrumUniswap V3 Staker","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswap-v3-router"}},"354":{"pageContent":"Aave V3 Import - ArbitrumImport EOA's aave V3 position to DSA's aave v3 position\nAave-v3-import-v1.1 connector on arbitrum triggers methods like importAave, importAaveWithCollateral. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportAaveImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-A\",  method: \"importAave\",  args: [userAccount, inputData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3-import"}},"355":{"pageContent":"Parameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nImportAaveWithCollateralImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-A\",  method: \"importAaveWithCollateral\",  args: [userAccount, inputData, enableCollateral]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3-import"}},"356":{"pageContent":"inputData\nImportInputData\nThe struct containing all the neccessary input data\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumAave V3 Import (permit)ArbitrumAave V3","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3-import"}},"357":{"pageContent":"HOP-A - ArbitrumCross chain Bridge.\nHop-v1.0 connector on arbitrum triggers methods like bridge. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.BridgeBridge Token on HOP.spells.add({  connector: \"HOP-A\",  method: \"bridge\",  args: [params, getId]});Copy to clipboard\nParameter\nType\nDescription\nparams\nBridgeParams\nBridgeParams struct for bridging\ngetId\nuint256\nID to retrieve amount from last spell.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumDSA SpellArbitrumINSTAPOOL-V4","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/hop"}},"358":{"pageContent":"Basic C (ERC1155) - OptimismDeposit & Withdraw from ERC1155 DSA.\nBASIC-ERC1155-v1.0 connector on optimism triggers methods like depositERC1155, withdrawERC1155. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC1155Deposit a ERC1155 token to DSAspells.add({  connector: \"BASIC-C\",  method: \"depositERC1155\",  args: [token, tokenId, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\namount\nuint256\nAmount to deposit.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nWithdrawERC1155Withdraw a ERC1155 token from DSAspells.add({  connector: \"BASIC-C\",  method: \"withdrawERC1155\",  args: [token, tokenId, to, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/basic-c"}},"359":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\namount\nuint256\nAmount to withdraw.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismBasic B (ERC721)OptimismBasic A (ERC20)","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/basic-c"}},"360":{"pageContent":"UNISWAP-V3-SWAP-A - ArbitrumDecentralized Exchange.\nUniswapV3-Swap-v1 connector on arbitrum triggers methods like buy, sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.BuySwap token(sellAddr) with token(buyAddr), buy token with minimum sell tokenspells.add({  connector: \"UNISWAP-V3-SWAP-A\",  method: \"buy\",  args: [_buyAddr, _sellAddr, _fee, _unitAmt, _buyAmt, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_buyAddr\naddress\ntoken to be bought\n_sellAddr\naddress\ntoken to be sold\n_fee\nuint24\npool fees for buyAddr-sellAddr token pair\n_unitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage\n_buyAmt\nuint256\namount of token to be bought\n_getId\nuint256\nId to get buyAmt\n_setId\nuint256\nId to store sellAmt","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswap-swap"}},"361":{"pageContent":"_unitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage\n_buyAmt\nuint256\namount of token to be bought\n_getId\nuint256\nId to get buyAmt\n_setId\nuint256\nId to store sellAmt\nSellSwap token(sellAddr) with token(buyAddr), buy token with minimum sell tokenspells.add({  connector: \"UNISWAP-V3-SWAP-A\",  method: \"sell\",  args: [_buyAddr, _sellAddr, _fee, _unitAmt, _sellAmt, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_buyAddr\naddress\ntoken to be bought\n_sellAddr\naddress\ntoken to be sold\n_fee\nuint24\npool fees for buyAddr-sellAddr token pair\n_unitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage\n_sellAmt\nuint256\namount of token to be sold\n_getId\nuint256\nId to get sellAmt\n_setId\nuint256\nId to store buyAmt","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswap-swap"}},"362":{"pageContent":"_unitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage\n_sellAmt\nuint256\namount of token to be sold\n_getId\nuint256\nId to get sellAmt\n_setId\nuint256\nId to store buyAmt\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumSWAP-AGGREGATOR-AArbitrumUNISWAP-V3-ROUTER","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswap-swap"}},"363":{"pageContent":"1INCH-V4 - ArbitrumOn-chain DEX Aggregator.\n1Inch-v4 connector on arbitrum triggers methods like sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SellSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"1INCH-V4-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/1inch-v4"}},"364":{"pageContent":"sellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Arbitrum0xArbitrumAave V3 Import (permit)","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/1inch-v4"}},"365":{"pageContent":"Uniswap V3 - ArbitrumDecentralized Exchange.\nUniswapV3-v1 connector on arbitrum triggers methods like mint, deposit, withdraw, collect, burn. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.MintMint New NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"mint\",  args: [tokenA, tokenB, fee, tickLower, tickUpper, amtA, amtB, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\ntokenA addreess\ntokenB\naddress\ntokenB addreess\nfee\nuint24\nfee percentage\ntickLower\nint24\nLower tick\ntickUpper\nint24\nUpper tick\namtA\nuint256\namount of tokenA\namtB\nuint256\namount of tokenB\nslippage\nuint256\nslippage percentage\ngetIds\nuint256[]\nID to retrieve amtA\nsetId\nuint256\nID stores the amount of LP token","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswapv3"}},"366":{"pageContent":"Lower tick\ntickUpper\nint24\nUpper tick\namtA\nuint256\namount of tokenA\namtB\nuint256\namount of tokenB\nslippage\nuint256\nslippage percentage\ngetIds\nuint256[]\nID to retrieve amtA\nsetId\nuint256\nID stores the amount of LP token\nDepositIncrease Liquidity of NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"deposit\",  args: [tokenId, amountA, amountB, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\namountA\nuint256\ntokenA amounts.\namountB\nuint256\ntokenB amounts.\nslippage\nuint256\nslippage.\ngetIds\nuint256[]\nIDs to retrieve token amounts\nsetId\nuint256\nstores the liquidity amount\nWithdrawDecrease Liquidity of NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"withdraw\",  args: [tokenId, liquidity, amountAMin, amountBMin, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\nliquidity\nuint256\nLP Token amount.\namountAMin\nuint256\nMin amount of tokenA.\namountBMin\nuint256\nMin amount of tokenB.\ngetId\nuint256\nID to retrieve LP token amounts","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswapv3"}},"367":{"pageContent":"Type\nDescription\ntokenId\nuint256\nNFT LP Token ID.\nliquidity\nuint256\nLP Token amount.\namountAMin\nuint256\nMin amount of tokenA.\namountBMin\nuint256\nMin amount of tokenB.\ngetId\nuint256\nID to retrieve LP token amounts\nsetIds\nuint256[]\nstores the amount of output tokens\nCollectCollect from NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"collect\",  args: [tokenId, amount0Max, amount1Max, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\namount0Max\nuint256\nMax amount of token0.\namount1Max\nuint256\nMax amount of token1.\ngetIds\nuint256[]\nIDs to retrieve amounts\nsetIds\nuint256[]\nstores the amount of output tokens\nBurnBurn NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"burn\",  args: [tokenId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswapv3"}},"368":{"pageContent":"BurnBurn NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"burn\",  args: [tokenId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumUniswap V3 StakerArbitrumWETH","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/uniswapv3"}},"369":{"pageContent":"DSA Spell - ArbitrumCast spells on DSA.\nDSA-Spell-v1.0 connector on arbitrum triggers methods like castOnDSA, castAny. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.CastOnDSAInteract with a target DSA by casting spells on it.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castOnDSA\",  args: [targetDSA, connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\ntargetDSA\naddress\ntarget DSA to cast spells on.\nconnectors\nstring[]\nArray of connector names (For example, [\"1INCH-A\", \"BASIC-A\"]).\ndatas\nbytes[]\nArray of connector calldatas (function selectors encoded with parameters).\nCastAnyCasts the first successful spell on the DSA.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castAny\",  args: [connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\nconnectors\nstring[]","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/dsa-spell"}},"370":{"pageContent":"CastAnyCasts the first successful spell on the DSA.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castAny\",  args: [connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\nconnectors\nstring[]\nArray of connector names, in preference order, if any (For example, [\"1INCH-A\", \"ZEROX-A\"]).\ndatas\nbytes[]\nArray of connector calldatas (function selectors encoded with parameters).\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumBasic A (ERC20)ArbitrumHOP-A","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/dsa-spell"}},"371":{"pageContent":"Aave V3 - ArbitrumLending & Borrowing.\nAaveV3-v1.2 connector on arbitrum triggers methods like deposit, depositWithoutCollateral, withdraw, borrow, borrowOnBehalfOf, payback, paybackWithATokens, paybackOnBehalfOf, enableCollateral, disableCollateral, swapBorrowRateMode, setUserEMode, delegateBorrow. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Aave v2 for lending / collaterization.spells.add({  connector: \"AAVE-V3-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3"}},"372":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositWithoutCollateralDeposit a token to Aave v3 without enabling it as collateral.spells.add({  connector: \"AAVE-V3-A\",  method: \"depositWithoutCollateral\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v2spells.add({  connector: \"AAVE-V3-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3"}},"373":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token using Aave v2spells.add({  connector: \"AAVE-V3-A\",  method: \"borrow\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of debt. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowOnBehalfOfBorrow a token using Aave v3 on behalf of a userspells.add({  connector: \"AAVE-V3-A\",  method: \"borrowOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3"}},"374":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of debt. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nThe user who will incur the debt\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackPayback debt owed.spells.add({  connector: \"AAVE-V3-A\",  method: \"payback\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3"}},"375":{"pageContent":"rateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackWithATokensRepays a borrowed amount on a specific reserve using the reserve aTokens, burning the equivalent debt tokens.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackWithATokens\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfOfPayback debt owed on behalf os a user.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3"}},"376":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nAddress of user who's debt to repay.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nEnableCollateralEnable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"enableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral\nDisableCollateralDisable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"disableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to disable as collateral","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3"}},"377":{"pageContent":"Parameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to disable as collateral\nSwapBorrowRateModeSwaps user borrow rate mode between variable and stablespells.add({  connector: \"AAVE-V3-A\",  method: \"swapBorrowRateMode\",  args: [token, rateMode]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256\ncurrent rate mode. (Stable = 1, Variable = 2)\nSetUserEModeUpdates the user's e-mode categoryspells.add({  connector: \"AAVE-V3-A\",  method: \"setUserEMode\",  args: [categoryId]});Copy to clipboard\nParameter\nType\nDescription\ncategoryId\nuint8\nThe category Id of the e-mode user want to set\nDelegateBorrowGives approval to delegate debt tokensspells.add({  connector: \"AAVE-V3-A\",  method: \"delegateBorrow\",  args: [token, amount, rateMode, delegateTo, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256\nThe type of debt","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3"}},"378":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256\nThe type of debt\ndelegateTo\naddress\nThe address to whom the user is delegating\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens delegated.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumAave V3 ImportArbitrumAuthority","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3"}},"379":{"pageContent":"Basic A (ERC20) - ArbitrumDeposit & Withdraw from DSA.\nBasic-v1.1 connector on arbitrum triggers methods like deposit, depositFrom, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to DSAspells.add({  connector: \"BASIC-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)` (Not valid for MATIC))\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositFromDeposit a token to DSA from any user.spells.add({  connector: \"BASIC-A\",  method: \"depositFrom\",  args: [token, amt, from, getId, setId]});Copy to clipboard\nParameter\nType","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/basic"}},"380":{"pageContent":"DepositFromDeposit a token to DSA from any user.spells.add({  connector: \"BASIC-A\",  method: \"depositFrom\",  args: [token, amt, from, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (Note: ETH is not supported. Use `deposit()`)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\nfrom\naddress\nThe address depositing the token.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw a token from DSAspells.add({  connector: \"BASIC-A\",  method: \"withdraw\",  args: [token, amt, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/basic"}},"381":{"pageContent":"The amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumBasic C (ERC1155)ArbitrumDSA Spell","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/basic"}},"382":{"pageContent":"Aave V3 Import (permit) - ArbitrumImport EOA's aave V3 position to DSA's aave v3 position\nAave-v3-import-permit-v1.1 connector on arbitrum triggers methods like importAave, importAaveWithCollateral. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportAaveImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-PERMIT-A\",  method: \"importAave\",  args: [userAccount, inputData, permitData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3-import-with-permit"}},"383":{"pageContent":"inputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nImportAaveWithCollateralImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-PERMIT-A\",  method: \"importAaveWithCollateral\",  args: [userAccount, inputData, permitData, enableCollateral]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3-import-with-permit"}},"384":{"pageContent":"permitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Arbitrum1INCH-V4ArbitrumAave V3 Import","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/aave-v3-import-with-permit"}},"385":{"pageContent":"WETH - ArbitrumWrap and Unwrap WETH.\nWETH-v1.0 connector on arbitrum triggers methods like deposit, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositWrap ETH into WETHspells.add({  connector: \"WETH-A\",  method: \"deposit\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of ETH to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of ETH deposited.\nWithdrawUnwrap ETH from WETHspells.add({  connector: \"WETH-A\",  method: \"withdraw\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint\nThe amount of weth to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of ETH withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/weth"}},"386":{"pageContent":"Parameter\nType\nDescription\namt\nuint\nThe amount of weth to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of ETH withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumUniswap V3ConnectorsAvalanche","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/weth"}},"387":{"pageContent":"SUSHISWAP - ArbitrumDecentralized Exchange.\nSushiswap-v1 connector on arbitrum triggers methods like deposit, withdraw, buy, sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit Liquidity to a SushiSwap pool.spells.add({  connector: \"SUSHISWAP-A\",  method: \"deposit\",  args: [tokenA, tokenB, amtA, unitAmt, slippage, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namtA\nuint256\nThe amount of A tokens to deposit.\nunitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/sushiswap"}},"388":{"pageContent":"unitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.\nWithdrawWithdraw Liquidity from a SushiSwap pool.spells.add({  connector: \"SUSHISWAP-A\",  method: \"withdraw\",  args: [tokenA, tokenB, uniAmt, unitAmtA, unitAmtB, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nuniAmt\nuint256\nThe amount of pool tokens to withdraw.\nunitAmtA\nuint256\nThe unit amount of amtA/uniAmt with slippage.\nunitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/sushiswap"}},"389":{"pageContent":"unitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.\nBuyBuy a token using a SushiSwapspells.add({  connector: \"SUSHISWAP-A\",  method: \"buy\",  args: [buyAddr, sellAddr, buyAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nbuyAmt\nuint256\nThe amount of tokens to buy.\nunitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage.\ngetId\nuint256\nID to retrieve buyAmt.\nsetId\nuint256\nID to store the amount of tokens sold.\nSellSell a token using a SushiSwapspells.add({  connector: \"SUSHISWAP-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/sushiswap"}},"390":{"pageContent":"Parameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage.\ngetId\nuint256\nID to retrieve sellAmt.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumINSTAPOOL-V4ArbitrumSWAP-AGGREGATOR-A","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/sushiswap"}},"391":{"pageContent":"INSTAPOOL-V4 - ArbitrumInbuilt Flash Loan in DSA\nInstapool-v4 connector on arbitrum triggers methods like flashBorrowAndCast, flashPayback, flashMultiBorrowAndCast, flashMultiPayback. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.FlashBorrowAndCastBorrow Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashBorrowAndCast\",  args: [token, amt, route, data, extraData]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes\nFlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/instapool-v4"}},"392":{"pageContent":"FlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\ngetId\nuint\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint\nSet token amount at this ID in `InstaMemory` Contract.\nFlashMultiBorrowAndCastBorrow multi-tokens Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashMultiBorrowAndCast\",  args: [tokens_, amts_, route, data, extraData]});Copy to clipboard\nParameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/instapool-v4"}},"393":{"pageContent":"uint[]\nArray of Token Amounts.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes\nFlashMultiPaybackReturn multi-tokens to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashMultiPayback\",  args: [tokens_, amts_, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\ngetIds\nuint[]\nArray of getId token amounts.\nsetIds\nuint[]\nArray of setId token amounts.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumHOP-AArbitrumSUSHISWAP","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/instapool-v4"}},"394":{"pageContent":"Uniswap V3 Staker - OptimismDecentralized Exchange.\nUniswap-V3-Staker-v1.2 connector on optimism triggers methods like deposit, depositAndStake, transferDeposit, withdraw, stake, unstake, claimRewards, createIncentive. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositTransfer deposited NFT tokenspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"deposit\",  args: [_tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\nDepositAndStakeTo Deposit and Stake NFT for Stakingspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"depositAndStake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap-v3-staker"}},"395":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nTransferDepositTransfer deposited NFT tokenspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"transferDeposit\",  args: [_tokenId, _to]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\n_to\naddress\naddress to transfer\nWithdrawWithdraw NFT LP token from staking poolspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"withdraw\",  args: [_tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\nStakeStake NFT LP Positionspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"stake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap-v3-staker"}},"396":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nUnstakeUnstake NFT LP Positionspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"unstake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nClaimRewardsClaim rewardsspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"claimRewards\",  args: [_rewardToken, _amount]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_amount\nuint256\nrequested amount\nCreateIncentiveCreate incentivespells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"createIncentive\",  args: [_rewardToken, _startTime, _endTime, _refundee, _poolAddr, _reward]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap-v3-staker"}},"397":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_poolAddr\naddress\nUniswap V3 Pool address\n_reward\nuint256\nreward amount\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismUNISWAP-V3-ROUTEROptimismUNISWAP-V3-A","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap-v3-staker"}},"398":{"pageContent":"Authority - ArbitrumManage Authorities to DSA.\nAuth-v1 connector on arbitrum triggers methods like add, remove. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.AddAdd an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"add\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nRemoveRemove an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"remove\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/authority"}},"399":{"pageContent":"Parameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ArbitrumAave V3ArbitrumBasic B (ERC721)","metadata":{"source":"https://docs.instadapp.io/connectors/arbitrum/authority"}},"400":{"pageContent":"Basic C (ERC1155) - FantomDeposit & Withdraw from ERC1155 DSA.\nBASIC-ERC1155-v1.0 connector on fantom triggers methods like depositERC1155, withdrawERC1155. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC1155Deposit a ERC1155 token to DSAspells.add({  connector: \"BASIC-C\",  method: \"depositERC1155\",  args: [token, tokenId, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\namount\nuint256\nAmount to deposit.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nWithdrawERC1155Withdraw a ERC1155 token from DSAspells.add({  connector: \"BASIC-C\",  method: \"withdrawERC1155\",  args: [token, tokenId, to, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/basic-c"}},"401":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\namount\nuint256\nAmount to withdraw.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FantomBasic B (ERC721)FantomBasic A (ERC20)","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/basic-c"}},"402":{"pageContent":"Basic B (ERC721) - FantomDeposit & Withdraw ERC721 from DSA.\nBASIC-ERC721-v1.0 connector on fantom triggers methods like depositERC721, withdrawERC721. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC721Deposit a ERC721 token to DSAspells.add({  connector: \"BASIC-B\",  method: \"depositERC721\",  args: [token, tokenId, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nWithdrawERC721Withdraw a ERC721 token from DSAspells.add({  connector: \"BASIC-B\",  method: \"withdrawERC721\",  args: [token, tokenId, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/basic-b"}},"403":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FantomAuthorityFantomBasic C (ERC1155)","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/basic-b"}},"404":{"pageContent":"SWAP-AGGREGATOR-A - FantomSwap integration for DEX Aggregators.\nSwap-Aggregator-v1 connector on fantom triggers methods like swap. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens from exchanges like 1INCH, 0x etc, with calculation done off-chain.spells.add({  connector: \"SWAP-AGGREGATOR-A\",  method: \"swap\",  args: [_connectors, _datas]});Copy to clipboard\nParameter\nType\nDescription\n_connectors\nstring[]\nThe name of the connectors like 1INCH-A, 0x etc, in order of their priority.\n_datas\nbytes[]\nEncoded function call data including function selector encoded with parameters.","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/swap-aggregator"}},"405":{"pageContent":"Description\n_connectors\nstring[]\nThe name of the connectors like 1INCH-A, 0x etc, in order of their priority.\n_datas\nbytes[]\nEncoded function call data including function selector encoded with parameters.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FantomPARASWAP-V5FantomWFTM","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/swap-aggregator"}},"406":{"pageContent":"Aave V3 Import - FantomImport EOA's aave V3 position to DSA's aave v3 position\nAave-v3-import-v1.1 connector on fantom triggers methods like importAave, importAaveWithCollateral. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportAaveImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-A\",  method: \"importAave\",  args: [userAccount, inputData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3-import"}},"407":{"pageContent":"Parameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nImportAaveWithCollateralImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-A\",  method: \"importAaveWithCollateral\",  args: [userAccount, inputData, enableCollateral]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3-import"}},"408":{"pageContent":"inputData\nImportInputData\nThe struct containing all the neccessary input data\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Fantom1INCH-V4FantomAave V3","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3-import"}},"409":{"pageContent":"1INCH-V4 - FantomOn-chain DEX Aggregator.\n1Inch-v4 connector on fantom triggers methods like oneInchSwap, _sell, sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.OneInchSwapspells.add({  connector: \"1INCH-A\",  method: \"oneInchSwap\",  args: [oneInchData, ftmAmt]});Copy to clipboard\nParameter\nType\nDescription\noneInchData\nOneInchData\n- contains data returned from 1inch API. Struct defined in interfaces.sol\nftmAmt\nuint256\n- Ftm to swap for .value()\n_sellspells.add({  connector: \"1INCH-A\",  method: \"_sell\",  args: [oneInchData, setId]});Copy to clipboard\nParameter\nType\nDescription\noneInchData\nOneInchData\nStruct with multiple swap data defined in interfaces.sol\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/1inch-v4"}},"410":{"pageContent":"Parameter\nType\nDescription\noneInchData\nOneInchData\nStruct with multiple swap data defined in interfaces.sol\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.\nSellSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"1INCH-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For FTM: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For FTM: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/1inch-v4"}},"411":{"pageContent":"sellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ConnectorsFantomFantomAave V3 Import","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/1inch-v4"}},"412":{"pageContent":"DSA Spell - FantomCast spells on DSA.\nDSA-Spell-v1.0 connector on fantom triggers methods like castOnDSA, castAny. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.CastOnDSAInteract with a target DSA by casting spells on it.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castOnDSA\",  args: [targetDSA, connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\ntargetDSA\naddress\ntarget DSA to cast spells on.\nconnectors\nstring[]\nArray of connector names (For example, [\"1INCH-A\", \"BASIC-A\"]).\ndatas\nbytes[]\nArray of connector calldatas (function selectors encoded with parameters).\nCastAnyCasts the first successful spell on the DSA.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castAny\",  args: [connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\nconnectors\nstring[]","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/dsa-spell"}},"413":{"pageContent":"CastAnyCasts the first successful spell on the DSA.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castAny\",  args: [connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\nconnectors\nstring[]\nArray of connector names, in preference order, if any (For example, [\"1INCH-A\", \"ZEROX-A\"]).\ndatas\nbytes[]\nArray of connector calldatas (function selectors encoded with parameters).\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FantomBasic A (ERC20)FantomPARASWAP-V5","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/dsa-spell"}},"414":{"pageContent":"Aave V3 - FantomLending & Borrowing.\nAaveV3-v1.2 connector on fantom triggers methods like deposit, depositWithoutCollateral, withdraw, borrow, borrowOnBehalfOf, payback, paybackWithATokens, paybackOnBehalfOf, enableCollateral, disableCollateral, swapBorrowRateMode, setUserEMode, delegateBorrow. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Aave v3 for lending / collaterization.spells.add({  connector: \"AAVE-V3-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ftm: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3"}},"415":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositWithoutCollateralDeposit a token to Aave v3 without enabling it as collateral.spells.add({  connector: \"AAVE-V3-A\",  method: \"depositWithoutCollateral\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For FTM: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v3spells.add({  connector: \"AAVE-V3-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For ftm: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3"}},"416":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For ftm: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token using Aave v3spells.add({  connector: \"AAVE-V3-A\",  method: \"borrow\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For ftm: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of debt. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowOnBehalfOfBorrow a token using Aave v3 on behalf of a userspells.add({  connector: \"AAVE-V3-A\",  method: \"borrowOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3"}},"417":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For FTM: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of debt. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nThe user who will incur the debt\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackPayback debt owed.spells.add({  connector: \"AAVE-V3-A\",  method: \"payback\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ftm: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3"}},"418":{"pageContent":"rateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackWithATokensRepays a borrowed amount on a specific reserve using the reserve aTokens, burning the equivalent debt tokens.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackWithATokens\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ftm: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfOfPayback debt owed on behalf os a user.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3"}},"419":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ftm: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nAddress of user who's debt to repay.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nEnableCollateralEnable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"enableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral\nDisableCollateralDisable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"disableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to disable as collateral","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3"}},"420":{"pageContent":"Parameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to disable as collateral\nSwapBorrowRateModeSwaps user borrow rate mode between variable and stablespells.add({  connector: \"AAVE-V3-A\",  method: \"swapBorrowRateMode\",  args: [token, rateMode]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For ftm: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256\nCurrent rate mode. (Stable = 1, Variable = 2)\nSetUserEModeUpdates the user's e-mode categoryspells.add({  connector: \"AAVE-V3-A\",  method: \"setUserEMode\",  args: [categoryId]});Copy to clipboard\nParameter\nType\nDescription\ncategoryId\nuint8\nThe category Id of the e-mode user want to set\nDelegateBorrowGives approval to delegate debt tokensspells.add({  connector: \"AAVE-V3-A\",  method: \"delegateBorrow\",  args: [token, amount, rateMode, delegateTo, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256\nThe type of debt","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3"}},"421":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256\nThe type of debt\ndelegateTo\naddress\nThe address to whom the user is delegating\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens delegated.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FantomAave V3 ImportFantomAuthority","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/aave-v3"}},"422":{"pageContent":"Basic A (ERC20) - FantomDeposit & Withdraw from DSA.\nBasic-v1.1 connector on fantom triggers methods like deposit, depositFrom, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to DSAspells.add({  connector: \"BASIC-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (For FTM: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)` (Not valid for MATIC))\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositFromDeposit a token to DSA from any user.spells.add({  connector: \"BASIC-A\",  method: \"depositFrom\",  args: [token, amt, from, getId, setId]});Copy to clipboard\nParameter\nType\nDescription","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/basic"}},"423":{"pageContent":"DepositFromDeposit a token to DSA from any user.spells.add({  connector: \"BASIC-A\",  method: \"depositFrom\",  args: [token, amt, from, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (Note: FTM is not supported. Use `deposit()`)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\nfrom\naddress\nThe address depositing the token.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw a token from DSAspells.add({  connector: \"BASIC-A\",  method: \"withdraw\",  args: [token, amt, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/basic"}},"424":{"pageContent":"The amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FantomBasic C (ERC1155)FantomDSA Spell","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/basic"}},"425":{"pageContent":"WFTM - FantomWrap and Unwrap WFTM.\nWFTM-v1.0 connector on fantom triggers methods like deposit, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositWrap FTM into WFTMspells.add({  connector: \"WFTM-A\",  method: \"deposit\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of FTM to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of FTM deposited.\nWithdrawUnwrap FTM from WFTMspells.add({  connector: \"WFTM-A\",  method: \"withdraw\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint\nThe amount of wFTM to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of FTM withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/wftm"}},"426":{"pageContent":"Parameter\nType\nDescription\namt\nuint\nThe amount of wFTM to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of FTM withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FantomSWAP-AGGREGATOR-AConnectorsMainnet","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/wftm"}},"427":{"pageContent":"Basic B (ERC721) - OptimismDeposit & Withdraw ERC721 from DSA.\nBASIC-ERC721-v1.0 connector on optimism triggers methods like depositERC721, withdrawERC721. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC721Deposit a ERC721 token to DSAspells.add({  connector: \"BASIC-B\",  method: \"depositERC721\",  args: [token, tokenId, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nWithdrawERC721Withdraw a ERC721 token from DSAspells.add({  connector: \"BASIC-B\",  method: \"withdrawERC721\",  args: [token, tokenId, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/basic-b"}},"428":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismAuthorityOptimismBasic C (ERC1155)","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/basic-b"}},"429":{"pageContent":"Authority - FantomManage Authorities to DSA.\nAuth-v1 connector on fantom triggers methods like add, remove. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.AddAdd an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"add\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nRemoveRemove an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"remove\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/authority"}},"430":{"pageContent":"Parameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FantomAave V3FantomBasic B (ERC721)","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/authority"}},"431":{"pageContent":"PARASWAP-V5 - FantomDEX Aggregator.\nParaswap-v5 connector on fantom triggers methods like swap. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"PARASWAP-A\",  method: \"swap\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For FTM: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For FTM: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from paraswap API.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/paraswap"}},"432":{"pageContent":"sellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from paraswap API.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.FantomDSA SpellFantomSWAP-AGGREGATOR-A","metadata":{"source":"https://docs.instadapp.io/connectors/fantom/paraswap"}},"433":{"pageContent":"UNISWAP-V3 - PolygonDecentralized Exchange.\nUniswapV3-v1 connector on polygon triggers methods like createAndInitializePool, mint, deposit, withdraw, collect, burn. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.CreateAndInitializePoolCreate and Initialize new pool if requiredspells.add({  connector: \"UNISWAP-V3-A\",  method: \"createAndInitializePool\",  args: [tokenA, tokenB, fee, initialTick]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\ntokenA addreess\ntokenB\naddress\ntokenB addreess\nfee\nuint24\nfee percentage\ninitialTick\nint24\nInitial tick for the pool\nMintMint New NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"mint\",  args: [tokenA, tokenB, fee, tickLower, tickUpper, amtA, amtB, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\ntokenA addreess","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap"}},"434":{"pageContent":"Parameter\nType\nDescription\ntokenA\naddress\ntokenA addreess\ntokenB\naddress\ntokenB addreess\nfee\nuint24\nfee percentage\ntickLower\nint24\nLower tick\ntickUpper\nint24\nUpper tick\namtA\nuint256\namount of tokenA\namtB\nuint256\namount of tokenB\nslippage\nuint256\nslippage percentage\ngetIds\nuint256[]\nID to retrieve amtA\nsetId\nuint256\nID stores the amount of LP token\nDepositIncrease Liquidity of NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"deposit\",  args: [tokenId, amountA, amountB, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\namountA\nuint256\ntokenA amounts.\namountB\nuint256\ntokenB amounts.\nslippage\nuint256\nslippage.\ngetIds\nuint256[]\nIDs to retrieve token amounts\nsetId\nuint256\nstores the liquidity amount\nWithdrawDecrease Liquidity of NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"withdraw\",  args: [tokenId, liquidity, amountAMin, amountBMin, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\nliquidity\nuint256\nLP Token amount.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap"}},"435":{"pageContent":"Parameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\nliquidity\nuint256\nLP Token amount.\namountAMin\nuint256\nMin amount of tokenA.\namountBMin\nuint256\nMin amount of tokenB.\ngetId\nuint256\nID to retrieve LP token amounts\nsetIds\nuint256[]\nstores the amount of output tokens\nCollectCollect from NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"collect\",  args: [tokenId, amount0Max, amount1Max, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\namount0Max\nuint256\nMax amount of token0.\namount1Max\nuint256\nMax amount of token1.\ngetIds\nuint256[]\nIDs to retrieve amounts\nsetIds\nuint256[]\nstores the amount of output tokens\nBurnBurn NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"burn\",  args: [tokenId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap"}},"436":{"pageContent":"BurnBurn NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"burn\",  args: [tokenId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonUniswap V3 StakerPolygonWMATIC","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap"}},"437":{"pageContent":"0x - PolygonOn-chain DEX Aggregator.\n0x-V4 connector on polygon triggers methods like . You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ConnectorsPolygonPolygon1INCH-V4","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/0x"}},"438":{"pageContent":"Basic C (ERC1155) - PolygonDeposit & Withdraw from ERC1155 DSA.\nBASIC-ERC1155-v1.0 connector on polygon triggers methods like depositERC1155, withdrawERC1155. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC1155Deposit a ERC1155 token to DSAspells.add({  connector: \"BASIC-C\",  method: \"depositERC1155\",  args: [token, tokenId, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\namount\nuint256\nAmount to deposit.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nWithdrawERC1155Withdraw a ERC1155 token from DSAspells.add({  connector: \"BASIC-C\",  method: \"withdrawERC1155\",  args: [token, tokenId, to, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/basic-c"}},"439":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\namount\nuint256\nAmount to withdraw.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonBasic B (ERC721)PolygonBasic A (ERC20)","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/basic-c"}},"440":{"pageContent":"Uniswap V3 Staker - PolygonDecentralized Exchange.\nUniswap-V3-Staker-v1.2 connector on polygon triggers methods like deposit, depositAndStake, transferDeposit, withdraw, stake, unstake, claimRewards, createIncentive. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositTransfer deposited NFT tokenspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"deposit\",  args: [_tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\nDepositAndStakeTo Deposit and Stake NFT for Stakingspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"depositAndStake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap-v3-staker"}},"441":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nTransferDepositTransfer deposited NFT tokenspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"transferDeposit\",  args: [_tokenId, _to]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\n_to\naddress\naddress to transfer\nWithdrawWithdraw NFT LP token from staking poolspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"withdraw\",  args: [_tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\nStakeStake NFT LP Positionspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"stake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap-v3-staker"}},"442":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nUnstakeUnstake NFT LP Positionspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"unstake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nClaimRewardsClaim rewardsspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"claimRewards\",  args: [_rewardToken, _amount]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_amount\nuint256\nrequested amount\nCreateIncentiveCreate incentivespells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"createIncentive\",  args: [_rewardToken, _startTime, _endTime, _refundee, _poolAddr, _reward]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap-v3-staker"}},"443":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_poolAddr\naddress\nUniswap V3 Pool address\n_reward\nuint256\nreward amount\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonUNISWAP-V3-ROUTERPolygonUNISWAP-V3","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap-v3-staker"}},"444":{"pageContent":"Basic B (ERC721) - PolygonDeposit & Withdraw ERC721 from DSA.\nBASIC-ERC721-v1.0 connector on polygon triggers methods like depositERC721, withdrawERC721. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC721Deposit a ERC721 token to DSAspells.add({  connector: \"BASIC-B\",  method: \"depositERC721\",  args: [token, tokenId, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nWithdrawERC721Withdraw a ERC721 token from DSAspells.add({  connector: \"BASIC-B\",  method: \"withdrawERC721\",  args: [token, tokenId, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/basic-b"}},"445":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonAuthorityPolygonBasic C (ERC1155)","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/basic-b"}},"446":{"pageContent":"SWAP-AGGREGATOR-A - PolygonSwap integration for DEX Aggregators.\nSwap-Aggregator-v1 connector on polygon triggers methods like swap. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens from exchanges like 1INCH, 0x etc, with calculation done off-chain.spells.add({  connector: \"SWAP-AGGREGATOR-A\",  method: \"swap\",  args: [_connectors, _datas]});Copy to clipboard\nParameter\nType\nDescription\n_connectors\nstring[]\nThe name of the connectors like 1INCH-A, 0x etc, in order of their priority.\n_datas\nbytes[]\nEncoded function call data including function selector encoded with parameters.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/swap-aggregator"}},"447":{"pageContent":"Description\n_connectors\nstring[]\nThe name of the connectors like 1INCH-A, 0x etc, in order of their priority.\n_datas\nbytes[]\nEncoded function call data including function selector encoded with parameters.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonSUSHISWAPPolygonUNISWAP-V3-SWAP-A","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/swap-aggregator"}},"448":{"pageContent":"UNISWAP-V3-ROUTER - PolygonDEX.\nUniswapV3-Auto-Router-v1 connector on polygon triggers methods like sell. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SellSwap tokens from getting an optimized trade routesspells.add({  connector: \"UNISWAP-V3-ROUTER-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap-v3-router"}},"449":{"pageContent":"The address of the token to sell.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from Uniswap V3 auto router SDK. You can generate calldata and unitAmt using uniswap-v3-autorouter or using this API\nsetId\nuint\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonUNISWAP-V3-SWAP-APolygonUniswap V3 Staker","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap-v3-router"}},"450":{"pageContent":"HOP-A - PolygonCross chain Bridge.\nHop-v1.0 connector on polygon triggers methods like bridge. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.BridgeBridge Token on HOP.spells.add({  connector: \"HOP-A\",  method: \"bridge\",  args: [params, getId]});Copy to clipboard\nParameter\nType\nDescription\nparams\nBridgeParams\nBridgeParams struct for bridging\ngetId\nuint256\nID to retrieve amount from last spell.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonGelato Aave ProtectionPolygonINSTAPOOL-V4","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/hop"}},"451":{"pageContent":"SWAP-AGGREGATOR-A - OptimismSwap integration for DEX Aggregators.\nSwap-Aggregator-v1 connector on optimism triggers methods like swap. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens from exchanges like 1INCH, 0x etc, with calculation done off-chain.spells.add({  connector: \"SWAP-AGGREGATOR-A\",  method: \"swap\",  args: [_connectors, _datas]});Copy to clipboard\nParameter\nType\nDescription\n_connectors\nstring[]\nThe name of the connectors like 1INCH-A, 0x etc, in order of their priority.\n_datas\nbytes[]\nEncoded function call data including function selector encoded with parameters.","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/swap-aggregator"}},"452":{"pageContent":"Description\n_connectors\nstring[]\nThe name of the connectors like 1INCH-A, 0x etc, in order of their priority.\n_datas\nbytes[]\nEncoded function call data including function selector encoded with parameters.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismPARASWAP-V5OptimismUNISWAP-V3-SWAP-A","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/swap-aggregator"}},"453":{"pageContent":"UNISWAP-V3-SWAP-A - PolygonDecentralized Exchange.\nUniswapV3-Swap-v1 connector on polygon triggers methods like buy, sell. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.BuySwap token(sellAddr) with token(buyAddr), buy token with minimum sell tokenspells.add({  connector: \"UNISWAP-V3-SWAP-A\",  method: \"buy\",  args: [_buyAddr, _sellAddr, _fee, _unitAmt, _buyAmt, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_buyAddr\naddress\ntoken to be bought\n_sellAddr\naddress\ntoken to be sold\n_fee\nuint24\npool fees for buyAddr-sellAddr token pair\n_unitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage\n_buyAmt\nuint256\namount of token to be bought\n_getId\nuint256\nId to get buyAmt\n_setId\nuint256\nId to store sellAmt","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap-swap"}},"454":{"pageContent":"_unitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage\n_buyAmt\nuint256\namount of token to be bought\n_getId\nuint256\nId to get buyAmt\n_setId\nuint256\nId to store sellAmt\nSellSwap token(sellAddr) with token(buyAddr), buy token with minimum sell tokenspells.add({  connector: \"UNISWAP-V3-SWAP-A\",  method: \"sell\",  args: [_buyAddr, _sellAddr, _fee, _unitAmt, _sellAmt, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_buyAddr\naddress\ntoken to be bought\n_sellAddr\naddress\ntoken to be sold\n_fee\nuint24\npool fees for buyAddr-sellAddr token pair\n_unitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage\n_sellAmt\nuint256\namount of token to be sold\n_getId\nuint256\nId to get sellAmt\n_setId\nuint256\nId to store buyAmt","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap-swap"}},"455":{"pageContent":"_unitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage\n_sellAmt\nuint256\namount of token to be sold\n_getId\nuint256\nId to get sellAmt\n_setId\nuint256\nId to store buyAmt\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonSWAP-AGGREGATOR-APolygonUNISWAP-V3-ROUTER","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/uniswap-swap"}},"456":{"pageContent":"1INCH-V4 - PolygonOn-chain DEX Aggregator.\n1Inch-v4-v1 connector on polygon triggers methods like sell. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SellSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"1INCH-V4-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/1inch-v4"}},"457":{"pageContent":"sellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Polygon0xPolygonAave Rewards","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/1inch-v4"}},"458":{"pageContent":"Gelato Aave Protection - PolygonProtect DSA against Liquidation risk on Aave with Gelato.\nGelatoAaveProtectionPolygonConnector-v1 connector on polygon triggers methods like submitProtection, updateProtection, cancelProtection, cancelAndRevoke. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SubmitProtectionspells.add({  connector: \"GELATO-AAVE-A\",  method: \"submitProtection\",  args: [_wantedHealthFactor, _minimumHealthFactor, _isPermanent]});Copy to clipboard\nParameter\nType\nDescription\n_wantedHealthFactor\nuint256\ntargeted health after protection.\n_minimumHealthFactor\nuint256\ntrigger protection when current health\n_isPermanent\nbool\nboolean to set a protection as permanent","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/gelato-aave-protection"}},"459":{"pageContent":"Type\nDescription\n_wantedHealthFactor\nuint256\ntargeted health after protection.\n_minimumHealthFactor\nuint256\ntrigger protection when current health\n_isPermanent\nbool\nboolean to set a protection as permanent\nUpdateProtectionspells.add({  connector: \"GELATO-AAVE-A\",  method: \"updateProtection\",  args: [_wantedHealthFactor, _minimumHealthFactor, _isPermanent]});Copy to clipboard\nParameter\nType\nDescription\n_wantedHealthFactor\nuint256\ntargeted health after protection.\n_minimumHealthFactor\nuint256\ntrigger protection when current health\n_isPermanent\nbool\nboolean to set a protection as permanent\nCancelProtectionspells.add({  connector: \"GELATO-AAVE-A\",  method: \"cancelProtection\",  args: []});Copy to clipboard\nParameter\nType\nDescription\nCancelAndRevokespells.add({  connector: \"GELATO-AAVE-A\",  method: \"cancelAndRevoke\",  args: []});Copy to clipboard\nParameter\nType\nDescription","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/gelato-aave-protection"}},"460":{"pageContent":"Parameter\nType\nDescription\nCancelAndRevokespells.add({  connector: \"GELATO-AAVE-A\",  method: \"cancelAndRevoke\",  args: []});Copy to clipboard\nParameter\nType\nDescription\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonDSA SpellPolygonHOP-A","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/gelato-aave-protection"}},"461":{"pageContent":"MSTABLE - PolygonDepositing and withdrawing directly to Save\nmStable-Polygon-v1.0 connector on polygon triggers methods like . You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonINSTAPOOL-V4PolygonPARASWAP-V5","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/mstable"}},"462":{"pageContent":"DSA Spell - PolygonCast spells on DSA.\nDSA-Spell-v1.0 connector on polygon triggers methods like castOnDSA, castAny. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.CastOnDSAInteract with a target DSA by casting spells on it.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castOnDSA\",  args: [targetDSA, connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\ntargetDSA\naddress\ntarget DSA to cast spells on.\nconnectors\nstring[]\nArray of connector names (For example, [\"1INCH-A\", \"BASIC-A\"]).\ndatas\nbytes[]\nArray of connector calldatas (function selectors encoded with parameters).\nCastAnyCasts the first successful spell on the DSA.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castAny\",  args: [connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\nconnectors\nstring[]","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/dsa-spell"}},"463":{"pageContent":"CastAnyCasts the first successful spell on the DSA.spells.add({  connector: \"DSA-SPELL-A\",  method: \"castAny\",  args: [connectors, datas]});Copy to clipboard\nParameter\nType\nDescription\nconnectors\nstring[]\nArray of connector names, in preference order, if any (For example, [\"1INCH-A\", \"ZEROX-A\"]).\ndatas\nbytes[]\nArray of connector calldatas (function selectors encoded with parameters).\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonBasic A (ERC20)PolygonGelato Aave Protection","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/dsa-spell"}},"464":{"pageContent":"Aave V2 - PolygonLending & Borrowing.\nAaveV2-v1.1 connector on polygon triggers methods like deposit, withdraw, borrow, payback, paybackOnBehalfOf, enableCollateral, swapBorrowRateMode. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Aave v2 for lending / collaterization.spells.add({  connector: \"AAVE-V2-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v2"}},"465":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v2spells.add({  connector: \"AAVE-V2-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token using Aave v2spells.add({  connector: \"AAVE-V2-A\",  method: \"borrow\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of borrow debt. (For Stable: 1, Variable: 2)\ngetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v2"}},"466":{"pageContent":"amt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of borrow debt. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackPayback debt owed.spells.add({  connector: \"AAVE-V2-A\",  method: \"payback\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfOfPayback debt owed on behalf os a user.spells.add({  connector: \"AAVE-V2-A\",  method: \"paybackOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v2"}},"467":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For AVAX: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nAddress of user who's debt to repay.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nEnableCollateralEnable an array of tokens as collateralspells.add({  connector: \"AAVE-V2-A\",  method: \"enableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral\nSwapBorrowRateModeSwaps user borrow rate mode between variable and stablespells.add({  connector: \"AAVE-V2-A\",  method: \"swapBorrowRateMode\",  args: [token, rateMode]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v2"}},"468":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256\nCurrent Rate mode. (Stable = 1, Variable = 2)\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonAave V2 to V3 importPolygonAave V3 Import (permit)","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v2"}},"469":{"pageContent":"PoolTogether - PolygonDeposit & Withdraw from PoolTogether\nPoolTogether-v1 connector on polygon triggers methods like claim, claimAll. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ClaimClaim token from a Token Faucetspells.add({  connector: \"POOLTOGETHER-A\",  method: \"claim\",  args: [tokenFaucet, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenFaucet\naddress\nTokenFaucet address\nsetId\nuint256\nSet claimed amount at this ID in `InstaMemory` Contract.\nClaimAllRuns claim on all passed comptrollers for a user.spells.add({  connector: \"POOLTOGETHER-A\",  method: \"claimAll\",  args: [tokenFaucetProxyFactory, tokenFaucets]});Copy to clipboard\nParameter\nType\nDescription\ntokenFaucetProxyFactory\naddress\nThe TokenFaucetProxyFactory address\ntokenFaucets\nTokenFaucetInterface[]\nThe tokenFaucets to call claim on.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/pooltogether"}},"470":{"pageContent":"Parameter\nType\nDescription\ntokenFaucetProxyFactory\naddress\nThe TokenFaucetProxyFactory address\ntokenFaucets\nTokenFaucetInterface[]\nThe tokenFaucets to call claim on.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonPARASWAP-V5PolygonQuickswap","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/pooltogether"}},"471":{"pageContent":"Aave V3 - PolygonLending & Borrowing.\nAaveV3-v1.2 connector on polygon triggers methods like deposit, depositWithoutCollateral, withdraw, borrow, borrowOnBehalfOf, payback, paybackWithATokens, paybackOnBehalfOf, enableCollateral, disableCollateral, swapBorrowRateMode, setUserEMode, delegateBorrow. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Aave v3 for lending / collaterization.spells.add({  connector: \"AAVE-V3-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3"}},"472":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositWithoutCollateralDeposit a token to Aave v3 without enabling it as collateral.spells.add({  connector: \"AAVE-V3-A\",  method: \"depositWithoutCollateral\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v3spells.add({  connector: \"AAVE-V3-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3"}},"473":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token using Aave v3spells.add({  connector: \"AAVE-V3-A\",  method: \"borrow\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of borrow debt. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowOnBehalfOfBorrow a token using Aave v3 on behalf of a userspells.add({  connector: \"AAVE-V3-A\",  method: \"borrowOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3"}},"474":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of borrow debt. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nThe user who will incur the debt\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackPayback debt owed.spells.add({  connector: \"AAVE-V3-A\",  method: \"payback\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3"}},"475":{"pageContent":"rateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackWithATokensRepays a borrowed amount on a specific reserve using the reserve aTokens, burning the equivalent debt tokens.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackWithATokens\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfOfPayback debt owed on behalf os a user.spells.add({  connector: \"AAVE-V3-A\",  method: \"paybackOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3"}},"476":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nAddress of user who's debt to repay.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nEnableCollateralEnable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"enableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral\nDisableCollateralDisable an array of tokens as collateralspells.add({  connector: \"AAVE-V3-A\",  method: \"disableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to disable as collateral","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3"}},"477":{"pageContent":"Parameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to disable as collateral\nSwapBorrowRateModeSwaps user borrow rate mode between variable and stablespells.add({  connector: \"AAVE-V3-A\",  method: \"swapBorrowRateMode\",  args: [token, rateMode]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256\nCurrent borrow rate s(Stable = 1, Variable = 2)\nSetUserEModeUpdates the user's e-mode categoryspells.add({  connector: \"AAVE-V3-A\",  method: \"setUserEMode\",  args: [categoryId]});Copy to clipboard\nParameter\nType\nDescription\ncategoryId\nuint8\nThe category Id of the e-mode user want to set\nDelegateBorrowGives approval to delegate debt tokensspells.add({  connector: \"AAVE-V3-A\",  method: \"delegateBorrow\",  args: [token, amount, rateMode, delegateTo, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3"}},"478":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of token\namount\nuint256\nThe amount\nrateMode\nuint256\nThe type of borrow debt\ndelegateTo\naddress\nThe address to whom the user is delegating\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonAave V3 Import (permit)PolygonAuthority","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3"}},"479":{"pageContent":"Basic A (ERC20) - PolygonDeposit & Withdraw from DSA.\nBasic-v1.1 connector on polygon triggers methods like deposit, depositFrom, withdraw. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to DSAspells.add({  connector: \"BASIC-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)` (Not valid for MATIC))\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositFromDeposit a token to DSA from any user.spells.add({  connector: \"BASIC-A\",  method: \"depositFrom\",  args: [token, amt, from, getId, setId]});Copy to clipboard\nParameter\nType","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/basic"}},"480":{"pageContent":"DepositFromDeposit a token to DSA from any user.spells.add({  connector: \"BASIC-A\",  method: \"depositFrom\",  args: [token, amt, from, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (Note: MATIC is not supported. Use `deposit()`)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\nfrom\naddress\nThe address depositing the token.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw a token from DSAspells.add({  connector: \"BASIC-A\",  method: \"withdraw\",  args: [token, amt, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/basic"}},"481":{"pageContent":"The amount of tokens to withdraw. (For max: `uint256(-1)`)\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonBasic C (ERC1155)PolygonDSA Spell","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/basic"}},"482":{"pageContent":"Aave Rewards - PolygonClaim Aave rewards.\nAave-Incentives-v1 connector on polygon triggers methods like claim. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ClaimClaim Pending Rewards from Aave incentives contract.spells.add({  connector: \"AAVE-CLAIM-A\",  method: \"claim\",  args: [assets, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nassets\naddress[]\nThe list of assets supplied and borrowed.\namt\nuint256\nThe amount of reward to claim. (uint(-1) for max)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of rewards claimed.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-rewards"}},"483":{"pageContent":"assets\naddress[]\nThe list of assets supplied and borrowed.\namt\nuint256\nThe amount of reward to claim. (uint(-1) for max)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of rewards claimed.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Polygon1INCH-V4PolygonAave V2 to V3 import","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-rewards"}},"484":{"pageContent":"Aave V3 Import - OptimismImport EOA's aave V3 position to DSA's aave v3 position\nAave-v3-import-v1.1 connector on optimism triggers methods like importAave, importAaveWithCollateral. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportAaveImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-A\",  method: \"importAave\",  args: [userAccount, inputData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3-import"}},"485":{"pageContent":"Parameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nImportAaveWithCollateralImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-A\",  method: \"importAaveWithCollateral\",  args: [userAccount, inputData, enableCollateral]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3-import"}},"486":{"pageContent":"inputData\nImportInputData\nThe struct containing all the neccessary input data\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismAave V3 Import (permit)OptimismAave V3 Rewards","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/aave-v3-import"}},"487":{"pageContent":"Aave V3 Import (permit) - PolygonImport EOA's aave V3 position to DSA's aave v3 position\nAave-v3-import-permit-v1.1 connector on polygon triggers methods like importAave, importAaveWithCollateral. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportAaveImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-PERMIT-A\",  method: \"importAave\",  args: [userAccount, inputData, permitData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3-import-with-permit"}},"488":{"pageContent":"inputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nImportAaveWithCollateralImport EOA's aave V3 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-V3-IMPORT-PERMIT-A\",  method: \"importAaveWithCollateral\",  args: [userAccount, inputData, permitData, enableCollateral]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\npermitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3-import-with-permit"}},"489":{"pageContent":"permitData\nSignedPermits\nThe struct containing signed permit data like v,r,s,expiry\nenableCollateral\nbool[]\nThe boolean array to enable selected collaterals in the imported position\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonAave V2PolygonAave V3","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v3-import-with-permit"}},"490":{"pageContent":"Aave V2 to V3 import - Polygonmigrate aave V2 position to aave v3 position\nAave-Import-v2-to-v3 connector on polygon triggers methods like importAaveV2ToV3, migrateAaveV2ToV3. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportAaveV2ToV3Import EOA's aave V2 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-IMPORT-V2-V3-A\",  method: \"importAaveV2ToV3\",  args: [userAccount, inputData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nThe address of the EOA from which aave position will be imported\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nMigrateAaveV2ToV3Migrate DSA's aave V2 position to DSA's aave v3 positionspells.add({  connector: \"AAVE-IMPORT-V2-V3-A\",  method: \"migrateAaveV2ToV3\",  args: [inputData]});Copy to clipboard\nParameter\nType","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v2-to-v3-import"}},"491":{"pageContent":"Parameter\nType\nDescription\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonAave RewardsPolygonAave V2","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/aave-v2-to-v3-import"}},"492":{"pageContent":"Quickswap - PolygonDecentralized Exchange.\nQuickswap-v1.0 connector on polygon triggers methods like deposit, withdraw, buy, sell. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit Liquidity to a QuickSwap pool.spells.add({  connector: \"QUICKSWAP-A\",  method: \"deposit\",  args: [tokenA, tokenB, amtA, unitAmt, slippage, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namtA\nuint256\nThe amount of A tokens to deposit.\nunitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/quickswap"}},"493":{"pageContent":"unitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.\nWithdrawWithdraw Liquidity from a QuickSwap pool.spells.add({  connector: \"QUICKSWAP-A\",  method: \"withdraw\",  args: [tokenA, tokenB, uniAmt, unitAmtA, unitAmtB, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nuniAmt\nuint256\nThe amount of pool tokens to withdraw.\nunitAmtA\nuint256\nThe unit amount of amtA/uniAmt with slippage.\nunitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/quickswap"}},"494":{"pageContent":"unitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.\nBuyBuy a token using a QuickSwapspells.add({  connector: \"QUICKSWAP-A\",  method: \"buy\",  args: [buyAddr, sellAddr, buyAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nbuyAmt\nuint256\nThe amount of tokens to buy.\nunitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage.\ngetId\nuint256\nID to retrieve buyAmt.\nsetId\nuint256\nID to store the amount of tokens sold.\nSellSell a token using a QuickSwapspells.add({  connector: \"QUICKSWAP-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/quickswap"}},"495":{"pageContent":"Parameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage.\ngetId\nuint256\nID to retrieve sellAmt.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonPoolTogetherPolygonSUSHISWAP","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/quickswap"}},"496":{"pageContent":"SUSHISWAP - PolygonDecentralized Exchange.\nSushiswap-v1 connector on polygon triggers methods like deposit, withdraw, buy, sell. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit Liquidity to a SushiSwap pool.spells.add({  connector: \"SUSHISWAP-A\",  method: \"deposit\",  args: [tokenA, tokenB, amtA, unitAmt, slippage, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namtA\nuint256\nThe amount of A tokens to deposit.\nunitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/sushiswap"}},"497":{"pageContent":"unitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.\nWithdrawWithdraw Liquidity from a SushiSwap pool.spells.add({  connector: \"SUSHISWAP-A\",  method: \"withdraw\",  args: [tokenA, tokenB, uniAmt, unitAmtA, unitAmtB, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nuniAmt\nuint256\nThe amount of pool tokens to withdraw.\nunitAmtA\nuint256\nThe unit amount of amtA/uniAmt with slippage.\nunitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/sushiswap"}},"498":{"pageContent":"unitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.\nBuyBuy a token using a SushiSwapspells.add({  connector: \"SUSHISWAP-A\",  method: \"buy\",  args: [buyAddr, sellAddr, buyAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nbuyAmt\nuint256\nThe amount of tokens to buy.\nunitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage.\ngetId\nuint256\nID to retrieve buyAmt.\nsetId\nuint256\nID to store the amount of tokens sold.\nSellSell a token using a SushiSwapspells.add({  connector: \"SUSHISWAP-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/sushiswap"}},"499":{"pageContent":"Parameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For Matic: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage.\ngetId\nuint256\nID to retrieve sellAmt.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonQuickswapPolygonSWAP-AGGREGATOR-A","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/sushiswap"}},"500":{"pageContent":"INSTAPOOL-V4 - PolygonInbuilt Flash Loan in DSA\nInstapool-v4 connector on polygon triggers methods like flashBorrowAndCast, flashPayback, flashMultiBorrowAndCast, flashMultiPayback. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.FlashBorrowAndCastBorrow Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashBorrowAndCast\",  args: [token, amt, route, data, extraData]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes\nFlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/instapool-v4"}},"501":{"pageContent":"FlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\ngetId\nuint\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint\nSet token amount at this ID in `InstaMemory` Contract.\nFlashMultiBorrowAndCastBorrow multi-tokens Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashMultiBorrowAndCast\",  args: [tokens_, amts_, route, data, extraData]});Copy to clipboard\nParameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/instapool-v4"}},"502":{"pageContent":"uint[]\nArray of Token Amounts.\nroute\nuint\nFlashloan source route.\ndata\nbytes\ntargets & data for cast.\nextraData\nbytes\nto be kept bytes(0) in most cases. Can be useful to decide data for some particular routes\nFlashMultiPaybackReturn multi-tokens to InstaPool.spells.add({  connector: \"INSTAPOOL-C\",  method: \"flashMultiPayback\",  args: [tokens_, amts_, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokens_\naddress[]\nArray of Token Addresses.\namts_\nuint[]\nArray of Token Amounts.\ngetIds\nuint[]\nArray of getId token amounts.\nsetIds\nuint[]\nArray of setId token amounts.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonHOP-APolygonMSTABLE","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/instapool-v4"}},"503":{"pageContent":"WMATIC - PolygonWrap and Unwrap WMATIC.\nWMATIC-v1.0 connector on polygon triggers methods like deposit, withdraw. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositWrap MATIC into WMATICspells.add({  connector: \"WMATIC-A\",  method: \"deposit\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of MATIC to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of MATIC deposited.\nWithdrawUnwrap MATIC from WMATICspells.add({  connector: \"WMATIC-A\",  method: \"withdraw\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint\nThe amount of wmatic to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of MATIC withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/wmatic"}},"504":{"pageContent":"Parameter\nType\nDescription\namt\nuint\nThe amount of wmatic to withdraw. (For max: `uint256(-1)`)\ngetId\nuint\nID to retrieve amt.\nsetId\nuint\nID stores the amount of MATIC withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonUNISWAP-V3MainnetAave","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/wmatic"}},"505":{"pageContent":"Authority - PolygonManage Authorities to DSA.\nAuth-v1 connector on polygon triggers methods like add, remove. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.AddAdd an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"add\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nRemoveRemove an address as account authorityspells.add({  connector: \"AUTHORITY-A\",  method: \"remove\",  args: [authority]});Copy to clipboard\nParameter\nType\nDescription\nauthority\naddress\nThe authority Address.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/authority"}},"506":{"pageContent":"Parameter\nType\nDescription\nauthority\naddress\nThe authority Address.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonAave V3PolygonBasic B (ERC721)","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/authority"}},"507":{"pageContent":"PARASWAP-V5 - PolygonDEX Aggregator.\nParaswap-v5 connector on polygon triggers methods like swap. You can view details like source code, ABIs on Polygonscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate MATIC.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"PARASWAP-A\",  method: \"swap\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For MATIC: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from paraswap API.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/paraswap"}},"508":{"pageContent":"sellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from paraswap API.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.PolygonMSTABLEPolygonPoolTogether","metadata":{"source":"https://docs.instadapp.io/connectors/polygon/paraswap"}},"509":{"pageContent":"G-Uniswap V3 ERC20 - MainnetG-Uniswap V3 Wrapper to deposit and withdraw.\nG-Uniswap-v3-ERC20-v1.0 connector on mainnet triggers methods like deposit, withdraw, swapAndDeposit. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit Liquidity to Gelato Uniswap V3 pool.spells.add({  connector: \"G-UNISWAP-A\",  method: \"deposit\",  args: [pool, amt0Max, amt1Max, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\npool\naddress\nThe address of pool.\namt0Max\nuint256\nAmount0 Max amount\namt1Max\nuint256\nAmount1 Max amount\nslippage\nuint\nuse to calculate minimum deposit. 100% = 1e18\ngetIds\nuint256[]\nArray of IDs to retrieve amounts.\nsetId\nuint256\nID stores the amount of pools tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/guniswap_v3_erc20"}},"510":{"pageContent":"amt1Max\nuint256\nAmount1 Max amount\nslippage\nuint\nuse to calculate minimum deposit. 100% = 1e18\ngetIds\nuint256[]\nArray of IDs to retrieve amounts.\nsetId\nuint256\nID stores the amount of pools tokens received.\nWithdrawWithdraw Liquidity from Gelato Uniswap V3 pool.spells.add({  connector: \"G-UNISWAP-A\",  method: \"withdraw\",  args: [pool, liqAmt, minAmtA, minAmtB, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\npool\naddress\nThe address of pool.\nliqAmt\nuint256\nAmount0 Max amount\nminAmtA\nuint256\nMin AmountA amount\nminAmtB\nuint256\nMin AmountB amount\ngetId\nuint256\nID to retrieve liqAmt.\nsetIds\nuint256[]\nArray of IDs tp stores the amounts of pools tokens received.\nSwapAndDepositWithdraw Liquidity to Gelato Uniswap V3 pool.spells.add({  connector: \"G-UNISWAP-A\",  method: \"swapAndDeposit\",  args: [pool, amount0In, amount1In, zeroForOne, swapAmount, swapThreshold, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\npool\naddress\nThe address of pool.\namount0In\nuint256\namount of token0 to deposit.\namount1In\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/guniswap_v3_erc20"}},"511":{"pageContent":"Parameter\nType\nDescription\npool\naddress\nThe address of pool.\namount0In\nuint256\namount of token0 to deposit.\namount1In\nuint256\namount of token1 to deposit.\nzeroForOne\nbool\nSwap excess of one token to deposit in equal ratio.\nswapAmount\nuint256\nAmount of tokens to swap\nswapThreshold\nuint160\nSlippage that the swap could take.\ngetId\nuint256\nNot used anywhere here.\nsetId\nuint256\nSet the amount of tokens minted.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetG-UNI StakingMainnetHOP-MAINNET-A","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/guniswap_v3_erc20"}},"512":{"pageContent":"Uniswap V2 - MainnetDecentralized Exchange.\nUniswapV2-v1.1 connector on mainnet triggers methods like deposit, withdraw, buy, sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit Liquidity to a Uniswap v2 pool.spells.add({  connector: \"UNISWAP-V2-A\",  method: \"deposit\",  args: [tokenA, tokenB, amtA, unitAmt, slippage, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namtA\nuint256\nThe amount of A tokens to deposit.\nunitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap"}},"513":{"pageContent":"unitAmt\nuint256\nThe unit amount of of amtB/amtA with slippage.\nslippage\nuint256\nSlippage amount.\ngetId\nuint256\nID to retrieve amtA.\nsetId\nuint256\nID stores the amount of pools tokens received.\nWithdrawWithdraw Liquidity from a Uniswap v2 pool.spells.add({  connector: \"UNISWAP-V2-A\",  method: \"withdraw\",  args: [tokenA, tokenB, uniAmt, unitAmtA, unitAmtB, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\nThe address of token A.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ntokenB\naddress\nThe address of token B.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nuniAmt\nuint256\nThe amount of pool tokens to withdraw.\nunitAmtA\nuint256\nThe unit amount of amtA/uniAmt with slippage.\nunitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap"}},"514":{"pageContent":"unitAmtB\nuint256\nThe unit amount of amtB/uniAmt with slippage.\ngetId\nuint256\nID to retrieve uniAmt.\nsetIds\nuint256[]\nArray of IDs to store the amount tokens received.\nBuyBuy a token using a Uniswap v2spells.add({  connector: \"UNISWAP-V2-A\",  method: \"buy\",  args: [buyAddr, sellAddr, buyAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nbuyAmt\nuint256\nThe amount of tokens to buy.\nunitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage.\ngetId\nuint256\nID to retrieve buyAmt.\nsetId\nuint256\nID to store the amount of tokens sold.\nSellSell a token using a Uniswap v2spells.add({  connector: \"UNISWAP-V2-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap"}},"515":{"pageContent":"Parameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage.\ngetId\nuint256\nID to retrieve sellAmt.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetUniswap V3 StakerMainnetUniswap V3","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap"}},"516":{"pageContent":"HOP-A - OptimismCross chain Bridge.\nHop-v1.0 connector on optimism triggers methods like bridge. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.BridgeBridge Token on HOP.spells.add({  connector: \"HOP-A\",  method: \"bridge\",  args: [params, getId]});Copy to clipboard\nParameter\nType\nDescription\nparams\nBridgeParams\nBridgeParams struct for bridging\ngetId\nuint256\nID to retrieve amount from last spell.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismDSA SpellOptimismINSTAPOOL-V4","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/hop"}},"517":{"pageContent":"0x - MainnetOn-chain DEX Aggregator.\n0x-V4 connector on mainnet triggers methods like swap. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SwapSwap tokens on 0xspells.add({  connector: \"ZEROX-A\",  method: \"swap\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 0x API.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/0x"}},"518":{"pageContent":"sellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 0x API.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.ConnectorsMainnetMainnet1INCH-V4","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/0x"}},"519":{"pageContent":"Basic C (ERC1155) - MainnetDeposit & Withdraw from ERC1155 DSA.\nBASIC-ERC1155-v1.0 connector on mainnet triggers methods like depositERC1155, withdrawERC1155. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC1155Deposit a ERC1155 token to DSAspells.add({  connector: \"BASIC-C\",  method: \"depositERC1155\",  args: [token, tokenId, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\namount\nuint256\nAmount to deposit.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nWithdrawERC1155Withdraw a ERC1155 token from DSAspells.add({  connector: \"BASIC-C\",  method: \"withdrawERC1155\",  args: [token, tokenId, to, amount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/basic-c"}},"520":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\namount\nuint256\nAmount to withdraw.\ngetId\nuint256\nID to retrieve amount.\nsetId\nuint256\nID stores the amount.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetBasic B (ERC721)MainnetBasic A (ERC20)","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/basic-c"}},"521":{"pageContent":"Uniswap V3 Staker - MainnetDecentralized Exchange.\nUniswap-V3-Staker-v1.2 connector on mainnet triggers methods like deposit, depositAndStake, transferDeposit, withdraw, stake, unstake, claimRewards, createIncentive. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositTransfer deposited NFT tokenspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"deposit\",  args: [_tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\nDepositAndStakeTo Deposit and Stake NFT for Stakingspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"depositAndStake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap-v3-staker"}},"522":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nTransferDepositTransfer deposited NFT tokenspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"transferDeposit\",  args: [_tokenId, _to]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\n_to\naddress\naddress to transfer\nWithdrawWithdraw NFT LP token from staking poolspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"withdraw\",  args: [_tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_tokenId\nuint256\nNFT LP Token ID\nStakeStake NFT LP Positionspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"stake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap-v3-staker"}},"523":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nUnstakeUnstake NFT LP Positionspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"unstake\",  args: [_rewardToken, _startTime, _endTime, _refundee, _tokenId]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_tokenId\nuint256\nNFT LP token id\nClaimRewardsClaim rewardsspells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"claimRewards\",  args: [_rewardToken, _amount]});Copy to clipboard\nParameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_amount\nuint256\nrequested amount\nCreateIncentiveCreate incentivespells.add({  connector: \"UNISWAP-V3-STAKER-B\",  method: \"createIncentive\",  args: [_rewardToken, _startTime, _endTime, _refundee, _poolAddr, _reward]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap-v3-staker"}},"524":{"pageContent":"Parameter\nType\nDescription\n_rewardToken\naddress\n_rewardToken address\n_startTime\nuint256\nstake start time\n_endTime\nuint256\nstake end time\n_refundee\naddress\nrefundee address\n_poolAddr\naddress\nUniswap V3 Pool address\n_reward\nuint256\nreward amount\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetUNISWAP-V3-ROUTERMainnetUniswap V2","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap-v3-staker"}},"525":{"pageContent":"Basic B (ERC721) - MainnetDeposit & Withdraw ERC721 from DSA.\nBASIC-ERC721-v1.0 connector on mainnet triggers methods like depositERC721, withdrawERC721. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositERC721Deposit a ERC721 token to DSAspells.add({  connector: \"BASIC-B\",  method: \"depositERC721\",  args: [token, tokenId, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of token.\ntokenId\nuint256\nID of token.\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nWithdrawERC721Withdraw a ERC721 token from DSAspells.add({  connector: \"BASIC-B\",  method: \"withdrawERC721\",  args: [token, tokenId, to, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/basic-b"}},"526":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nAddress of the token.\ntokenId\nuint256\nID of token.\nto\naddress\nThe address to receive the token upon withdrawal\ngetId\nuint256\nID to retrieve tokenId.\nsetId\nuint256\nID stores the tokenId.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetAuthorityMainnetBasic C (ERC1155)","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/basic-b"}},"527":{"pageContent":"UNISWAP-V3-ROUTER - MainnetDEX.\nUniswapV3-Auto-Router-v1 connector on mainnet triggers methods like sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SellSwap tokens from getting an optimized trade routesspells.add({  connector: \"UNISWAP-V3-ROUTER-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from Uniswap V3 auto router SDK.\nsetId\nuint256\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap-v3-router"}},"528":{"pageContent":"uint256\nThe amount of the token to sell.\nunitAmt\nuint256\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from Uniswap V3 auto router SDK.\nsetId\nuint256\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetUNISWAP-V3-SWAP-AMainnetUniswap V3 Staker","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap-v3-router"}},"529":{"pageContent":"NOTIONAL-V2-A - MainnetFixed Rate Lending and Borrowing\nNotional-v1.1 connector on mainnet triggers methods like depositCollateral, withdrawCollateral, claimNOTE, redeemNTokenRaw, redeemNTokenAndWithdraw, redeemNTokenAndDeleverage, depositAndMintNToken, mintNTokenFromCash, depositAndLend, depositCollateralBorrowAndWithdraw, withdrawLend, mintSNoteFromBPT, mintSNoteFromETH, mintSNoteFromWETH, startCoolDown, stopCoolDown, redeemSNote, batchActionRaw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositCollateralDeposit collateral into Notional, this should only be used for reducing risk ofspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"depositCollateral\",  args: [currencyId, useUnderlying, depositAmount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ncurrencyId\nuint16","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"530":{"pageContent":"Parameter\nType\nDescription\ncurrencyId\nuint16\nnotional defined currency id to deposit\nuseUnderlying\nbool\nif true, will accept a deposit in the underlying currency (i.e DAI), if false\ndepositAmount\nuint256\namount of tokens to deposit\ngetId\nuint256\nid of depositAmount\nsetId\nuint256\nid to set the value of notional cash deposit increase (denominated in asset cash, i.e. cDAI)\nWithdrawCollateralWithdraw collateral from Notionalspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"withdrawCollateral\",  args: [currencyId, redeemToUnderlying, withdrawAmount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ncurrencyId\nuint16\nnotional defined currency id to withdraw\nredeemToUnderlying\nbool\nif true, will redeem the amount withdrawn to the underlying currency (i.e. DAI),\nwithdrawAmount\nuint256\namount of tokens to withdraw, denominated in asset tokens (i.e. cDAI)\ngetId\nuint256\nid of withdraw amount\nsetId\nuint256\nid to set the value of amount withdrawn, if redeemToUnderlying this amount will be in underlying","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"531":{"pageContent":"getId\nuint256\nid of withdraw amount\nsetId\nuint256\nid to set the value of amount withdrawn, if redeemToUnderlying this amount will be in underlying\nClaimNOTEClaims NOTE tokens and transfers to the addressspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"claimNOTE\",  args: [setId]});Copy to clipboard\nParameter\nType\nDescription\nsetId\nuint256\nthe id to set the balance of NOTE tokens claimed\nRedeemNTokenRawRedeem nTokens allowing for accepting of fCash residualsspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"redeemNTokenRaw\",  args: [currencyId, sellTokenAssets, tokensToRedeem, acceptResidualAssets, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ncurrencyId\nuint16\nnotional defined currency id of nToken\nsellTokenAssets\nbool\nset to false to accept fCash residuals into portfolio, set to true will\ntokensToRedeem\nuint96\namount of nTokens to redeem\nacceptResidualAssets\nbool\nundefined\ngetId\nuint256\nid of amount of tokens to redeem\nsetId\nuint256\nid to set amount of asset cash from redeem","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"532":{"pageContent":"tokensToRedeem\nuint96\namount of nTokens to redeem\nacceptResidualAssets\nbool\nundefined\ngetId\nuint256\nid of amount of tokens to redeem\nsetId\nuint256\nid to set amount of asset cash from redeem\nRedeemNTokenAndWithdrawRedeems nTokens to cash and withdraws the resulting cashspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"redeemNTokenAndWithdraw\",  args: [currencyId, tokensToRedeem, amountToWithdraw, redeemToUnderlying, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ncurrencyId\nuint16\nnotional defined currency id of nToken\ntokensToRedeem\nuint96\namount of nTokens to redeem\namountToWithdraw\nuint256\namount of asset cash to withdraw, if set to uint(-1) then will withdraw the\nredeemToUnderlying\nbool\nif true, will redeem the asset cash withdrawn to underlying tokens\ngetId\nuint256\nid of amount of tokens to redeem\nsetId\nuint256\nid to set amount of asset cash or underlying tokens withdrawn","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"533":{"pageContent":"bool\nif true, will redeem the asset cash withdrawn to underlying tokens\ngetId\nuint256\nid of amount of tokens to redeem\nsetId\nuint256\nid to set amount of asset cash or underlying tokens withdrawn\nRedeemNTokenAndDeleverageRedeems nTokens and uses the cash to repay a borrow.spells.add({  connector: \"NOTIONAL-V2-A\",  method: \"redeemNTokenAndDeleverage\",  args: [currencyId, tokensToRedeem, marketIndex, fCashAmount, minLendRate, getId]});Copy to clipboard\nParameter\nType\nDescription\ncurrencyId\nuint16\nnotional defined currency id of nToken\ntokensToRedeem\nuint96\namount of nTokens to redeem\nmarketIndex\nuint8\nthe market index that references where the account will lend\nfCashAmount\nuint88\namount of fCash to lend into the market (this has the effect or repaying\nminLendRate\nuint32\nminimum rate where the user will lend, if the rate is lower will revert\ngetId\nuint256\nid of amount of tokens to redeem","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"534":{"pageContent":"minLendRate\nuint32\nminimum rate where the user will lend, if the rate is lower will revert\ngetId\nuint256\nid of amount of tokens to redeem\nDepositAndMintNTokenDeposit asset or underlying tokens and mint nTokens in a single transactionspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"depositAndMintNToken\",  args: [currencyId, depositAmount, useUnderlying, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ncurrencyId\nuint16\nnotional defined currency id to deposit\ndepositAmount\nuint256\namount of tokens to deposit\nuseUnderlying\nbool\nif true, will accept a deposit in the underlying currency (i.e DAI), if false\ngetId\nuint256\nid of depositAmount\nsetId\nuint256\nid to set the value of nToken balance change\nMintNTokenFromCashUses existing Notional cash balance (deposits in Notional held as cTokens) and uses them to mintspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"mintNTokenFromCash\",  args: [currencyId, cashBalanceToMint, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ncurrencyId\nuint16","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"535":{"pageContent":"Parameter\nType\nDescription\ncurrencyId\nuint16\nnotional defined currency id of the cash balance\ncashBalanceToMint\nuint256\namount of account's cash balance to convert to nTokens\ngetId\nuint256\nid of cash balance\nsetId\nuint256\nid to set the value of nToken increase\nDepositAndLendDeposits some amount of tokens and lends them in the specified market. This method can also be used to repay aspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"depositAndLend\",  args: [currencyId, depositAmount, useUnderlying, marketIndex, fCashAmount, minLendRate, getId]});Copy to clipboard\nParameter\nType\nDescription\ncurrencyId\nuint16\nnotional defined currency id to lend\ndepositAmount\nuint256\namount of cash to deposit to lend\nuseUnderlying\nbool\nif true, will accept a deposit in the underlying currency (i.e DAI), if false\nmarketIndex\nuint8\nthe market index to lend to. This is a number from 1 to 7 which corresponds to the tenor\nfCashAmount\nuint88\namount of fCash for the account to receive, this is equal to how much the account will receive","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"536":{"pageContent":"the market index to lend to. This is a number from 1 to 7 which corresponds to the tenor\nfCashAmount\nuint88\namount of fCash for the account to receive, this is equal to how much the account will receive\nminLendRate\nuint32\nthe minimum interest rate that the account is willing to lend at, if set to zero the account will accept\ngetId\nuint256\nreturns the deposit amount\nDepositCollateralBorrowAndWithdrawDeposits some amount of tokens as collateral and borrows. This can be achieved by combining multiple spells but thisspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"depositCollateralBorrowAndWithdraw\",  args: [depositCurrencyId, depositAction, depositAmount, borrowCurrencyId, marketIndex, fCashAmount, maxBorrowRate, redeemToUnderlying, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ndepositCurrencyId\nuint16\nnotional defined currency id of the collateral to deposit\ndepositAction\nDepositActionType\none of the following values which will define how the collateral is deposited:\ndepositAmount\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"537":{"pageContent":"uint16\nnotional defined currency id of the collateral to deposit\ndepositAction\nDepositActionType\none of the following values which will define how the collateral is deposited:\ndepositAmount\nuint256\namount of cash to deposit as collateral\nborrowCurrencyId\nuint16\nid of the currency to borrow\nmarketIndex\nuint8\nthe market index to borrow from. This is a number from 1 to 7 which corresponds to the tenor\nfCashAmount\nuint88\namount of fCash for the account to borrow, this is equal to how much the account must pay\nmaxBorrowRate\nuint32\nthe maximum interest rate that the account is willing to borrow at, if set to zero the account will accept\nredeemToUnderlying\nbool\nif true, redeems the borrowed balance from cTokens down to the underlying token before transferring\ngetId\nuint256\nreturns the collateral deposit amount\nsetId\nuint256\nsets the amount that the account borrowed (i.e. how much of borrowCurrencyId it has received)","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"538":{"pageContent":"getId\nuint256\nreturns the collateral deposit amount\nsetId\nuint256\nsets the amount that the account borrowed (i.e. how much of borrowCurrencyId it has received)\nWithdrawLendAllows an account to withdraw from a fixed rate lend by selling the fCash back to the market. Equivalent tospells.add({  connector: \"NOTIONAL-V2-A\",  method: \"withdrawLend\",  args: [currencyId, marketIndex, fCashAmount, maxBorrowRate, setId]});Copy to clipboard\nParameter\nType\nDescription\ncurrencyId\nuint16\nnotional defined currency id of the lend asset to withdraw\nmarketIndex\nuint8\nthe market index of the fCash asset. This is a number from 1 to 7 which corresponds to the tenor\nfCashAmount\nuint88\namount of fCash at the marketIndex that should be sold\nmaxBorrowRate\nuint32\nthe maximum interest rate that the account is willing to sell fCash at at, if set to zero the\nsetId\nuint256\nsets the amount that the account has received when withdrawing its lend","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"539":{"pageContent":"maxBorrowRate\nuint32\nthe maximum interest rate that the account is willing to sell fCash at at, if set to zero the\nsetId\nuint256\nsets the amount that the account has received when withdrawing its lend\nMintSNoteFromBPTMints sNOTE from the underlying BPT token.spells.add({  connector: \"NOTIONAL-V2-A\",  method: \"mintSNoteFromBPT\",  args: [bptAmount]});Copy to clipboard\nParameter\nType\nDescription\nbptAmount\nuint256\nis the amount of BPT to transfer from the msg.sender.\nMintSNoteFromETHMints sNOTE from some amount of NOTE and ETHspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"mintSNoteFromETH\",  args: [noteAmount, ethAmount, minBPT, getId]});Copy to clipboard\nParameter\nType\nDescription\nnoteAmount\nuint256\namount of NOTE to transfer into the sNOTE contract\nethAmount\nuint256\nundefined\nminBPT\nuint256\nslippage parameter to prevent front running\ngetId\nuint256\nundefined","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"540":{"pageContent":"Parameter\nType\nDescription\nnoteAmount\nuint256\namount of NOTE to transfer into the sNOTE contract\nethAmount\nuint256\nundefined\nminBPT\nuint256\nslippage parameter to prevent front running\ngetId\nuint256\nundefined\nMintSNoteFromWETHMints sNOTE from some amount of NOTE and WETHspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"mintSNoteFromWETH\",  args: [noteAmount, wethAmount, minBPT, getId]});Copy to clipboard\nParameter\nType\nDescription\nnoteAmount\nuint256\namount of NOTE to transfer into the sNOTE contract\nwethAmount\nuint256\namount of WETH to transfer into the sNOTE contract\nminBPT\nuint256\nslippage parameter to prevent front running\ngetId\nuint256\nundefined\nStartCoolDownBegins a cool down period for the senderspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"startCoolDown\",  args: []});Copy to clipboard\nParameter\nType\nDescription\nStopCoolDownStops a cool down for the senderspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"stopCoolDown\",  args: []});Copy to clipboard\nParameter\nType\nDescription","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"541":{"pageContent":"Parameter\nType\nDescription\nStopCoolDownStops a cool down for the senderspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"stopCoolDown\",  args: []});Copy to clipboard\nParameter\nType\nDescription\nRedeemSNoteRedeems some amount of sNOTE to underlying constituent tokens (ETH and NOTE).spells.add({  connector: \"NOTIONAL-V2-A\",  method: \"redeemSNote\",  args: [sNOTEAmount, minWETH, minNOTE, redeemWETH]});Copy to clipboard\nParameter\nType\nDescription\nsNOTEAmount\nuint256\namount of sNOTE to redeem\nminWETH\nuint256\nslippage protection for ETH/WETH amount\nminNOTE\nuint256\nslippage protection for NOTE amount\nredeemWETH\nbool\ntrue if redeeming to WETH to ETH\nBatchActionRawExecutes a number of batch actions on the account without getId or setId integrationspells.add({  connector: \"NOTIONAL-V2-A\",  method: \"batchActionRaw\",  args: [actions]});Copy to clipboard\nParameter\nType\nDescription\nactions\nBalanceActionWithTrades[]\na set of BatchActionWithTrades that will be executed for this account","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"542":{"pageContent":"Parameter\nType\nDescription\nactions\nBalanceActionWithTrades[]\na set of BatchActionWithTrades that will be executed for this account\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetMSTABLEMainnetPARASWAP-V5","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/notional"}},"543":{"pageContent":"HOP-MAINNET-A - MainnetCross chain Bridge.\nHop-v1.0 connector on mainnet triggers methods like bridge. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.BridgeBridge Token on HOP.spells.add({  connector: \"HOP-MAINNET-A\",  method: \"bridge\",  args: [params, getId]});Copy to clipboard\nParameter\nType\nDescription\nparams\nBridgeParams\nBridgeParams struct for bridging\ngetId\nuint256\nID to retrieve amount from last spell.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetG-Uniswap V3 ERC20MainnetINST Governance","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/hop"}},"544":{"pageContent":"B.Protocol MakerDAO - MainnetCollateralized Borrowing.\nB.MakerDAO-v1.0 connector on mainnet triggers methods like open, close, transfer, deposit, withdraw, borrow, payback, withdrawLiquidated, depositAndBorrow, exitDai, depositDai, withdrawDai. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.OpenOpen a MakerDAO Vaultspells.add({  connector: \"B-MAKERDAO-A\",  method: \"open\",  args: [colType]});Copy to clipboard\nParameter\nType\nDescription\ncolType\nstring\nType of Collateral.(eg: 'ETH-A')\nCloseClose a MakerDAO Vaultspells.add({  connector: \"B-MAKERDAO-A\",  method: \"close\",  args: [vault]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID to close.\nTransferTransfer a MakerDAO Vault to \"nextOwner\"spells.add({  connector: \"B-MAKERDAO-A\",  method: \"transfer\",  args: [vault, nextOwner]});Copy to clipboard","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-makerdao"}},"545":{"pageContent":"Type\nDescription\nvault\nuint256\nVault ID to close.\nTransferTransfer a MakerDAO Vault to \"nextOwner\"spells.add({  connector: \"B-MAKERDAO-A\",  method: \"transfer\",  args: [vault, nextOwner]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint\nVault ID to close.\nnextOwner\naddress\nAddress of the next owner of the vault.\nDepositDeposit collateral to a MakerDAO vaultspells.add({  connector: \"B-MAKERDAO-A\",  method: \"deposit\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw collateral from a MakerDAO vaultspells.add({  connector: \"B-MAKERDAO-A\",  method: \"withdraw\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-makerdao"}},"546":{"pageContent":"Parameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of tokens to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow DAI using a MakerDAO vaultspells.add({  connector: \"B-MAKERDAO-A\",  method: \"borrow\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of DAI to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI borrowed.\nPaybackPayback DAI debt owed by a MakerDAO vaultspells.add({  connector: \"B-MAKERDAO-A\",  method: \"payback\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of DAI to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-makerdao"}},"547":{"pageContent":"vault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of DAI to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI paid back.\nWithdrawLiquidatedWithdraw leftover collateral after Liquidation.spells.add({  connector: \"B-MAKERDAO-A\",  method: \"withdrawLiquidated\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\ntoken amount to Withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of collateral withdrawn.\nDepositAndBorrowDeposit collateral and borrow DAI.spells.add({  connector: \"B-MAKERDAO-A\",  method: \"depositAndBorrow\",  args: [vault, depositAmt, borrowAmt, getIdDeposit, getIdBorrow, setIdDeposit, setIdBorrow]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\ndepositAmt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\nborrowAmt","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-makerdao"}},"548":{"pageContent":"Parameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\ndepositAmt\nuint256\nThe amount of tokens to deposit. (For max: `uint256(-1)`)\nborrowAmt\nuint256\nThe amount of DAI to borrow.\ngetIdDeposit\nuint256\nID to retrieve depositAmt.\ngetIdBorrow\nuint256\nID to retrieve borrowAmt.\nsetIdDeposit\nuint256\nID stores the amount of tokens deposited.\nsetIdBorrow\nuint256\nID stores the amount of DAI borrowed.\nExitDaiExit DAI from urn.spells.add({  connector: \"B-MAKERDAO-A\",  method: \"exitDai\",  args: [vault, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvault\nuint256\nVault ID. (Use 0 for last opened vault)\namt\nuint256\nThe amount of DAI to exit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI exited.\nDepositDaiDeposit DAI in DSR.spells.add({  connector: \"B-MAKERDAO-A\",  method: \"depositDai\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of DAI to deposit. (For max: `uint256(-1)`)\ngetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-makerdao"}},"549":{"pageContent":"Parameter\nType\nDescription\namt\nuint256\nThe amount of DAI to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI deposited.\nWithdrawDaiWithdraw DAI from DSR.spells.add({  connector: \"B-MAKERDAO-A\",  method: \"withdrawDai\",  args: [amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\namt\nuint256\nThe amount of DAI to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of DAI withdrawn.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetB.Protocol LiquityMainnetComp","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-makerdao"}},"550":{"pageContent":"B.Protocol Liquity - MainnetLending & Borrowing.\nB.Liquity-v1 connector on mainnet triggers methods like deposit, withdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit LUSD into Stability Poolspells.add({  connector: \"B-LIQUITY-A\",  method: \"deposit\",  args: [amount, getDepositId, setDepositId, setLqtyGainId]});Copy to clipboard\nParameter\nType\nDescription\namount\nuint\nAmount of LUSD to deposit into Stability Pool\ngetDepositId\nuint\nOptional storage slot to retrieve the amount of LUSD from\nsetDepositId\nuint\nOptional storage slot to store the final amount of LUSD deposited\nsetLqtyGainId\nuint\nOptional storage slot to store any LQTY gains in","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-liquity"}},"551":{"pageContent":"setDepositId\nuint\nOptional storage slot to store the final amount of LUSD deposited\nsetLqtyGainId\nuint\nOptional storage slot to store any LQTY gains in\nWithdrawWithdraw LUSD from Stability Poolspells.add({  connector: \"B-LIQUITY-A\",  method: \"withdraw\",  args: [numShares, getWithdrawId, setWithdrawId, setLqtyGainId]});Copy to clipboard\nParameter\nType\nDescription\nnumShares\nuint\namount of shares to withdraw from the BAMM\ngetWithdrawId\nuint\nOptional storage slot to retrieve the amount of LUSD to withdraw from\nsetWithdrawId\nuint\nOptional storage slot to store the withdrawn LUSD\nsetLqtyGainId\nuint\nOptional storage slot to store any LQTY gains in","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-liquity"}},"552":{"pageContent":"Optional storage slot to retrieve the amount of LUSD to withdraw from\nsetWithdrawId\nuint\nOptional storage slot to store the withdrawn LUSD\nsetLqtyGainId\nuint\nOptional storage slot to store any LQTY gains in\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetB.Protocol CompoundMainnetB.Protocol MakerDAO","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/bprotocol-liquity"}},"553":{"pageContent":"UNISWAP-V3-SWAP-A - MainnetDecentralized Exchange.\nUniswapV3-Swap-v1 connector on mainnet triggers methods like buy, sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.BuySwap token(sellAddr) with token(buyAddr), buy token with minimum sell tokenspells.add({  connector: \"UNISWAP-V3-SWAP-A\",  method: \"buy\",  args: [_buyAddr, _sellAddr, _fee, _unitAmt, _buyAmt, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_buyAddr\naddress\ntoken to be bought\n_sellAddr\naddress\ntoken to be sold\n_fee\nuint24\npool fees for buyAddr-sellAddr token pair\n_unitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage\n_buyAmt\nuint256\namount of token to be bought\n_getId\nuint256\nId to get buyAmt\n_setId\nuint256\nId to store sellAmt","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap-swap"}},"554":{"pageContent":"_unitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage\n_buyAmt\nuint256\namount of token to be bought\n_getId\nuint256\nId to get buyAmt\n_setId\nuint256\nId to store sellAmt\nSellSwap token(sellAddr) with token(buyAddr), buy token with minimum sell tokenspells.add({  connector: \"UNISWAP-V3-SWAP-A\",  method: \"sell\",  args: [_buyAddr, _sellAddr, _fee, _unitAmt, _sellAmt, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_buyAddr\naddress\ntoken to be bought\n_sellAddr\naddress\ntoken to be sold\n_fee\nuint24\npool fees for buyAddr-sellAddr token pair\n_unitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage\n_sellAmt\nuint256\namount of token to be sold\n_getId\nuint256\nId to get sellAmt\n_setId\nuint256\nId to store buyAmt","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap-swap"}},"555":{"pageContent":"_unitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage\n_sellAmt\nuint256\namount of token to be sold\n_getId\nuint256\nId to get sellAmt\n_setId\nuint256\nId to store buyAmt\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetUBIQUITYMainnetUNISWAP-V3-ROUTER","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswap-swap"}},"556":{"pageContent":"UNISWAP-V3-SWAP-A - OptimismDecentralized Exchange.\nUniswapV3-Swap-v1 connector on optimism triggers methods like buy, sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.BuySwap token(sellAddr) with token(buyAddr), buy token with minimum sell tokenspells.add({  connector: \"UNISWAP-V3-SWAP-A\",  method: \"buy\",  args: [_buyAddr, _sellAddr, _fee, _unitAmt, _buyAmt, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_buyAddr\naddress\ntoken to be bought\n_sellAddr\naddress\ntoken to be sold\n_fee\nuint24\npool fees for buyAddr-sellAddr token pair\n_unitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage\n_buyAmt\nuint256\namount of token to be bought\n_getId\nuint256\nId to get buyAmt\n_setId\nuint256\nId to store sellAmt","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap-swap"}},"557":{"pageContent":"_unitAmt\nuint256\nThe unit amount of sellAmt/buyAmt with slippage\n_buyAmt\nuint256\namount of token to be bought\n_getId\nuint256\nId to get buyAmt\n_setId\nuint256\nId to store sellAmt\nSellSwap token(sellAddr) with token(buyAddr), buy token with minimum sell tokenspells.add({  connector: \"UNISWAP-V3-SWAP-A\",  method: \"sell\",  args: [_buyAddr, _sellAddr, _fee, _unitAmt, _sellAmt, _getId, _setId]});Copy to clipboard\nParameter\nType\nDescription\n_buyAddr\naddress\ntoken to be bought\n_sellAddr\naddress\ntoken to be sold\n_fee\nuint24\npool fees for buyAddr-sellAddr token pair\n_unitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage\n_sellAmt\nuint256\namount of token to be sold\n_getId\nuint256\nId to get sellAmt\n_setId\nuint256\nId to store buyAmt","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap-swap"}},"558":{"pageContent":"_unitAmt\nuint256\nThe unit amount of buyAmt/sellAmt with slippage\n_sellAmt\nuint256\namount of token to be sold\n_getId\nuint256\nId to get sellAmt\n_setId\nuint256\nId to store buyAmt\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.OptimismSWAP-AGGREGATOR-AOptimismUNISWAP-V3-ROUTER","metadata":{"source":"https://docs.instadapp.io/connectors/optimism/uniswap-swap"}},"559":{"pageContent":"1INCH-V4 - MainnetOn-chain DEX Aggregator.\n1Inch-v4 connector on mainnet triggers methods like sell. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SellSwap tokens from exchanges like kyber, 0x etc, with calculation done off-chain.spells.add({  connector: \"1INCH-V4-A\",  method: \"sell\",  args: [buyAddr, sellAddr, sellAmt, unitAmt, callData, setId]});Copy to clipboard\nParameter\nType\nDescription\nbuyAddr\naddress\nThe address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAddr\naddress\nThe address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nsellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint\nID stores the amount of token brought.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/1inch-v4"}},"560":{"pageContent":"sellAmt\nuint\nThe amount of the token to sell.\nunitAmt\nuint\nThe amount of buyAmt/sellAmt with slippage.\ncallData\nbytes\nData from 1inch API.\nsetId\nuint\nID stores the amount of token brought.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.Mainnet0xMainnet1Inch (on-chain)","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/1inch-v4"}},"561":{"pageContent":"EULER-IMPORT-A - MainnetImport Euler position .\nEuler-Import-v1.0 connector on mainnet triggers methods like importEuler. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ImportEulerImport EOA's Euler position to DSA's Euler positionspells.add({  connector: \"EULER-IMPORT-A\",  method: \"importEuler\",  args: [userAccount, sourceId, targetId, inputData]});Copy to clipboard\nParameter\nType\nDescription\nuserAccount\naddress\nEOA address\nsourceId\nuint256\nSub-account id of \"EOA\" from which the funds will be transferred\ntargetId\nuint256\nSub-account id of \"DSA\" to which the funds will be transferred\ninputData\nImportInputData\nThe struct containing all the neccessary input data","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/euler-import"}},"562":{"pageContent":"targetId\nuint256\nSub-account id of \"DSA\" to which the funds will be transferred\ninputData\nImportInputData\nThe struct containing all the neccessary input data\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetCompound-IIIMainnetEuler","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/euler-import"}},"563":{"pageContent":"Instapool V2 - MainnetInbuilt Flash Loan in DSA\nInstapool-v1.1 connector on mainnet triggers methods like flashBorrowAndCast, flashPayback. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.FlashBorrowAndCastBorrow Flashloan and Cast spells.spells.add({  connector: \"INSTAPOOL-A\",  method: \"flashBorrowAndCast\",  args: [token, amt, route, data]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\nroute\nuint\nFlashloan source route. (0: dYdX(ETH,DAI,USDC only), 1: MakerDAO(DAI only), 2: Compound(All borrowable tokens in Compound), 3: AaveV2(All borrowable tokens in AaveV2))\ndata\nbytes\ntargets & data for cast.\nFlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-A\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/instapool_v2"}},"564":{"pageContent":"bytes\ntargets & data for cast.\nFlashPaybackReturn token to InstaPool.spells.add({  connector: \"INSTAPOOL-A\",  method: \"flashPayback\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nToken Address.\namt\nuint\nToken Amount.\ngetId\nuint\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint\nSet token amount at this ID in `InstaMemory` Contract.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetINST GovernanceMainnetINSTAPOOL-V4","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/instapool_v2"}},"565":{"pageContent":"Uniswap V3 - MainnetDecentralized Exchange.\nUniswapV3-v1 connector on mainnet triggers methods like createAndInitializePool, mint, deposit, withdraw, collect, burn. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.CreateAndInitializePoolCreate and Initialize new pool if requiredspells.add({  connector: \"UNISWAP-V3-A\",  method: \"createAndInitializePool\",  args: [tokenA, tokenB, fee, initialTick]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\ntokenA addreess\ntokenB\naddress\ntokenB addreess\nfee\nuint24\nfee percentage\ninitialTick\nint24\nInitial tick for the pool\nMintMint New NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"mint\",  args: [tokenA, tokenB, fee, tickLower, tickUpper, amtA, amtB, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenA\naddress\ntokenA addreess\ntokenB","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswapv3"}},"566":{"pageContent":"Parameter\nType\nDescription\ntokenA\naddress\ntokenA addreess\ntokenB\naddress\ntokenB addreess\nfee\nuint24\nfee percentage\ntickLower\nint24\nLower tick\ntickUpper\nint24\nUpper tick\namtA\nuint256\namount of tokenA\namtB\nuint256\namount of tokenB\nslippage\nuint256\nslippage percentage\ngetIds\nuint256[]\nID to retrieve amtA\nsetId\nuint256\nID stores the amount of LP token\nDepositIncrease Liquidity of NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"deposit\",  args: [tokenId, amountA, amountB, slippage, getIds, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\namountA\nuint256\ntokenA amounts.\namountB\nuint256\ntokenB amounts.\nslippage\nuint256\nslippage.\ngetIds\nuint256[]\nIDs to retrieve token amounts\nsetId\nuint256\nstores the liquidity amount\nWithdrawDecrease Liquidity of NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"withdraw\",  args: [tokenId, liquidity, amountAMin, amountBMin, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\nliquidity\nuint256\nLP Token amount.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswapv3"}},"567":{"pageContent":"Parameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\nliquidity\nuint256\nLP Token amount.\namountAMin\nuint256\nMin amount of tokenA.\namountBMin\nuint256\nMin amount of tokenB.\ngetId\nuint256\nID to retrieve LP token amounts\nsetIds\nuint256[]\nstores the amount of output tokens\nCollectCollect from NFT Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"collect\",  args: [tokenId, amount0Max, amount1Max, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID.\namount0Max\nuint256\nMax amount of token0.\namount1Max\nuint256\nMax amount of token1.\ngetIds\nuint256[]\nIDs to retrieve amounts\nsetIds\nuint256[]\nstores the amount of output tokens\nBurnBurn NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"burn\",  args: [tokenId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswapv3"}},"568":{"pageContent":"BurnBurn NFT LP Positionspells.add({  connector: \"UNISWAP-V3-A\",  method: \"burn\",  args: [tokenId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nuint256\nNFT LP Token ID\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetUniswap V2MainnetUNIVERSE","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/uniswapv3"}},"569":{"pageContent":"Gelato Aave Protection - MainnetProtect DSA against Liquidation risk on Aave with Gelato.\nGAaveProtectionMainnetConnector-v1 connector on mainnet triggers methods like submitProtection, updateProtection, cancelProtection, cancelAndRevoke. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SubmitProtectionspells.add({  connector: \"GELATO-AAVE-A\",  method: \"submitProtection\",  args: [_wantedHealthFactor, _minimumHealthFactor, _isPermanent]});Copy to clipboard\nParameter\nType\nDescription\n_wantedHealthFactor\nuint256\ntargeted health after protection.\n_minimumHealthFactor\nuint256\ntrigger protection when current health\n_isPermanent\nbool\nboolean to set a protection as permanent","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/gelato-aave-protection"}},"570":{"pageContent":"Type\nDescription\n_wantedHealthFactor\nuint256\ntargeted health after protection.\n_minimumHealthFactor\nuint256\ntrigger protection when current health\n_isPermanent\nbool\nboolean to set a protection as permanent\nUpdateProtectionspells.add({  connector: \"GELATO-AAVE-A\",  method: \"updateProtection\",  args: [_wantedHealthFactor, _minimumHealthFactor, _isPermanent]});Copy to clipboard\nParameter\nType\nDescription\n_wantedHealthFactor\nuint256\ntargeted health after protection.\n_minimumHealthFactor\nuint256\ntrigger protection when current health\n_isPermanent\nbool\nboolean to set a protection as permanent\nCancelProtectionspells.add({  connector: \"GELATO-AAVE-A\",  method: \"cancelProtection\",  args: []});Copy to clipboard\nParameter\nType\nDescription\nCancelAndRevokespells.add({  connector: \"GELATO-AAVE-A\",  method: \"cancelAndRevoke\",  args: []});Copy to clipboard\nParameter\nType\nDescription","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/gelato-aave-protection"}},"571":{"pageContent":"Parameter\nType\nDescription\nCancelAndRevokespells.add({  connector: \"GELATO-AAVE-A\",  method: \"cancelAndRevoke\",  args: []});Copy to clipboard\nParameter\nType\nDescription\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetEulerMainnetG-UNI Staking","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/gelato-aave-protection"}},"572":{"pageContent":"MSTABLE - MainnetDepositing and withdrawing directly to Save\nmStable-v1.0 connector on mainnet triggers methods like . You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.If you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetMORPHO-REWARDS-AMainnetNOTIONAL-V2-A","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/mstable"}},"573":{"pageContent":"Lite-A - MainnetSupply, Withdraw & Deleverage\nInstaLite-v1.1 connector on mainnet triggers methods like supply, withdraw, deleverage, deleverageAndWithdraw. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.SupplySupply a token into Instalite.spells.add({  connector: \"LITE-A\",  method: \"supply\",  args: [vaultAddr, token, amt, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\nvaultAddr\naddress\nAddress of instaLite Contract.\ntoken\naddress\nThe address of the token to be supplied. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of token to be supplied. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetIds\nuint256[]\narray of IDs to store the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/lite"}},"574":{"pageContent":"amt\nuint256\nThe amount of token to be supplied. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetIds\nuint256[]\narray of IDs to store the amount of tokens deposited.\nWithdrawWithdraw deposited tokens from Instalite.spells.add({  connector: \"LITE-A\",  method: \"withdraw\",  args: [vaultAddr, amt, getId, setIds]});Copy to clipboard\nParameter\nType\nDescription\nvaultAddr\naddress\nAddress of vaultAddress Contract.\namt\nuint256\nThe amount of the token to withdraw.\ngetId\nuint256\nID to retrieve amt.\nsetIds\nuint256[]\narray of IDs to stores the amount of tokens withdrawn.\nDeleverageDeleverage Instalite vault.spells.add({  connector: \"LITE-A\",  method: \"deleverage\",  args: [vaultAddr, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nvaultAddr\naddress\nAddress of vaultAddress Contract.\namt\nuint256\nThe amount of the token to deleverage.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID to set amt.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/lite"}},"575":{"pageContent":"Parameter\nType\nDescription\nvaultAddr\naddress\nAddress of vaultAddress Contract.\namt\nuint256\nThe amount of the token to deleverage.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID to set amt.\nDeleverageAndWithdrawDeleverage Instalite vault.spells.add({  connector: \"LITE-A\",  method: \"deleverageAndWithdraw\",  args: [vaultAddr, deleverageAmt, withdrawAmt, getIds, setIds]});Copy to clipboard\nParameter\nType\nDescription\nvaultAddr\naddress\nAddress of vaultAddress Contract.\ndeleverageAmt\nuint256\nThe amount of the weth to deleverage.\nwithdrawAmt\nuint256\nThe amount of the token to withdraw.\ngetIds\nuint256[]\nIDs to retrieve amts.\nsetIds\nuint256[]\nIDs to set amts.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/lite"}},"576":{"pageContent":"deleverageAmt\nuint256\nThe amount of the weth to deleverage.\nwithdrawAmt\nuint256\nThe amount of the token to withdraw.\ngetIds\nuint256[]\nIDs to retrieve amts.\nsetIds\nuint256[]\nIDs to set amts.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetLite-BMainnetMakerDAO","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/lite"}},"577":{"pageContent":"Compound - MainnetLending & Borrowing.\nCompound-v1.1 connector on mainnet triggers methods like depositRaw, deposit, withdrawRaw, withdraw, borrowRaw, borrow, paybackRaw, payback, depositCTokenRaw, depositCToken, withdrawCTokenRaw, withdrawCToken, liquidateRaw, liquidate. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositRawDeposit a token to Compound for lending / collaterization.spells.add({  connector: \"COMPOUND-A\",  method: \"depositRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v2"}},"578":{"pageContent":"cToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nDepositDeposit a token to Compound for lending / collaterization.spells.add({  connector: \"COMPOUND-A\",  method: \"deposit\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to deposit.(For eg: ETH-A)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawRawWithdraw deposited token from Compoundspells.add({  connector: \"COMPOUND-A\",  method: \"withdrawRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v2"}},"579":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nWithdrawWithdraw deposited token from Compoundspells.add({  connector: \"COMPOUND-A\",  method: \"withdraw\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to withdraw.(For eg: ETH-A)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowRawBorrow a token using Compoundspells.add({  connector: \"COMPOUND-A\",  method: \"borrowRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v2"}},"580":{"pageContent":"BorrowRawBorrow a token using Compoundspells.add({  connector: \"COMPOUND-A\",  method: \"borrowRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nBorrowBorrow a token using Compoundspells.add({  connector: \"COMPOUND-A\",  method: \"borrow\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to borrow.(For eg: DAI-A)\namt\nuint256\nThe amount of the token to borrow.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackRawPayback debt owed.spells.add({  connector: \"COMPOUND-A\",  method: \"paybackRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v2"}},"581":{"pageContent":"PaybackRawPayback debt owed.spells.add({  connector: \"COMPOUND-A\",  method: \"paybackRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackPayback debt owed.spells.add({  connector: \"COMPOUND-A\",  method: \"payback\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to payback.(For eg: COMP-A)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v2"}},"582":{"pageContent":"amt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nDepositCTokenRawSame as depositRaw. The only difference is this method stores cToken amount in set ID.spells.add({  connector: \"COMPOUND-A\",  method: \"depositCTokenRaw\",  args: [token, cToken, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of cTokens received.\nDepositCTokenSame as deposit. The only difference is this method stores cToken amount in set ID.spells.add({  connector: \"COMPOUND-A\",  method: \"depositCToken\",  args: [tokenId, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v2"}},"583":{"pageContent":"Parameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to depositCToken.(For eg: DAI-A)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of cTokens received.\nWithdrawCTokenRawSame as withdrawRaw. The only difference is this method fetch cToken amount in get ID.spells.add({  connector: \"COMPOUND-A\",  method: \"withdrawCTokenRaw\",  args: [token, cToken, cTokenAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw. (For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncToken\naddress\nThe address of the corresponding cToken.\ncTokenAmt\nuint\nThe amount of cTokens to withdraw\ngetId\nuint\nID to retrieve cTokenAmt\nsetId\nuint\nID stores the amount of tokens withdrawn.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v2"}},"584":{"pageContent":"cToken\naddress\nThe address of the corresponding cToken.\ncTokenAmt\nuint\nThe amount of cTokens to withdraw\ngetId\nuint\nID to retrieve cTokenAmt\nsetId\nuint\nID stores the amount of tokens withdrawn.\nWithdrawCTokenSame as withdraw. The only difference is this method fetch cToken amount in get ID.spells.add({  connector: \"COMPOUND-A\",  method: \"withdrawCToken\",  args: [tokenId, cTokenAmt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenId\nstring\nThe token id of the token to withdraw CToken.(For eg: ETH-A)\ncTokenAmt\nuint\nThe amount of cTokens to withdraw\ngetId\nuint\nID to retrieve cTokenAmt\nsetId\nuint\nID stores the amount of tokens withdrawn.\nLiquidateRawLiquidate a position.spells.add({  connector: \"COMPOUND-A\",  method: \"liquidateRaw\",  args: [borrower, tokenToPay, cTokenPay, tokenInReturn, cTokenColl, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nborrower\naddress\nBorrower's Address.\ntokenToPay\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v2"}},"585":{"pageContent":"Parameter\nType\nDescription\nborrower\naddress\nBorrower's Address.\ntokenToPay\naddress\nThe address of the token to pay for liquidation.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\ncTokenPay\naddress\nCorresponding cToken address.\ntokenInReturn\naddress\nThe address of the token to return for liquidation.\ncTokenColl\naddress\nCorresponding cToken address.\namt\nuint256\nThe token amount to pay for liquidation.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of paid for liquidation.\nLiquidateLiquidate a position using the mapping.spells.add({  connector: \"COMPOUND-A\",  method: \"liquidate\",  args: [borrower, tokenIdToPay, tokenIdInReturn, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nborrower\naddress\nBorrower's Address.\ntokenIdToPay\nstring\ntoken id of the token to pay for liquidation.(For eg: ETH-A)\ntokenIdInReturn\nstring\ntoken id of the token to return for liquidation.(For eg: USDC-A)\namt\nuint256\ntoken amount to pay for liquidation.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v2"}},"586":{"pageContent":"tokenIdInReturn\nstring\ntoken id of the token to return for liquidation.(For eg: USDC-A)\namt\nuint256\ntoken amount to pay for liquidation.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of paid for liquidation.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetCompMainnetCompound-III-Rewards","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/compound-v2"}},"587":{"pageContent":"Aave V2 - MainnetLending & Borrowing.\nAaveV2-v1.2 connector on mainnet triggers methods like deposit, withdraw, borrow, payback, paybackOnBehalfOf, enableCollateral, swapBorrowRateMode. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.DepositDeposit a token to Aave v2 for lending / collaterization.spells.add({  connector: \"AAVE-V2-A\",  method: \"deposit\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v2"}},"588":{"pageContent":"amt\nuint256\nThe amount of the token to deposit. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens deposited.\nWithdrawWithdraw deposited token from Aave v2spells.add({  connector: \"AAVE-V2-A\",  method: \"withdraw\",  args: [token, amt, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to withdraw. (For max: `uint256(-1)`)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens withdrawn.\nBorrowBorrow a token using Aave v2spells.add({  connector: \"AAVE-V2-A\",  method: \"borrow\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of borrow debt. (For Stable: 1, Variable: 2)\ngetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v2"}},"589":{"pageContent":"amt\nuint256\nThe amount of the token to borrow.\nrateMode\nuint256\nThe type of borrow debt. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens borrowed.\nPaybackPayback debt owed.spells.add({  connector: \"AAVE-V2-A\",  method: \"payback\",  args: [token, amt, rateMode, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nPaybackOnBehalfOfPayback debt owed on behalf os a user.spells.add({  connector: \"AAVE-V2-A\",  method: \"paybackOnBehalfOf\",  args: [token, amt, rateMode, onBehalfOf, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v2"}},"590":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\namt\nuint256\nThe amount of the token to payback. (For max: `uint256(-1)`)\nrateMode\nuint256\nThe type of debt paying back. (For Stable: 1, Variable: 2)\nonBehalfOf\naddress\nAddress of user who's debt to repay.\ngetId\nuint256\nID to retrieve amt.\nsetId\nuint256\nID stores the amount of tokens paid back.\nEnableCollateralEnable an array of tokens as collateralspells.add({  connector: \"AAVE-V2-A\",  method: \"enableCollateral\",  args: [tokens]});Copy to clipboard\nParameter\nType\nDescription\ntokens\naddress[]\nArray of tokens to enable collateral\nSwapBorrowRateModeSwaps user borrow rate mode between variable and stablespells.add({  connector: \"AAVE-V2-A\",  method: \"swapBorrowRateMode\",  args: [token, rateMode]});Copy to clipboard\nParameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v2"}},"591":{"pageContent":"Parameter\nType\nDescription\ntoken\naddress\nThe address of the token to swap borrow rate.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\nrateMode\nuint256\nCurrent Rate mode. (Stable = 1, Variable = 2)\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetAave V1MainnetAave V3","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/aave-v2"}},"592":{"pageContent":"PoolTogether - MainnetDeposit & Withdraw from PoolTogether\nPoolTogether-v1 connector on mainnet triggers methods like claim, claimAll, claimPodTokenDrop, depositToPod. You can view details like source code, ABIs on Etherscan.Use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee to indicate ETH.use -1 or dsa.maxValue for the maximum amount in function.If not sure about the arguments getId and setId, pass 0.ClaimClaim token from a Token Faucetspells.add({  connector: \"POOLTOGETHER-A\",  method: \"claim\",  args: [tokenFaucet, setId]});Copy to clipboard\nParameter\nType\nDescription\ntokenFaucet\naddress\nTokenFaucet address\nsetId\nuint256\nSet claimed amount at this ID in `InstaMemory` Contract.\nClaimAllRuns claim on all passed comptrollers for a user.spells.add({  connector: \"POOLTOGETHER-A\",  method: \"claimAll\",  args: [tokenFaucetProxyFactory, tokenFaucets]});Copy to clipboard\nParameter\nType\nDescription\ntokenFaucetProxyFactory\naddress\nThe TokenFaucetProxyFactory address\ntokenFaucets\nTokenFaucetInterface[]","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/pooltogether"}},"593":{"pageContent":"Parameter\nType\nDescription\ntokenFaucetProxyFactory\naddress\nThe TokenFaucetProxyFactory address\ntokenFaucets\nTokenFaucetInterface[]\nThe tokenFaucets to call claim on.\nClaimPodTokenDropClaim asset rewards from a TokenDropspells.add({  connector: \"POOLTOGETHER-A\",  method: \"claimPodTokenDrop\",  args: [podTokenDrop, setId]});Copy to clipboard\nParameter\nType\nDescription\npodTokenDrop\naddress\nPod TokenDrop address\nsetId\nuint256\nSet claimed amount at this ID in `InstaMemory` Contract.\nDepositToPodDeposit assets into the Pod in exchange for share tokensspells.add({  connector: \"POOLTOGETHER-A\",  method: \"depositToPod\",  args: [prizePoolToken, pod, tokenAmount, getId, setId]});Copy to clipboard\nParameter\nType\nDescription\nprizePoolToken\naddress\nPrize Pool Token Address\npod\naddress\nPod address to deposit to\ntokenAmount\nuint256\nThe amount of tokens to deposit.  These are the same tokens used to deposit into the underlying prize pool.\ngetId\nuint256\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint256","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/pooltogether"}},"594":{"pageContent":"uint256\nThe amount of tokens to deposit.  These are the same tokens used to deposit into the underlying prize pool.\ngetId\nuint256\nGet token amount at this ID from `InstaMemory` Contract.\nsetId\nuint256\nSet token amount at this ID in `InstaMemory` Contract.\nIf you still can't find something you're looking for or have any questions, ask them at our developers community on Discord or simply send an Email.Our team is excited about assisting you to build an application using Instadapp Developer Platform. Your questions and feedback help us make a better development environment for future developers.MainnetPARASWAP-V5MainnetReflexer","metadata":{"source":"https://docs.instadapp.io/connectors/mainnet/pooltogether"}}}